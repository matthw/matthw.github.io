<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>malware on # matth.dmz42.org</title>
    <link>https://matth.dmz42.org/tags/malware/</link>
    <description>Recent content in malware on # matth.dmz42.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 08 Nov 2021 14:20:47 +0100</lastBuildDate><atom:link href="https://matth.dmz42.org/tags/malware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Return of the Malwarebytes Crackme</title>
      <link>https://matth.dmz42.org/posts/2021/the-return-of-the-malwarebytes-crackme/</link>
      <pubDate>Mon, 08 Nov 2021 14:20:47 +0100</pubDate>
      
      <guid>https://matth.dmz42.org/posts/2021/the-return-of-the-malwarebytes-crackme/</guid>
      <description>0. First Look Running the crackme, we understand we&amp;rsquo;ll be asked to find 3 passwords. Only the first button is enabled, so they will most likely need to be found in order
Loading the binary into PE-bear reveals it&amp;rsquo;s a Dot Net binary
so let&amp;rsquo;s open it in dnSpy
It opens nicely, so far, so good.
1. Level 1 Browsing a little bit in dnSpy we quickly find the code behind the 3 buttons, so let&amp;rsquo;s start with the first one: It&amp;rsquo;s basically calling a decode function with a resource named mb_logo_star as first parameter and our input password as 2nd parameter.</description>
    </item>
    
  </channel>
</rss>
